{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GEF - GDB Enhanced Features","text":"<p><code>GEF</code> (pronounced \u02a4\u025bf - \"Jeff\") is a kick-ass set of commands for X86, ARM, MIPS, PowerPC and SPARC to make GDB cool again for exploit dev. It is aimed to be used mostly by exploit developers and reverse-engineers, to provide additional features to GDB using the Python API to assist during the process of dynamic analysis and exploit development.</p> <p>It requires Python 3, but <code>gef-legacy</code> can be used if Python 2 support is needed.</p> <p></p>"},{"location":"#gdb-made-easy","title":"GDB Made Easy","text":"<ul> <li>One single GDB script</li> <li>Entirely architecture agnostic, NO dependencies: <code>GEF</code> is battery-included and is   installable instantly</li> <li>Fast limiting the number of dependencies and optimizing code to make the commands as fast as   possible</li> <li>Provides a great variety of commands to drastically change your debugging experience in GDB.</li> <li>Easily extensible to create other commands by providing   more comprehensible layout to GDB Python API.</li> <li>Full Python3 support (Python2 support was dropped in   2020.03) - check out   <code>gef-legacy</code> for a Python2 compatible version, and the   compatibility matrix for a complete rundown of version support.</li> <li>Built around an architecture abstraction layer, so all commands work in any GDB-supported   architecture such as x86-32/64, ARMv5/6/7, AARCH64, SPARC, MIPS, PowerPC, etc.</li> <li>Suited for real-life debugging, exploit development, just as much as for CTFs</li> <li>And a lot more commands contributed by the community available on GEF-Extras !!</li> </ul> <p>Check out the showroom page for more | or try it online yourself! (user:<code>gef</code>/password:<code>gef-demo</code>)</p>"},{"location":"#quick-start","title":"Quick start","text":""},{"location":"#automated-installation","title":"Automated installation","text":"<p>GEF has no dependencies, is fully battery-included and works out of the box. You can get started with GEF in a matter of seconds, by simply running:</p> <pre><code>bash -c \"$(curl -fsSL https://gef.blah.cat/sh)\"\n</code></pre> <p>For more details and other ways to install GEF please see installation page.</p>"},{"location":"#run","title":"Run","text":"<p>Then just start playing (for local files):</p> <pre><code>$ gdb -q /path/to/my/bin\ngef\u27a4  gef help\n</code></pre> <p>Or (for remote debugging):</p> <pre><code>remote:~ $ gdbserver 0.0.0.0:1234 /path/to/file\nRunning as PID: 666\n</code></pre> <p>And:</p> <pre><code>local:~ $ gdb -q\ngef\u27a4  gef-remote -t your.ip.address:1234 -p 666\n</code></pre>"},{"location":"#bugs-feedbacks","title":"Bugs &amp; Feedbacks","text":"<p>To discuss <code>gef</code>, <code>gdb</code>, exploitation or other topics, feel free to join our Discord channel.</p> <p>For bugs or feature requests, just go here and provide a thorough description if you want help.</p> <p>Side Note: <code>GEF</code> fully relies on the GDB API and other Linux-specific sources of information (such as <code>/proc/&lt;pid&gt;</code>). As a consequence, some of the features might not work on custom or hardened systems such as GrSec.</p>"},{"location":"#contribution","title":"Contribution","text":"<p><code>gef</code> was created and maintained by myself, <code>@_hugsy_</code>, but kept fresh thanks to all the contributors.</p> <p></p> <p>Or if you just like the tool, feel free to drop a simple \"thanks\" on Discord, Twitter or other, it is always very appreciated.</p>"},{"location":"#sponsors","title":"Sponsors","text":"<p>We would like to thank in particular the following people who've been sponsoring GEF allowing us to dedicate more time and resources to the project:</p> <p> </p>"},{"location":"#extra-credits","title":"Extra Credits","text":"<ul> <li>The GEF logo was designed by TheZakMan</li> </ul>"},{"location":"#happy-hacking","title":"\ud83c\udf7a Happy hacking","text":""},{"location":"api/","title":"Write extensions","text":""},{"location":"api/#extending-gef","title":"Extending GEF","text":"<p><code>GEF</code> intends to provide a battery-included, quickly installable and crazy fast debugging environment sitting on top of GDB.</p> <p>But it most importantly provides all the primitives required to allow hackers to quickly create their own commands. This page intends to summarize how to create advanced GDB commands in moments using <code>GEF</code> as a library.</p> <p>A dedicated repository was born to host external scripts. This repo is open to all for contributions, no restrictions and the most valuable ones will be integrated into <code>gef.py</code>.</p>"},{"location":"api/#quick-start","title":"Quick start","text":"<p>Here is the most basic skeleton for creating a new <code>GEF</code> command named <code>newcmd</code>:</p> <pre><code>@register\nclass NewCommand(GenericCommand):\n    \"\"\"Dummy new command.\"\"\"\n    _cmdline_ = \"newcmd\"\n    _syntax_  = f\"{_cmdline_}\"\n    # optionally\n    # _examples_ = [f\"{_cmdline_} arg1 ...\", ]\n    # _aliases_ = [\"alias_to_cmdline\", ]\n\n    @only_if_gdb_running         # not required, ensures that the debug session is started\n    def do_invoke(self, argv):\n        # let's say we want to print some info about the architecture of the current binary\n        print(f\"gef.arch={gef.arch}\")\n        # or showing the current $pc\n        print(f\"gef.arch.pc={gef.arch.pc:#x}\")\n</code></pre> <p>Loading it in <code>GEF</code> is as easy as</p> <pre><code>gef\u27a4  source /path/to/newcmd.py\n[+] Loading 'NewCommand'\n</code></pre> <p>The new command is now loaded and part of GEF and can be invoked as such:</p> <pre><code>gef\u27a4  newcmd\ngef.arch=&lt;__main__.X86_64 object at 0x7fd5583571c0&gt;\ngef.arch.pc=0x55555555a7d0\n</code></pre> <p>Yes, that's it! Check out the complete API to see what else GEF offers.</p>"},{"location":"api/#detailed-explanation","title":"Detailed explanation","text":"<p>Our new command must be a class that inherits from GEF's <code>GenericCommand</code>. The only requirements are:</p> <ul> <li>a <code>_cmdline_</code> attribute (the command to type on the GDB prompt).</li> <li>a <code>_syntax_</code> attribute, which GEF will use to auto-generate the help menu.</li> <li>a method <code>do_invoke(self, args)</code> which will be executed when the command is invoked. <code>args</code> is a   list of the command line args provided when invoked.</li> </ul> <p>We make GEF aware of this new command by registering it in the <code>__main__</code> section of the script, by invoking the global function <code>register_external_command()</code>.</p> <p>Now you have a new GEF command which you can load, either from cli:</p> <pre><code>gef\u27a4  source /path/to/newcmd.py\n</code></pre> <p>or add to your <code>~/.gdbinit</code>:</p> <pre><code>echo source /path/to/newcmd.py &gt;&gt; ~/.gdbinit\n</code></pre>"},{"location":"api/#customizing-context-panes","title":"Customizing context panes","text":"<p>Sometimes you want something similar to a command to run on each break-like event and display itself as a part of the GEF context. This can be achieved using the following function <code>register_external_context_pane()</code>.</p> <p>Here is a simple example of how to make a custom context pane:</p> <pre><code>__start_time__ = int(time.time())\ndef wasted_time_debugging():\n    gef_print(\"You have wasted {} seconds!\".format(int(time.time()) - __start_time__))\n\ndef wasted_time_debugging_title():\n    return \"wasted:time:debugging:{}\".format(int(time.time()) - __start_time__)\n\nregister_external_context_pane(\"wasted_time_debugging\", wasted_time_debugging, wasted_time_debugging_title)\n</code></pre> <p>Loading it in <code>GEF</code> is as easy as loading a command</p> <pre><code>gef\u27a4  source /path/to/custom_context_pane.py\n</code></pre> <p>It can even be included in the same file as a Command. Now on each break you will notice a new pane near the bottom of the context. The order can be modified in the <code>GEF</code> context config.</p>"},{"location":"api/#context-pane-api","title":"Context Pane API","text":"<p>The API demonstrated above requires very specific argument types:</p> <pre><code>def register_external_context_pane(\n    name: str,\n    context_callback: Callable[None,[]],\n    context_callback_title: Callable[str, []],\n    condition_callback: Optional[Callable[bool, []]] = None\n) -&gt; None:\n</code></pre> <ul> <li><code>name</code>: a string that will be used as the panes setting name</li> <li><code>context_callback</code>: a function that uses <code>gef_print()</code> to print content in the pane</li> <li><code>context_callback_title</code>: a function that returns the title string or None to hide the title</li> <li><code>condition_callback</code> (optional): a function that returns a boolean deciding whether this context  pane should be shown</li> </ul>"},{"location":"api/#context-layout-mapping-api","title":"Context Layout Mapping API","text":"<p>This API is designed for registering a new layout mapping for a GEF Context View. It specifies the interface for the function register_external_context_layout_mapping which operates similarly to the previously discussed register_external_context_pane. Pane must have been previously established in the layout configuration.</p> <pre><code>def register_external_context_layout_mapping(\n    current_pane_name: str,\n    display_pane_function: Callable[[], None],\n    pane_title_function: Callable[[], Optional[str]],\n    condition: Optional[Callable[[], bool]] = None\n) -&gt; None:\n</code></pre> <p>Registers a new mapping for an existing pane within the GEF Context View.</p> <ul> <li><code>current_pane_name</code>: the name of an already registered pane in the layout</li> <li><code>display_pane_function</code>: a function that prints content in the pane using <code>gef_print()</code></li> <li><code>pane_title_function</code>: a function that returns a string to be used as the pane title or None if no title should be displayed</li> <li><code>condition</code>: (optional) a predicate function that must return True for the pane content and title to be displayed; if it returns False, the pane is skipped</li> </ul>"},{"location":"api/#api","title":"API","text":"<p>Some of the most important parts of the API for creating new commands are mentioned (but not limited to) below. To see the full help of a function, open GDB and GEF, and use the embedded Python interpreter's <code>help</code> command.</p> <p>For example:</p> <pre><code>gef\u27a4  pi help(Architecture)\n</code></pre> <p>or even from outside GDB:</p> <pre><code>gdb -q -ex 'pi help(hexdump)' -ex quit\n</code></pre> <p>The GEF API aims to provide a simpler and more Pythonic approach to GDB's.</p> <p>Some basic examples:</p> <ul> <li>read the memory</li> </ul> <pre><code>gef \u27a4  pi print(hexdump( gef.memory.read(parse_address(\"$pc\"), length=0x20 )))\n0x0000000000000000     f3 0f 1e fa 31 ed 49 89 d1 5e 48 89 e2 48 83 e4    ....1.I..^H..H..\n0x0000000000000010     f0 50 54 4c 8d 05 66 0d 01 00 48 8d 0d ef 0c 01    .PTL..f...H.....\n</code></pre> <ul> <li>get access to the memory layout</li> </ul> <pre><code>gef \u27a4 pi print('\\n'.join([ f\"{x.page_start:#x} -&gt; {x.page_end:#x}\" for x in gef.memory.maps]))\n0x555555554000 -&gt; 0x555555558000\n0x555555558000 -&gt; 0x55555556c000\n0x55555556c000 -&gt; 0x555555575000\n0x555555576000 -&gt; 0x555555577000\n0x555555577000 -&gt; 0x555555578000\n0x555555578000 -&gt; 0x55555559a000\n0x7ffff7cd8000 -&gt; 0x7ffff7cda000\n0x7ffff7cda000 -&gt; 0x7ffff7ce1000\n0x7ffff7ce1000 -&gt; 0x7ffff7cf2000\n0x7ffff7cf2000 -&gt; 0x7ffff7cf7000\n[...]\n</code></pre> <p>The API also offers a number of decorators to simplify the creation of new/existing commands, such as:</p> <ul> <li><code>@only_if_gdb_running</code> to execute only if a GDB session is running.</li> <li><code>@only_if_gdb_target_local</code> to check if the target is local i.e. not debugging using GDB <code>remote</code>.</li> <li>and many more...</li> </ul>"},{"location":"api/#reference","title":"Reference","text":"<p>For a complete reference of the API offered by GEF, visit <code>docs/api/gef.md</code>.</p>"},{"location":"api/#parsing-command-arguments","title":"Parsing command arguments","text":"<pre><code>@parse_arguments( {\"required_argument_1\": DefaultValue1, ...}, {\"--optional-argument-1\": DefaultValue1, ...} )\n</code></pre> <p>This decorator aims to facilitate the argument passing to a command. If added, it will use the <code>argparse</code> module to parse arguments, and will store them in the <code>kwargs[\"arguments\"]</code> of the calling function (therefore the function must have <code>*args, **kwargs</code> added to its signature). Argument type is inferred directly from the default value except for boolean, where a value of <code>True</code> corresponds to <code>argparse</code>'s <code>store_true</code> action. For more details on <code>argparse</code>, refer to its Python documentation.</p> <p>Values given for the parameters also allow list of arguments being past. This can be useful in the case where the number of exact option values is known in advance. This can be achieved simply by using a type of <code>tuple</code> or <code>list</code> for the default value. <code>parse_arguments</code> will determine the type of what to expect based on the first default value of the iterable, so make sure it's not empty. For instance:</p> <pre><code>@parse_arguments( {\"instructions\": [\"nop\", \"int3\", \"hlt\"], }, {\"--arch\": \"x64\", } )\n</code></pre> <p>Argument flags are also supported, allowing to write simpler version of the flag such as</p> <pre><code>@parse_arguments( {}, {(\"--long-argument\", \"-l\"): value, } )\n</code></pre> <p>A basic example would be as follow:</p> <pre><code>class MyCommand(GenericCommand):\n    [...]\n\n    @parse_arguments({\"foo\": [1,]}, {\"--bleh\": \"\", (\"--blah\", \"-l): False})\n    def do_invoke(self, argv, *args, **kwargs):\n      args = kwargs[\"arguments\"]\n      if args.foo == 1: ...\n      if args.blah == True: ...\n</code></pre> <p>When the user enters the following command:</p> <pre><code>gef\u27a4 mycommand --blah 3 14 159 2653\n</code></pre> <p>The function <code>MyCommand!do_invoke()</code> can use the command line argument value</p> <pre><code>args.foo == [3, 14, 159, 2653] # a List(int) from user input\nargs.bleh == \"\" # the default value\nargs.blah == True # set to True because user input declared the option (would have been False otherwise)\n</code></pre>"},{"location":"api/#adding-new-architectures","title":"Adding new architectures","text":"<p>Support for new architectures can be added by inheriting from the <code>Architecture</code> class. Examples can be found in gef-extras.</p> <p>Sometimes architectures can more precisely determine whether they apply to the current target by looking at the architecture determined by gdb. For these cases the custom architecture may implement the <code>supports_gdb_arch()</code> static function to signal that they should be used instead of the default. The function receives only one argument:</p> <ul> <li><code>gdb_str</code> (of type <code>str</code>) which is the architecture name as reported by GDB.</li> </ul> <p>The function must return:</p> <ul> <li><code>True</code> if the current <code>Architecture</code> class supports the target binary; <code>False</code> otherwise.</li> <li><code>None</code> to simply ignore this check and let GEF try to determine the architecture.</li> </ul> <p>One example is the ARM Cortex-M architecture which in some cases should be used over the generic ARM one:</p> <pre><code>@staticmethod\ndef supports_gdb_arch(gdb_arch: str) -&gt; Optional[bool]:\n    return bool(re.search(\"^armv.*-m$\", gdb_arch))\n</code></pre>"},{"location":"compat/","title":"Compatibility","text":""},{"location":"compat/#gef-compatibility","title":"GEF Compatibility","text":"<p>This matrix indicates the version of Python and/or GDB</p> GEF version GDB Python compatibility Python compatibility 2018.02 7.2 Python 2.7, Python 3.4+ 2020.03 7.4 Python 2.7, Python 3.4+ 2022.01 8.0 Python 3.6+ 2024.09 10.0 Python 3.10+"},{"location":"config/","title":"Configuration","text":""},{"location":"config/#configuring-gef","title":"Configuring GEF","text":"<p>GEF comes with its own configuration and customization system, allowing fine tweaking. The configuration file is located under <code>~/.gef.rc</code> by default, and is automatically loaded when GEF is loaded by GDB. If not configuration file is found, GEF will simply use the default settings.</p> <p>The configuration file is a Python <code>configparser</code>. To create a basic file with all settings and their default values, simply run</p> <pre><code>gdb -ex 'gef save' -ex quit\n</code></pre> <p>You can now explore the configuration file under <code>~/.gef.rc</code>.</p> <p>Once in GEF, the configuration settings can be set/unset/modified by the command <code>gef config</code>. Without argument the command will simply dump all known settings:</p> <p></p> <p>To update, follow the syntax</p> <pre><code>gef\u27a4  gef config &lt;Module&gt;.&lt;ModuleSetting&gt;  &lt;Value&gt;\n</code></pre> <p>Any setting updated this way will be specific to the current GDB session. To make permanent, use the following command</p> <pre><code>gef\u27a4  gef save\n</code></pre> <p>Refer to the <code>gef config</code> command documentation for complete explanation.</p>"},{"location":"debugging/","title":"Debugging","text":""},{"location":"debugging/#debugging","title":"Debugging","text":"<p>Debugging GEF has a trick, let's see some examples</p>"},{"location":"debugging/#debugging-with-pdb","title":"Debugging with pdb","text":"<p>Open gef.py</p> <p>Search for class NopCommand(GenericCommand), go to do_invoke method and insert:</p> <pre><code>import pdb; pdb.set_trace()\n</code></pre> <p>Open a gdb session -&gt; start -&gt; nop</p> <p>Done!</p> <pre><code>gef\u27a4  nop\n&gt; /home/dreg/.gef-7c170cf6be3d84b2672a22e43b9128a23fe53c3b.py(6075)do_invoke()\n-&gt; args : argparse.Namespace = kwargs[\"arguments\"]\n(Pdb) ll\n6070        @only_if_gdb_running\n6071        @parse_arguments({\"address\": \"$pc\"}, {\"--i\": 1, \"--b\": True, \"--f\": True, \"--n\": True})\n6072        def do_invoke(self, _: List[str], **kwargs: Any) -&gt; None:\n6073            import pdb; pdb.set_trace()\n6074\n6075 -&gt;         args : argparse.Namespace = kwargs[\"arguments\"]\n6076            address = parse_address(args.address)\n</code></pre> <p>Learn more about pdb</p>"},{"location":"debugging/#debugging-with-pycharm","title":"Debugging with PyCharm","text":"<p>Install pycharm</p> <p>Create a new project:</p> <p></p> <p></p> <p>Go to menu -&gt; Run -&gt; Edit configurations...:</p> <p></p> <p>Create a Python Debug Server:</p> <p></p> <p></p> <p>Debug your new Unnamed:</p> <p></p> <p></p> <p>Copy the info from output Window to gef.py:</p> <p></p> <p>First, add to gef.py:</p> <pre><code>import pydevd_pycharm\n</code></pre> <p>Second, search for class NopCommand(GenericCommand), go to do_invoke method and insert:</p> <pre><code>pydevd_pycharm.settrace('localhost', port=35747, stdoutToServer=True, stderrToServer=True)\n</code></pre> <p>Open a gdb session -&gt; start -&gt; nop</p> <p>Done!</p> <p></p>"},{"location":"debugging/#debugging-with-vscode","title":"Debugging with VSCode","text":"<p>The approach to debug GEF with VSCode is relatively similar to that of PyCharm. Make sure to install the Python extension for VSCode. This will install <code>debugpy</code>, a remote debugger that you can connect to from VSCode and debug anything in GEF from your session (breakpoints, watchpoints, etc.). Debugging a Python app from VSCode is extensively  covered in the official docs to refer to  them if you're not sure how it works.</p> <p>To start a debugging session in GEF, manually run the following Python commands</p> <pre><code>gef&gt; pi import debugpy; debugpy.listen(5678); pi debugpy.wait_for_client()\n</code></pre> <p>Alternatively a convenience script named <code>vscode_debug.py</code> can also be found in the <code>scripts</code> folder, which you can invoke easily simply using the GDB <code>source</code> command:</p> <pre><code>gef&gt; source /path/to/gef/scripts/vscode_debug.py\n</code></pre> <p>GEF will be suspended, waiting for a client to connect to the debugger to resume the execution. Then from your VSCode, edit or create <code>/path/to/gef/.vscode/launch.json</code>, and add a debug configuration to attach to GEF, by specifying the IP address and port (on <code>localhost</code> in the example below, but the remote server can be anywhere):</p> <pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python: Attach to GEF\",\n            \"type\": \"python\",\n            \"request\": \"attach\",\n            \"connect\": {\n                \"host\": \"localhost\",\n                \"port\": 5678\n            }\n        }\n    ]\n}\n</code></pre> <p>Everything is ready to attach to GEF. By default, you can simply hit F5 on VSCode (Start Debugging)</p> <p></p>"},{"location":"deprecated/","title":"Deprecated","text":""},{"location":"deprecated/#deprecated-commands","title":"Deprecated commands","text":"<p>GEF is in itself a large file, but to avoid it to be out of control some commands once part of GEF were either moved to GEF-Extras or even simply removed. This page aims to track those changes.</p> Command Status Since Link (if Applicable) Notes <code>cs-disassemble</code> Moved 2022.06 Link Depends on <code>capstone</code> <code>assemble</code> Moved 2022.06 Link Depends on <code>keystone</code> <code>emulate</code> Moved 2022.06 Link Depends on <code>unicorn</code> and <code>capstone</code> <code>set-permission</code> Moved 2022.06 Link Depends on <code>keystone</code> <code>ropper</code> Moved 2022.06 Link Depends on <code>ropper</code> <code>ida-interact</code> Moved 2022.06 Link Depends on <code>rpyc</code> <code>exploit-template</code> Moved c402900 Link <code>windbg</code> Moved a933a5a Link <code>is-syscall</code> Moved 3f79fb38 Link <code>syscall-args</code> Moved 3f79fb38 Link"},{"location":"deprecated/#removed-support-for-pyenv","title":"Removed support for pyenv","text":"<p>Support for pyenv has been removed after <code>2024.05</code>, for more information see #1078 and #1062.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"faq/#why-use-gef-over-peda","title":"Why use GEF over PEDA?","text":"<p>PEDA is a fantastic tool that provides similar commands to make the exploitation development process smoother.</p> <p>However, PEDA suffers from a major drawbacks, which the code is too fundamentally linked to Intel architectures (x86-32 and x86-64). On the other hand, GEF not only supports all the architecture supported by GDB (currently x86, ARM, AARCH64, MIPS, PowerPC, SPARC) but is designed to integrate new architectures very easily as well!</p> <p>Also, PEDA development has been quite idle for a few years now, and many new interesting features a debugger can provide simply do not exist.</p>"},{"location":"faq/#what-if-my-gdb-is-100","title":"What if my GDB is &lt; 10.0 ?","text":"<p>GDB was introduced with its Python support early 2011 with the release of GDB 7. A (very) long way has gone since and the Python API has been massively improved, and GEF is taking advantage of them to provide the coolest features with as little performance impact as possible.</p> <p>Currently, GEF is optimized for running against GDB version 10.0+, and Python 3.10+. This allows for the best performance and use of the GDB Python API. However, GEF can run on older versions too, check out the version compatibility matrix. For really older versions of GDB, you can use <code>gef-legacy</code> which supports a lot of older GDB, and a Python 2/3 compatibility layer.</p> <p>Therefore, it is highly recommended to run GEF with the latest version of GDB. However, all functions should work on a GDB 10.0 and up. If not, send a bug report and provide as many details as possible.</p> <p>If you are running an obsolete version, GEF will show a error and message and exit.</p> <p>Some pre-compiled static binaries for both recent GDB and GDBServer can be downloaded from the <code>gdb-static</code> repository.</p>"},{"location":"faq/#i-cannot-get-gef-setup","title":"I cannot get GEF setup","text":"<p>GEF will work on any GDB 10+ compiled with Python 3.10+ support. You can view that commands that failed to load using <code>gef missing</code>, but this will not affect GEF generally.</p> <p>If you experience problems setting it up on your host, first go to the Discord channel for that. You will find great people there willing to help.</p> <p>Note that the GitHub issue section is to be used to report bugs and GEF issues (like unexpected crash, improper error handling, weird edge case, etc.), not a place to ask for help.</p> <p>All recent distributions ship packaged GDB that should be ready-to-go, with GDB &gt;= 10.0 and Python 3.10+. Any version higher or equal will work just fine. So you might actually only need to run <code>apt install gdb</code> to get the full-force of GEF.</p>"},{"location":"faq/#i-get-a-segfault-when-starting-gdb-with-gef","title":"I get a SegFault when starting GDB with GEF","text":"<p>A long standing bug in the <code>readline</code> library can make <code>gef</code> crash GDB when displaying certain characters (SOH/ETX). As a result, this would SIGSEGV GDB as <code>gef</code> is loading, a bit like this:</p> <pre><code>root@debian-aarch64:~# gdb -q ./test-bin-aarch64\nGEF ready, type `gef' to start, `gef config' to configure\n53 commands loaded, using Python engine 3.4\n[*] 5 commands could not be loaded, run `gef missing` to know why.\n[+] Configuration from '/root/.gef.rc' restored\nReading symbols from ./bof-aarch64...(no debugging symbols found)...done.\nSegmentation fault (core dumped)\n</code></pre> <p>If so, this can be fixed easily by setting the <code>gef.readline_compat</code> variable to <code>True</code> in the <code>~/.gef.rc</code> file. Something like this:</p> <pre><code>root@debian-aarch64:~# nano ~/.gef.rc\n[...]\n[gef]\nreadline_compat = True\n</code></pre> <p>You can now use all features of <code>gef</code> even on versions of GDB compiled against old <code>readline</code> library.</p>"},{"location":"faq/#does-gef-prevent-the-use-of-other-gdb-plugins","title":"Does GEF prevent the use of other GDB plugins?","text":"<p>Definitely not! You can use any other GDB plugin on top of it for an even better debugging experience.</p> <p>Some interesting plugins highly recommended too:</p> <ul> <li>!exploitable</li> <li>Voltron</li> </ul> <p> Src: @rick2600: terminator + gdb + gef + voltron cc: @snare @hugsy</p>"},{"location":"faq/#i-want-to-contribute-where-should-i-head-first","title":"I want to contribute, where should I head first?","text":"<p>I would suggest thoroughly reading this documentation, just having a look to the CONTRIBUTE file of the project to give you pointers.</p> <p>Also a good thing would be to join our Discord channel to get in touch with the people involved/using it.</p>"},{"location":"faq/#i-think-ive-found-a-bug-how-can-i-help-fixing-it","title":"I think I've found a bug, how can I help fixing it?","text":"<p><code>gef</code> is only getting better through people (like you!) using it, but most importantly reporting unexpected behavior.</p> <p>In most locations, Python exceptions will be properly intercepted. If not, <code>gef</code> wraps all commands with a generic exception handler, to disturb as little as possible your debugging session. If it happens, you'll only get to see a message like this: </p> <p>By switching to debug mode, <code>gef</code> will give much more information:</p> <pre><code>gef\u27a4  gef config gef.debug 1\n</code></pre> <p></p> <p>If you think fixing it is in your skills, then send a Pull Request with your patched version, explaining your bug, and what was your solution for it.</p> <p>Otherwise, you can open an issue, give a thorough description of your bug and copy/paste the content from above. This will greatly help for solving the issue.</p>"},{"location":"faq/#i-get-weird-issuescharacters-using-gdb-python3-whats-up","title":"I get weird issues/characters using GDB + Python3, what's up?","text":"<p>Chances are you are not using UTF-8. Python3 is highly relying on UTF-8 to display correctly characters of any alphabet and also some cool emojis. When GDB is compiled with Python3, GEF will assume that your current charset is UTF-8 (for instance, <code>en_US.UTF-8</code>). Use your <code>$LANG</code> environment variable to tweak this setting.</p> <p>In addition, some unexpected results were observed when your local is not set to English. If you aren't sure, simply run <code>gdb</code> like this:</p> <pre><code>LC_ALL=en_US.UTF-8 gdb /path/to/your/binary\n</code></pre>"},{"location":"faq/#gdb-crashes-on-arm-memory-corruption-with-gdb_exception_return_mask_error","title":"GDB crashes on ARM memory corruption with <code>gdb_exception_RETURN_MASK_ERROR</code>","text":"<p>This issue is NOT GEF related, but GDB's, or more precisely some versions of GDB packaged with Debian/Kali for ARM</p> <p>Original Issue and Mitigation</p> <p>gdb version 7.12, as distributed w/ Raspbian/Kali rolling (only distro's tested,) throws an exception while disassembling ARM binaries when using gef. This is not a gef problem, this is a gdb problem. gef is just the tool that revealed the gdb dain bramage! (The issue was not observed using vanilla gdb/peda/pwndbg) This issue was first noted when using si to step through a simple ARM assembly program (noted above) when instead of exiting cleanly, gdb's disassembly failed with a SIGABRT and threw an exception:</p> <p><code>gdb_exception_RETURN_MASK_ERROR</code></p> <p>This turns out to be a known problem (regression) with gdb, and affects gef users running the ARM platform (Raspberry Pi).</p> <p>The mitigation is for ARM users to compile gdb from source and run the latest version, 8.1 as of this writing. </p> <p>Do not file an issue, again it is NOT a bug from GEF, or neither from GDB Python API. Therefore, there is nothing GEF's developers can do about that. The correct solution as mentioned above is to recompile your GDB with a newer (better) version.</p> <p>The whole topic was already internally discussed, so please refer to the issue 206 for the whole story.</p>"},{"location":"faq/#i-still-dont-have-my-answer-where-can-i-go","title":"I still don't have my answer... Where can I go?","text":"<p>Discord is your answer: join and talk to us by clicking here</p> <p></p> <p>If you cannot find the answer to your problem here or on the Discord, then go to the project Issues page and fill up the forms with as much information as you can!</p>"},{"location":"faq/#how-can-i-use-gef-to-debug-a-process-in-a-container","title":"How can I use GEF to debug a process in a container?","text":"<p>GEF can attach to a process running in a container using <code>gdb --pid=$PID</code>, where <code>$PID</code> is the ID of the running process on the host. To find this, you can use <code>docker top &lt;container ID&gt; -o pid | awk '!/PID/' | xargs -I'{}' pstree -psa {}</code> to view the process tree for the container.</p> <p><code>sudo</code> may be required to attach to the process, which will depend on your system's security settings.</p> <p>Please note that cross-container debugging may have unexpected issues. Installing gdb and GEF inside the container, or using the official GEF docker image may improve results.</p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#installing-gef","title":"Installing GEF","text":""},{"location":"install/#prerequisites","title":"Prerequisites","text":"<p>Specific GEF commands rely on commonly used Unix commands to extract additional information. Therefore it requires the following binaries to be present:</p> <ul> <li><code>file</code></li> <li><code>readelf</code></li> <li><code>nm</code></li> <li><code>ps</code></li> <li><code>python3</code></li> </ul> <p>Those tools are included by default in many modern distributions. If they're missing, you can use your OS package manager to install them.</p>"},{"location":"install/#gdb","title":"GDB","text":"<p>Only GDB 10.0 and higher is required. It must be compiled with Python 3.10 or higher support. For most people, simply using your distribution package manager should be enough.</p> <p>As of January 2020, GEF officially doesn't support Python 2 any longer, due to Python 2 becoming officially deprecated.</p> <p>GEF will then only work for Python 3. If you absolutely require GDB + Python 2, please use GEF-Legacy instead. Note that <code>gef-legacy</code> won't provide new features, and only functional bugs will be handled.</p> <p>You can verify it with the following command:</p> <pre><code>gdb -nx -ex 'pi print(sys.version)' -ex quit\n</code></pre> <p>This should display your version of Python compiled with <code>gdb</code>.</p> <pre><code>$ gdb -nx -ex 'pi print(sys.version)' -ex quit\n3.12.3 (main, Jul 31 2024, 17:43:48) [GCC 13.2.0]\n</code></pre>"},{"location":"install/#python-dependencies","title":"Python dependencies","text":"<p>There are none: <code>GEF</code> works out of the box!</p> <p>GEF itself provides most (if not all \ud83e\udd2f) features required for typical sessions. However, GEF can be easily extended via</p> <ul> <li>community-built scripts, functions and architectures in the repo    <code>gef-extras</code> (see below)</li> <li>your own script which can leverage the GEF API for the heavy lifting</li> </ul>"},{"location":"install/#standalone","title":"Standalone","text":""},{"location":"install/#quick-install","title":"Quick install","text":"<p>The quickest way to get started with GEF is through the installation script available. Simply make sure you have GDB 10.0 or higher, compiled with Python 3.10 or higher, and run</p> <pre><code>bash -c \"$(curl -fsSL https://gef.blah.cat/sh)\"\n</code></pre> <p>Or if you prefer <code>wget</code></p> <pre><code>bash -c \"$(wget https://gef.blah.cat/sh -O -)\"\n</code></pre> <p>Alternatively from inside <code>gdb</code> directly:</p> <pre><code>$ gdb -q\n(gdb) pi import urllib.request as u, tempfile as t; g=t.NamedTemporaryFile(suffix='-gef.py'); open(g.name, 'wb+').write(u.urlopen('https://tinyurl.com/gef-main').read()); gdb.execute('source %s' % g.name)\n</code></pre> <p>That's it! GEF is installed and correctly set up. You can confirm it by checking the <code>~/.gdbinit</code> file and see a line that sources (i.e. loads) GEF.</p> <pre><code>$ cat ~/.gdbinit\nsource ~/.gdbinit-gef.py\n</code></pre>"},{"location":"install/#update","title":"Update","text":"<p>If your host/VM is connected to the Internet, you can update <code>gef</code> easily to the latest version (even without <code>git</code> installed). with <code>python /path/to/gef.py --update</code></p> <pre><code>$ python ~/.gdbinit-gef.py --update\nUpdated\n</code></pre> <p>This will deploy the latest version of <code>gef</code>'s main branch from Github. If no updates are available, <code>gef</code> will respond <code>No update</code> instead.</p>"},{"location":"install/#using-git","title":"Using git","text":"<p>To contribute to GEF, you might prefer using git directly.</p> <pre><code>git clone https://github.com/hugsy/gef.git\necho source `pwd`/gef/gef.py &gt;&gt; ~/.gdbinit\n</code></pre>"},{"location":"install/#community-repository-gef-extras","title":"Community repository: GEF-Extras","text":"<p>GEF was built to also provide a solid base for external scripts. The repository <code>gef-extras</code> is an open repository where anyone can freely submit their own commands to extend GDB via GEF's API.</p> <p>To benefit from it:</p> <pre><code># using the automated way\n## via the install script\n$ bash -c \"$(wget https://github.com/hugsy/gef/raw/main/scripts/gef-extras.sh -O -)\"\n\n# or manually\n## clone the repo\n$ git clone --branch main https://github.com/hugsy/gef-extras.git\n\n## then specify gef to load this directory\n$ gdb -ex 'gef config gef.extra_plugins_dir \"/path/to/gef-extras/scripts\"' -ex 'gef save' -ex quit\n[+] Configuration saved\n</code></pre> <p>You can also use the structures defined from this repository:</p> <pre><code>$ gdb -ex 'gef config pcustom.struct_path \"/path/to/gef-extras/structs\"' -ex 'gef save' -ex quit\n[+] Configuration saved\n</code></pre> <p>There, you're now fully equipped epic pwnage with all GEF's goodness!!</p>"},{"location":"install/#uninstalling-gef","title":"Uninstalling GEF","text":""},{"location":"install/#prevent-script-loading","title":"Prevent script loading","text":"<p>GDB provides the <code>-nx</code> command line flag to disable the commands from the <code>~/.gdbinit</code> to be executed.</p> <pre><code>gdb -nx\n</code></pre>"},{"location":"install/#disable-gef","title":"Disable GEF","text":"<p>To disable GEF without removing it, go to editing <code>~/.gdbinit</code>, spot the line that sources GEF, and comment / delete that line:</p> <p>So:</p> <pre><code>$ cat ~/.gdbinit\nsource /my/path/to/gef.py\n</code></pre> <p>Will become:</p> <pre><code>$ cat ~/.gdbinit\n# source /my/path/to/gef.py\n</code></pre> <p>Restart GDB, GEF is gone. Note that you can also load GEF at any moment during your GDB session as such:</p> <pre><code>$ gdb\n(gdb) source /my/path/to/gef.py\n</code></pre>"},{"location":"install/#remove-gef","title":"Remove GEF","text":"<p>GEF is a one-file GDB script. Therefore, to remove GEF simply spot the location it was installed (for example, by using <code>~/.gdbinit</code>) and delete the file. If a configuration file was created, it will be located as <code>~/.gef.rc</code> and can also be deleted:</p> <pre><code>$ cat ~/.gdbinit\n# source /my/path/to/gef.py\n$ rm /my/path/to/gef.py ~/.gef.rc\n</code></pre> <p>GEF is totally removed from your system.</p>"},{"location":"screenshots/","title":"Showroom","text":""},{"location":"screenshots/#screenshots","title":"Screenshots","text":"<p>This page illustrates a few of the possibilities available to you when using <code>GEF</code>.</p>"},{"location":"screenshots/#multi-architecture-support","title":"Multi-architecture support","text":"<p><code>GEF</code> was designed to support any architecture supported by GDB via an easily extensible architecture API.</p> <p>Currently <code>GEF</code> supports the following architectures:</p> <ul> <li>Intel x86 (32b &amp; 64b)</li> <li>ARM (v6/v7)</li> <li>AARCH64</li> <li>MIPS/MIPS64</li> <li>PowerPC</li> <li>SPARC/SPARCv9</li> </ul>"},{"location":"screenshots/#features","title":"Features","text":""},{"location":"screenshots/#embedded-hexdump-view","title":"Embedded hexdump view","text":"<p>To this day, GDB doesn't come with a hexdump-like view. Well <code>GEF</code> fixes that for you via the <code>hexdump</code> command:</p> <p></p>"},{"location":"screenshots/#dereferencing-data-or-registers","title":"Dereferencing data or registers","text":"<p>No more endless manual pointer dereferencing <code>x/x</code> style. Just use <code>dereference</code> for that. Or for a comprehensive view of the registers, <code>registers</code> might become your best friend:</p> <p></p>"},{"location":"screenshots/#heap-analysis","title":"Heap analysis","text":""},{"location":"screenshots/#detailed-view-of-glibc-chunks","title":"Detailed view of Glibc Chunks","text":""},{"location":"screenshots/#automatic-detection-of-uaf-during-runtime","title":"Automatic detection of UaF during runtime","text":""},{"location":"screenshots/#display-elf-information","title":"Display ELF information","text":""},{"location":"screenshots/#elf-structure","title":"ELF structure","text":""},{"location":"screenshots/#security-settings","title":"Security settings","text":""},{"location":"screenshots/#automatic-vulnerable-string-detection","title":"Automatic vulnerable string detection","text":""},{"location":"screenshots/#code-emulation-with-unicorn-engine-x86-64","title":"Code emulation with Unicorn-Engine (x86-64)","text":""},{"location":"screenshots/#comprehensive-address-space-layout-display","title":"Comprehensive address space layout display","text":""},{"location":"screenshots/#defining-arbitrary-custom-structures","title":"Defining arbitrary custom structures","text":""},{"location":"screenshots/#highlight-custom-strings","title":"Highlight custom strings","text":""},{"location":"testing/","title":"Testing","text":""},{"location":"testing/#testing-gef","title":"Testing GEF","text":"<p>This page describes how GEF testing is done. Any new command/functionality must receive adequate testing to be merged. Also PR failing CI (test + linting) won't be merged either.</p>"},{"location":"testing/#prerequisites","title":"Prerequisites","text":"<p>All the prerequisite packages are in <code>requirements.txt</code> file at the root of the project. So running</p> <pre><code>python -m pip install -r tests/requirements.txt --user -U\n</code></pre> <p>is enough to get started.</p>"},{"location":"testing/#running-tests","title":"Running tests","text":""},{"location":"testing/#basic-pytest","title":"Basic <code>pytest</code>","text":"<p>For testing GEF on the architecture on the host running the tests (most cases), simply run</p> <pre><code>cd /root/of/gef\npython3 -m pytest -v -k \"not benchmark\" tests\n</code></pre> <p>Note that to ensure compatibility, tests must be executed with the same Python version GDB was compiled against. To obtain this version, you can execute the following command:</p> <pre><code>gdb -q -nx -ex \"pi print('.'.join(map(str, sys.version_info[:2])))\" -ex quit\n</code></pre> <p>At the end, a summary of explanation will be shown, clearly indicating the tests that have failed, for instance:</p> <pre><code>=================================== short test summary info ==================================\nFAILED tests/commands/heap.py::HeapCommand::test_cmd_heap_bins_large - AssertionError: 'siz...\nFAILED tests/commands/heap.py::HeapCommand::test_cmd_heap_bins_small - AssertionError: 'siz...\nFAILED tests/commands/heap.py::HeapCommand::test_cmd_heap_bins_unsorted - AssertionError: '...\n======================== 3 failed, 4 passed, 113 deselected in 385.77s (0:06:25)==============\n</code></pre> <p>You can then use <code>pytest</code> directly to help you fix each error specifically.</p>"},{"location":"testing/#using-pytest","title":"Using <code>pytest</code>","text":"<p>GEF entirely relies on <code>pytest</code> for its testing. Refer to the project documentation for details.</p> <p>Adding new code requires extensive testing. Tests can be added in their own module in the <code>tests/</code> folder. For example, if adding a new command to <code>gef</code>, a new test module should be created and located in <code>/root/of/gef/tests/commands/my_new_command.py</code>. The test class must inherit <code>tests.base.RemoteGefUnitTestGeneric</code>. This class allows one to manipulate gdb and gef through rpyc under their respective <code>self._gdb</code> and <code>self._gef</code> attributes.</p> <p>A skeleton of a test module would look something like:</p> <pre><code>\"\"\"\n`my-command` command test module\n\"\"\"\n\n\nfrom tests.utils import RemoteGefUnitTestGeneric\n\n\nclass MyCommandCommand(RemoteGefUnitTestGeneric):\n    \"\"\"`my-command` command test module\"\"\"\n\n    def setUp(self) -&gt; None:\n        # By default, tests will be executed against the default.out binary\n        # You can change this behavior in the `setUp` function\n        self._target = debug_target(\"my-custom-binary-for-tests\")\n        return super().setUp()\n\n    def test_cmd_my_command(self):\n        # some convenience variables\n        root, gdb, gef = self._conn.root, self._gdb, self._gef\n\n        # You can then interact with any command from gdb or any class/function/variable from gef\n        # For instance:\n\n        # * tests that  `my-command` is expected to fail if the session is not active\n        output = gdb.execute(\"my-command\", to_string=True)\n        assert output == ERROR_INACTIVE_SESSION_MESSAGE\n\n        # * `my-command` must print \"Hello World\" message when executed in running context\n        gdb.execute(\"start\")\n        output = gdb.execute(\"my-command\", to_string=True)\n        assert \"Hello World\" == output\n</code></pre> <p>You might want to refer to the following documentations:</p> <ul> <li><code>pytest</code></li> <li><code>gdb Python API</code></li> <li>(maybe) <code>rpyc</code></li> </ul> <p>When running your test, you can summon <code>pytest</code> with the <code>--pdb</code> flag to enter the python testing environment to help you get more information about the reason of failure.</p> <p>One of the most convenient ways to test <code>gef</code> properly is using the <code>pytest</code> integration of modern editors such as VisualStudio Code or PyCharm. Without proper tests, new code will not be integrated.</p> <p>Also note that GEF can be remotely controlled using the script <code>scripts/remote_debug.py</code> as such:</p> <pre><code>$ gdb -q -nx\n(gdb) source /path/to/gef/gef.py\n[...]\ngef\u27a4  source /path/to/gef/scripts/remote_debug.py\ngef\u27a4  pi start_rpyc_service(4444)\n</code></pre> <p>Here RPyC will be started on the local host, and bound to the TCP port 4444. We can now connect using a regular Python REPL:</p> <pre><code>&gt;&gt;&gt; import rpyc\n&gt;&gt;&gt; c = rpyc.connect(\"localhost\", 4444)\n&gt;&gt;&gt; gdb = c.root.gdb\n&gt;&gt;&gt; gef = c.root.gef\n# We can now fully control the remote GDB\n&gt;&gt;&gt; gdb.execute(\"file /bin/ls\")\n&gt;&gt;&gt; gdb.execute(\"start\")\n&gt;&gt;&gt; print(hex(gef.arch.pc))\n0x55555555aab0\n&gt;&gt;&gt; print(hex(gef.arch.sp))\n0x7fffffffdcf0\n</code></pre>"},{"location":"testing/#linting-gef","title":"Linting GEF","text":"<p>You can use the Makefile at the root of the project to get the proper linting settings. For most cases, the following command is enough:</p> <pre><code>cd /root/of/gef\npython3 -m pylint --rcfile .pylintrc\n</code></pre> <p>Note that to ensure compatibility, tests must be executed with the same Python version GDB was compiled against. To obtain this version, you can execute the following command:</p> <pre><code>gdb -q -nx -ex \"pi print('.'.join(map(str, sys.version_info[:2])))\" -ex quit\n</code></pre>"},{"location":"testing/#code-quality","title":"Code quality","text":"<p>To ensure a consistent code quality and make it easy for both contributors and developers, GEF and GEF-Extras both rely on <code>pre-commit</code>. The <code>pre-commit</code> tool is a framework used to manage and maintain multi-language pre-commit hooks. These hooks are scripts that run automatically before each commit to identify issues in code, such as missing semicolons, trailing whitespace, and debug statements. This helps in ensuring code quality and consistency before submission to code review, and therefore is triggered automatically when submitting a Pull Request to GEF. This check is treated equally with the unit tests and therefore failing to pass will result in your PR not being merged.</p> <p><code>pre-commit</code> is part of the dev package requirements</p> <pre><code>cd /root/to/gef/repo\npython -m pip install --user -r tests/requirements.txt\n</code></pre> <p>But if you need to install separately it can be done using</p> <pre><code>python -m pip install pre-commit\n</code></pre> <p>And to enable it</p> <pre><code>pre-commit install\n</code></pre> <p>By default, <code>pre-commit</code> will use git hook to run the validation checks after each commit but you can modify this behavior as desired or even run it manually</p> <pre><code>pre-commit run --all-files\n</code></pre> <p>By default, <code>pre-commit</code> will report and attempt to fix the code to match what the coding style defined with GEF.</p>"},{"location":"testing/#benchmarking-gef","title":"Benchmarking GEF","text":"<p>Benchmarking relies on <code>pytest-benchmark</code> and is experimental for now.</p> <p>You can run all benchmark test cases as such:</p> <pre><code>cd /root/of/gef\npytest -k benchmark\n</code></pre> <p>which will return (after some time) an execution summary</p> <pre><code>tests/perf/benchmark.py ..                                                               [100%]\n\n\n---------------------------------------- benchmark: 3 tests -----------------------------------\nName (time in ms)          Min                 Max                Mean            StdDev              Median                IQR            Outliers     OPS            Rounds  Iterations\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntime_baseline         612.2325 (1.0)      630.3416 (1.01)     623.7984 (1.01)     7.2848 (1.64)     626.1485 (1.01)      9.9971 (1.81)          1;0  1.6031 (0.99)          5           1\ntime_cmd_context      613.8124 (1.00)     625.8964 (1.0)      620.1908 (1.0)      4.4532 (1.0)      619.8831 (1.0)       5.5109 (1.0)           2;0  1.6124 (1.0)           5           1\ntime_elf_parsing      616.5053 (1.01)     638.6965 (1.02)     628.1588 (1.01)     8.2465 (1.85)     629.0099 (1.01)     10.7885 (1.96)          2;0  1.5920 (0.99)          5           1\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nLegend:\n  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.\n  OPS: Operations Per Second, computed as 1 / Mean\n============================================== 3 passed, 117 deselected in 14.78s =============================================\n</code></pre>"},{"location":"api/gef/","title":"API","text":""},{"location":"api/gef/#module-gef","title":"module <code>GEF</code>","text":""},{"location":"api/gef/#global-variables","title":"Global Variables","text":"<ul> <li>GEF_DEFAULT_BRANCH</li> <li>GEF_EXTRAS_DEFAULT_BRANCH</li> <li>GDB_MIN_VERSION</li> <li>PYTHON_MIN_VERSION</li> <li>PYTHON_VERSION</li> <li>GDB_VERSION</li> <li>DEFAULT_PAGE_ALIGN_SHIFT</li> <li>DEFAULT_PAGE_SIZE</li> <li>GEF_MAX_STRING_LENGTH</li> <li>LIBC_HEAP_MAIN_ARENA_DEFAULT_NAME</li> <li>ANSI_SPLIT_RE</li> <li>LEFT_ARROW</li> <li>RIGHT_ARROW</li> <li>DOWN_ARROW</li> <li>HORIZONTAL_LINE</li> <li>VERTICAL_LINE</li> <li>CROSS</li> <li>TICK</li> <li>BP_GLYPH</li> <li>GEF_PROMPT</li> <li>GEF_PROMPT_ON</li> <li>GEF_PROMPT_OFF</li> <li>gdb_initial_settings</li> <li>cmd</li> <li>default_dbgsym_path</li> <li>param_name</li> <li>dbgsym_paths</li> <li>gef</li> <li>progspace</li> <li>disable_tr_overwrite_setting</li> <li>warnmsg</li> <li>hook</li> </ul>"},{"location":"api/gef/#function-http_get","title":"function <code>http_get</code>","text":"<pre><code>http_get(url: str) \u2192 bytes | None\n</code></pre> <p>Basic HTTP wrapper for GET request. Return the body of the page if HTTP code is OK, otherwise return None. </p> <p></p>"},{"location":"api/gef/#function-update_gef","title":"function <code>update_gef</code>","text":"<pre><code>update_gef(argv: list[str]) \u2192 int\n</code></pre> <p>Obsolete. Use <code>gef.sh</code>. </p> <p></p>"},{"location":"api/gef/#function-reset_all_caches","title":"function <code>reset_all_caches</code>","text":"<pre><code>reset_all_caches() \u2192 None\n</code></pre> <p>Free all caches. If an object is cached, it will have a callable attribute <code>cache_clear</code> which will be invoked to purge the function cache. </p> <p></p>"},{"location":"api/gef/#function-reset","title":"function <code>reset</code>","text":"<pre><code>reset() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlight_text","title":"function <code>highlight_text</code>","text":"<pre><code>highlight_text(text: str) \u2192 str\n</code></pre> <p>Highlight text using <code>gef.ui.highlight_table</code> { match -&gt; color } settings. </p> <p>If RegEx is enabled it will create a match group around all items in the <code>gef.ui.highlight_table</code> and wrap the specified color in the <code>gef.ui.highlight_table</code> around those matches. </p> <p>If RegEx is disabled, split by ANSI codes and 'colorify' each match found within the specified string. </p> <p></p>"},{"location":"api/gef/#function-gef_print","title":"function <code>gef_print</code>","text":"<pre><code>gef_print(*args: str, end='\\n', sep=' ', **kwargs: Any) \u2192 None\n</code></pre> <p>Wrapper around print(), using string buffering feature. </p> <p></p>"},{"location":"api/gef/#function-bufferize","title":"function <code>bufferize</code>","text":"<pre><code>bufferize(f: Callable) \u2192 Callable\n</code></pre> <p>Store the content to be printed for a function in memory, and flush it on function exit. </p> <p></p>"},{"location":"api/gef/#function-p8","title":"function <code>p8</code>","text":"<pre><code>p8(x: int, s: bool = False, e: 'Endianness | None' = None) \u2192 bytes\n</code></pre> <p>Pack one byte respecting the current architecture endianness. </p> <p></p>"},{"location":"api/gef/#function-p16","title":"function <code>p16</code>","text":"<pre><code>p16(x: int, s: bool = False, e: 'Endianness | None' = None) \u2192 bytes\n</code></pre> <p>Pack one word respecting the current architecture endianness. </p> <p></p>"},{"location":"api/gef/#function-p32","title":"function <code>p32</code>","text":"<pre><code>p32(x: int, s: bool = False, e: 'Endianness | None' = None) \u2192 bytes\n</code></pre> <p>Pack one dword respecting the current architecture endianness. </p> <p></p>"},{"location":"api/gef/#function-p64","title":"function <code>p64</code>","text":"<pre><code>p64(x: int, s: bool = False, e: 'Endianness | None' = None) \u2192 bytes\n</code></pre> <p>Pack one qword respecting the current architecture endianness. </p> <p></p>"},{"location":"api/gef/#function-u8","title":"function <code>u8</code>","text":"<pre><code>u8(x: bytes, s: bool = False, e: 'Endianness | None' = None) \u2192 int\n</code></pre> <p>Unpack one byte respecting the current architecture endianness. </p> <p></p>"},{"location":"api/gef/#function-u16","title":"function <code>u16</code>","text":"<pre><code>u16(x: bytes, s: bool = False, e: 'Endianness | None' = None) \u2192 int\n</code></pre> <p>Unpack one word respecting the current architecture endianness. </p> <p></p>"},{"location":"api/gef/#function-u32","title":"function <code>u32</code>","text":"<pre><code>u32(x: bytes, s: bool = False, e: 'Endianness | None' = None) \u2192 int\n</code></pre> <p>Unpack one dword respecting the current architecture endianness. </p> <p></p>"},{"location":"api/gef/#function-u64","title":"function <code>u64</code>","text":"<pre><code>u64(x: bytes, s: bool = False, e: 'Endianness | None' = None) \u2192 int\n</code></pre> <p>Unpack one qword respecting the current architecture endianness. </p> <p></p>"},{"location":"api/gef/#function-is_ascii_string","title":"function <code>is_ascii_string</code>","text":"<pre><code>is_ascii_string(address: int) \u2192 bool\n</code></pre> <p>Helper function to determine if the buffer pointed by <code>address</code> is an ASCII string (in GDB) </p> <p></p>"},{"location":"api/gef/#function-is_alive","title":"function <code>is_alive</code>","text":"<pre><code>is_alive() \u2192 bool\n</code></pre> <p>Check if GDB is running. </p> <p></p>"},{"location":"api/gef/#function-calling_function","title":"function <code>calling_function</code>","text":"<pre><code>calling_function() \u2192 str | None\n</code></pre> <p>Return the name of the calling function </p> <p></p>"},{"location":"api/gef/#function-only_if_gdb_running","title":"function <code>only_if_gdb_running</code>","text":"<pre><code>only_if_gdb_running(f: Callable) \u2192 Callable\n</code></pre> <p>Decorator wrapper to check if GDB is running. </p> <p></p>"},{"location":"api/gef/#function-only_if_gdb_target_local","title":"function <code>only_if_gdb_target_local</code>","text":"<pre><code>only_if_gdb_target_local(f: Callable) \u2192 Callable\n</code></pre> <p>Decorator wrapper to check if GDB is running locally (target not remote). </p> <p></p>"},{"location":"api/gef/#function-deprecated","title":"function <code>deprecated</code>","text":"<pre><code>deprecated(solution: str = '') \u2192 Callable\n</code></pre> <p>Decorator to add a warning when a command is obsolete and will be removed. </p> <p></p>"},{"location":"api/gef/#function-experimental_feature","title":"function <code>experimental_feature</code>","text":"<pre><code>experimental_feature(f: Callable) \u2192 Callable\n</code></pre> <p>Decorator to add a warning when a feature is experimental. </p> <p></p>"},{"location":"api/gef/#function-only_if_events_supported","title":"function <code>only_if_events_supported</code>","text":"<pre><code>only_if_events_supported(event_type: str) \u2192 Callable\n</code></pre> <p>Checks if GDB supports events without crashing. </p> <p></p>"},{"location":"api/gef/#function-wrapped_f","title":"function <code>wrapped_f</code>","text":"<pre><code>wrapped_f(*args: Any, **kwargs: Any) \u2192 Any\n</code></pre>"},{"location":"api/gef/#function-wrapped_f_1","title":"function <code>wrapped_f</code>","text":"<pre><code>wrapped_f(*args: Any, **kwargs: Any) \u2192 Any\n</code></pre>"},{"location":"api/gef/#function-wrapped_f_2","title":"function <code>wrapped_f</code>","text":"<pre><code>wrapped_f(*args: Any, **kwargs: Any) \u2192 Any\n</code></pre>"},{"location":"api/gef/#function-wrapped_f_3","title":"function <code>wrapped_f</code>","text":"<pre><code>wrapped_f(*args: Any, **kwargs: Any) \u2192 Any\n</code></pre>"},{"location":"api/gef/#function-wrapped_f_4","title":"function <code>wrapped_f</code>","text":"<pre><code>wrapped_f(*args: Any, **kwargs: Any) \u2192 Any\n</code></pre>"},{"location":"api/gef/#function-wrapped_f_5","title":"function <code>wrapped_f</code>","text":"<pre><code>wrapped_f(*args: Any, **kwargs: Any) \u2192 Any\n</code></pre>"},{"location":"api/gef/#function-wrapped_f_6","title":"function <code>wrapped_f</code>","text":"<pre><code>wrapped_f(*args: Any, **kwargs: Any) \u2192 Any\n</code></pre>"},{"location":"api/gef/#function-wrapped_f_7","title":"function <code>wrapped_f</code>","text":"<pre><code>wrapped_f(*args: Any, **kwargs: Any) \u2192 Any\n</code></pre>"},{"location":"api/gef/#function-wrapped_f_8","title":"function <code>wrapped_f</code>","text":"<pre><code>wrapped_f(*args: Any, **kwargs: Any) \u2192 Any\n</code></pre>"},{"location":"api/gef/#function-wrapped_f_9","title":"function <code>wrapped_f</code>","text":"<pre><code>wrapped_f(*args: Any, **kwargs: Any) \u2192 Any\n</code></pre>"},{"location":"api/gef/#function-wrapped_f_10","title":"function <code>wrapped_f</code>","text":"<pre><code>wrapped_f(*args: Any, **kwargs: Any) \u2192 Any\n</code></pre>"},{"location":"api/gef/#function-wrapped_f_11","title":"function <code>wrapped_f</code>","text":"<pre><code>wrapped_f(*args: Any, **kwargs: Any) \u2192 Any\n</code></pre>"},{"location":"api/gef/#function-wrapped_f_12","title":"function <code>wrapped_f</code>","text":"<pre><code>wrapped_f(*args: Any, **kwargs: Any) \u2192 Any\n</code></pre>"},{"location":"api/gef/#function-wrapped_f_13","title":"function <code>wrapped_f</code>","text":"<pre><code>wrapped_f(*args: Any, **kwargs: Any) \u2192 Any\n</code></pre>"},{"location":"api/gef/#function-fakeexit","title":"function <code>FakeExit</code>","text":"<pre><code>FakeExit(*args: Any, **kwargs: Any) \u2192 NoReturn\n</code></pre>"},{"location":"api/gef/#function-parse_arguments","title":"function <code>parse_arguments</code>","text":"<pre><code>parse_arguments(\n    required_arguments: dict[str | tuple[str, str], typing.Any],\n    optional_arguments: dict[str | tuple[str, str], typing.Any]\n) \u2192 Callable\n</code></pre> <p>Argument parsing decorator. </p> <p></p>"},{"location":"api/gef/#function-search_for_main_arena","title":"function <code>search_for_main_arena</code>","text":"<pre><code>search_for_main_arena() \u2192 int\n</code></pre> <p><code>search_for_main_arena</code> is DEPRECATED and will be removed in the future.  Use GefHeapManager.find_main_arena_addr() </p> <p></p>"},{"location":"api/gef/#function-get_libc_version","title":"function <code>get_libc_version</code>","text":"<pre><code>get_libc_version() \u2192 tuple[int, ...]\n</code></pre> <p><code>get_libc_version</code> is DEPRECATED and will be removed in the future.  Use GefLibcManager.find_libc_version() </p> <p></p>"},{"location":"api/gef/#function-titlify","title":"function <code>titlify</code>","text":"<pre><code>titlify(text: str, color: str | None = None, msg_color: str | None = None) \u2192 str\n</code></pre> <p>Print a centered title. </p> <p></p>"},{"location":"api/gef/#function-dbg","title":"function <code>dbg</code>","text":"<pre><code>dbg(msg: str) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-err","title":"function <code>err</code>","text":"<pre><code>err(msg: str) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-warn","title":"function <code>warn</code>","text":"<pre><code>warn(msg: str) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-ok","title":"function <code>ok</code>","text":"<pre><code>ok(msg: str) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-info","title":"function <code>info</code>","text":"<pre><code>info(msg: str) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-push_context_message","title":"function <code>push_context_message</code>","text":"<pre><code>push_context_message(level: str, message: str) \u2192 None\n</code></pre> <p>Push the message to be displayed the next time the context is invoked. </p> <p></p>"},{"location":"api/gef/#function-show_last_exception","title":"function <code>show_last_exception</code>","text":"<pre><code>show_last_exception() \u2192 None\n</code></pre> <p>Display the last Python exception. </p> <p></p>"},{"location":"api/gef/#function-gef_pystring","title":"function <code>gef_pystring</code>","text":"<pre><code>gef_pystring(x: bytes) \u2192 str\n</code></pre> <p>Returns a sanitized version as string of the bytes list given in input. </p> <p></p>"},{"location":"api/gef/#function-gef_pybytes","title":"function <code>gef_pybytes</code>","text":"<pre><code>gef_pybytes(x: str) \u2192 bytes\n</code></pre> <p>Returns an immutable bytes list from the string given as input. </p> <p></p>"},{"location":"api/gef/#function-style_byte","title":"function <code>style_byte</code>","text":"<pre><code>style_byte(b: int, color: bool = True) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-hexdump","title":"function <code>hexdump</code>","text":"<pre><code>hexdump(\n    source: ByteString,\n    length: int = 16,\n    separator: str = '.',\n    show_raw: bool = False,\n    show_symbol: bool = True,\n    base: int = 0\n) \u2192 str\n</code></pre> <p>Return the hexdump of <code>src</code> argument. @param source MUST be of type bytes or bytearray @param length is the length of items per line @param separator is the default character to use if one byte is not printable @param show_raw if True, do not add the line nor the text translation @param base is the start address of the block being hexdump @return a string with the hexdump </p> <p></p>"},{"location":"api/gef/#function-is_debug","title":"function <code>is_debug</code>","text":"<pre><code>is_debug() \u2192 bool\n</code></pre> <p>Check if debug mode is enabled. </p> <p></p>"},{"location":"api/gef/#function-buffer_output","title":"function <code>buffer_output</code>","text":"<pre><code>buffer_output() \u2192 bool\n</code></pre> <p>Check if output should be buffered until command completion. </p> <p></p>"},{"location":"api/gef/#function-hide_context","title":"function <code>hide_context</code>","text":"<pre><code>hide_context() \u2192 bool\n</code></pre> <p>Helper function to hide the context pane. </p> <p></p>"},{"location":"api/gef/#function-unhide_context","title":"function <code>unhide_context</code>","text":"<pre><code>unhide_context() \u2192 bool\n</code></pre> <p>Helper function to unhide the context pane. </p> <p></p>"},{"location":"api/gef/#function-enable_redirect_output","title":"function <code>enable_redirect_output</code>","text":"<pre><code>enable_redirect_output(to_file: str = '/dev/null') \u2192 None\n</code></pre> <p>Redirect all GDB output to <code>to_file</code> parameter. By default, <code>to_file</code> redirects to <code>/dev/null</code>. </p> <p></p>"},{"location":"api/gef/#function-disable_redirect_output","title":"function <code>disable_redirect_output</code>","text":"<pre><code>disable_redirect_output() \u2192 None\n</code></pre> <p>Disable the output redirection, if any. </p> <p></p>"},{"location":"api/gef/#function-gef_makedirs","title":"function <code>gef_makedirs</code>","text":"<pre><code>gef_makedirs(path: str, mode: int = 493) \u2192 Path\n</code></pre> <p>Recursive mkdir() creation. If successful, return the absolute path of the directory created.  <code>gef_makedirs</code> is DEPRECATED and will be removed in the future.  use <code>pathlib.Path(...).mkdir()</code> </p> <p></p>"},{"location":"api/gef/#function-gdb_disassemble","title":"function <code>gdb_disassemble</code>","text":"<pre><code>gdb_disassemble(\n    start_pc: int,\n    **kwargs: int\n) \u2192 Generator[__main__.Instruction, NoneType, NoneType]\n</code></pre> <p>Disassemble instructions from <code>start_pc</code> (Integer). Accepts the following named </p> <p>parameters:</p> <ul> <li><code>end_pc</code> (Integer) only instructions whose start address fall in the interval from  start_pc to end_pc are returned. </li> <li><code>count</code> (Integer) list at most this many disassembled instructions If <code>end_pc</code> and <code>count</code> are not provided, the function will behave as if <code>count=1</code>. Return an iterator of Instruction objects </li> </ul> <p></p>"},{"location":"api/gef/#function-gdb_get_nth_previous_instruction_address","title":"function <code>gdb_get_nth_previous_instruction_address</code>","text":"<pre><code>gdb_get_nth_previous_instruction_address(addr: int, n: int) \u2192 int | None\n</code></pre> <p>Return the address (Integer) of the <code>n</code>-th instruction before <code>addr</code>. </p> <p></p>"},{"location":"api/gef/#function-gdb_get_nth_next_instruction_address","title":"function <code>gdb_get_nth_next_instruction_address</code>","text":"<pre><code>gdb_get_nth_next_instruction_address(addr: int, n: int) \u2192 int\n</code></pre> <p>Return the address of the <code>n</code>-th instruction after <code>addr</code>.   <code>gdb_get_nth_next_instruction_address</code> is DEPRECATED and will be removed in the future.  Use <code>gef_instruction_n().address</code> </p> <p></p>"},{"location":"api/gef/#function-gef_instruction_n","title":"function <code>gef_instruction_n</code>","text":"<pre><code>gef_instruction_n(addr: int, n: int) \u2192 Instruction\n</code></pre> <p>Return the <code>n</code>-th instruction after <code>addr</code> as an Instruction object. Note that <code>n</code> is treated as an positive index, starting from 0 (current instruction address) </p> <p></p>"},{"location":"api/gef/#function-gef_get_instruction_at","title":"function <code>gef_get_instruction_at</code>","text":"<pre><code>gef_get_instruction_at(addr: int) \u2192 Instruction\n</code></pre> <p>Return the full Instruction found at the specified address. </p> <p></p>"},{"location":"api/gef/#function-gef_current_instruction","title":"function <code>gef_current_instruction</code>","text":"<pre><code>gef_current_instruction(addr: int) \u2192 Instruction\n</code></pre> <p>Return the current instruction as an Instruction object. </p> <p></p>"},{"location":"api/gef/#function-gef_next_instruction","title":"function <code>gef_next_instruction</code>","text":"<pre><code>gef_next_instruction(addr: int) \u2192 Instruction\n</code></pre> <p>Return the next instruction as an Instruction object. </p> <p></p>"},{"location":"api/gef/#function-gef_disassemble","title":"function <code>gef_disassemble</code>","text":"<pre><code>gef_disassemble(\n    addr: int,\n    nb_insn: int,\n    nb_prev: int = 0\n) \u2192 Generator[__main__.Instruction, NoneType, NoneType]\n</code></pre> <p>Disassemble <code>nb_insn</code> instructions after <code>addr</code> and <code>nb_prev</code> before <code>addr</code>. Return an iterator of Instruction objects. </p> <p></p>"},{"location":"api/gef/#function-gef_execute_external","title":"function <code>gef_execute_external</code>","text":"<pre><code>gef_execute_external(\n    command: Sequence[str],\n    as_list: bool = False,\n    **kwargs: Any\n) \u2192 str | list[str]\n</code></pre> <p>Execute an external command and return the result. </p> <p></p>"},{"location":"api/gef/#function-gef_execute_gdb_script","title":"function <code>gef_execute_gdb_script</code>","text":"<pre><code>gef_execute_gdb_script(commands: str) \u2192 None\n</code></pre> <p>Execute the parameter <code>source</code> as GDB command. This is done by writing <code>commands</code> to a temporary file, which is then executed via GDB <code>source</code> command. The tempfile is then deleted. </p> <p></p>"},{"location":"api/gef/#function-checksec","title":"function <code>checksec</code>","text":"<pre><code>checksec(filename: str) \u2192 dict[str, bool]\n</code></pre> <p><code>checksec</code> is DEPRECATED and will be removed in the future.  Use Elf(fname).checksec() </p> <p></p>"},{"location":"api/gef/#function-get_arch","title":"function <code>get_arch</code>","text":"<pre><code>get_arch() \u2192 str\n</code></pre> <p>Return the binary's architecture.  <code>get_arch</code> is DEPRECATED and will be removed in the future.  Use <code>gef.arch</code> instead </p> <p></p>"},{"location":"api/gef/#function-get_entry_point","title":"function <code>get_entry_point</code>","text":"<pre><code>get_entry_point() \u2192 int | None\n</code></pre> <p>Return the binary entry point.  <code>get_entry_point</code> is DEPRECATED and will be removed in the future.  Use <code>gef.binary.entry_point</code> instead </p> <p></p>"},{"location":"api/gef/#function-is_pie","title":"function <code>is_pie</code>","text":"<pre><code>is_pie(fpath: str) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-is_big_endian","title":"function <code>is_big_endian</code>","text":"<pre><code>is_big_endian() \u2192 bool\n</code></pre> <p><code>is_big_endian</code> is DEPRECATED and will be removed in the future.  Prefer <code>gef.arch.endianness == Endianness.BIG_ENDIAN</code> </p> <p></p>"},{"location":"api/gef/#function-is_little_endian","title":"function <code>is_little_endian</code>","text":"<pre><code>is_little_endian() \u2192 bool\n</code></pre> <p><code>is_little_endian</code> is DEPRECATED and will be removed in the future.  gef.arch.endianness == Endianness.LITTLE_ENDIAN </p> <p></p>"},{"location":"api/gef/#function-flags_to_human","title":"function <code>flags_to_human</code>","text":"<pre><code>flags_to_human(reg_value: int, value_table: dict[int, str]) \u2192 str\n</code></pre> <p>Return a human readable string showing the flag states. </p> <p></p>"},{"location":"api/gef/#function-register_architecture","title":"function <code>register_architecture</code>","text":"<pre><code>register_architecture(\n    cls: Type[ForwardRef('Architecture')]\n) \u2192 Type[ForwardRef('Architecture')]\n</code></pre> <p><code>register_architecture</code> is DEPRECATED and will be removed in the future.  Using the decorator <code>register_architecture</code> is unnecessary </p> <p></p>"},{"location":"api/gef/#function-copy_to_clipboard","title":"function <code>copy_to_clipboard</code>","text":"<pre><code>copy_to_clipboard(data: bytes) \u2192 None\n</code></pre> <p>Helper function to submit data to the clipboard </p> <p></p>"},{"location":"api/gef/#function-use_stdtype","title":"function <code>use_stdtype</code>","text":"<pre><code>use_stdtype() \u2192 str\n</code></pre>"},{"location":"api/gef/#function-use_default_type","title":"function <code>use_default_type</code>","text":"<pre><code>use_default_type() \u2192 str\n</code></pre>"},{"location":"api/gef/#function-use_golang_type","title":"function <code>use_golang_type</code>","text":"<pre><code>use_golang_type() \u2192 str\n</code></pre>"},{"location":"api/gef/#function-use_rust_type","title":"function <code>use_rust_type</code>","text":"<pre><code>use_rust_type() \u2192 str\n</code></pre>"},{"location":"api/gef/#function-to_unsigned_long","title":"function <code>to_unsigned_long</code>","text":"<pre><code>to_unsigned_long(v: gdb.Value) \u2192 int\n</code></pre> <p>Cast a gdb.Value to unsigned long. </p> <p></p>"},{"location":"api/gef/#function-get_path_from_info_proc","title":"function <code>get_path_from_info_proc</code>","text":"<pre><code>get_path_from_info_proc() \u2192 str | None\n</code></pre>"},{"location":"api/gef/#function-get_os","title":"function <code>get_os</code>","text":"<pre><code>get_os() \u2192 str\n</code></pre> <p><code>get_os</code> is DEPRECATED and will be removed in the future.  Use <code>gef.session.os</code> </p> <p></p>"},{"location":"api/gef/#function-is_target_coredump","title":"function <code>is_target_coredump</code>","text":"<pre><code>is_target_coredump() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-get_filepath","title":"function <code>get_filepath</code>","text":"<pre><code>get_filepath() \u2192 str | None\n</code></pre> <p>Return the local absolute path of the file currently debugged. </p> <p></p>"},{"location":"api/gef/#function-get_function_length","title":"function <code>get_function_length</code>","text":"<pre><code>get_function_length(sym: str) \u2192 int\n</code></pre> <p>Attempt to get the length of the raw bytes of a function. </p> <p></p>"},{"location":"api/gef/#function-process_lookup_address","title":"function <code>process_lookup_address</code>","text":"<pre><code>process_lookup_address(address: int) \u2192 __main__.Section | None\n</code></pre> <p>Look up for an address in memory. Return an Address object if found, None otherwise. </p> <p></p>"},{"location":"api/gef/#function-xor","title":"function <code>xor</code>","text":"<pre><code>xor(data: ByteString, key: str) \u2192 bytearray\n</code></pre> <p>Return <code>data</code> xor-ed with <code>key</code>. </p> <p></p>"},{"location":"api/gef/#function-is_hex","title":"function <code>is_hex</code>","text":"<pre><code>is_hex(pattern: str) \u2192 bool\n</code></pre> <p>Return whether provided string is a hexadecimal value. </p> <p></p>"},{"location":"api/gef/#function-continue_handler","title":"function <code>continue_handler</code>","text":"<pre><code>continue_handler(_: 'gdb.ContinueEvent') \u2192 None\n</code></pre> <p>GDB event handler for new object continue cases. </p> <p></p>"},{"location":"api/gef/#function-hook_stop_handler","title":"function <code>hook_stop_handler</code>","text":"<pre><code>hook_stop_handler(_: 'gdb.StopEvent') \u2192 None\n</code></pre> <p>GDB event handler for stop cases. </p> <p></p>"},{"location":"api/gef/#function-new_objfile_handler","title":"function <code>new_objfile_handler</code>","text":"<pre><code>new_objfile_handler(evt: 'gdb.NewObjFileEvent | None') \u2192 None\n</code></pre> <p>GDB event handler for new object file cases. </p> <p></p>"},{"location":"api/gef/#function-exit_handler","title":"function <code>exit_handler</code>","text":"<pre><code>exit_handler(_: 'gdb.ExitedEvent') \u2192 None\n</code></pre> <p>GDB event handler for exit cases. </p> <p></p>"},{"location":"api/gef/#function-memchanged_handler","title":"function <code>memchanged_handler</code>","text":"<pre><code>memchanged_handler(_: 'gdb.MemoryChangedEvent') \u2192 None\n</code></pre> <p>GDB event handler for mem changes cases. </p> <p></p>"},{"location":"api/gef/#function-regchanged_handler","title":"function <code>regchanged_handler</code>","text":"<pre><code>regchanged_handler(_: 'gdb.RegisterChangedEvent') \u2192 None\n</code></pre> <p>GDB event handler for reg changes cases. </p> <p></p>"},{"location":"api/gef/#function-get_terminal_size","title":"function <code>get_terminal_size</code>","text":"<pre><code>get_terminal_size() \u2192 tuple[int, int]\n</code></pre> <p>Return the current terminal size. </p> <p></p>"},{"location":"api/gef/#function-reset_architecture","title":"function <code>reset_architecture</code>","text":"<pre><code>reset_architecture(arch: str | None = None) \u2192 None\n</code></pre> <p>Sets the current architecture. If an architecture is explicitly specified by parameter, try to use that one. If this fails, an <code>OSError</code> exception will occur. If no architecture is specified, then GEF will attempt to determine automatically based on the current ELF target. If this fails, an <code>OSError</code> exception will occur. </p> <p></p>"},{"location":"api/gef/#function-get_memory_alignment","title":"function <code>get_memory_alignment</code>","text":"<pre><code>get_memory_alignment(in_bits: bool = False) \u2192 int\n</code></pre> <p>Try to determine the size of a pointer on this system.  First, try to parse it out of the ELF header.  Next, use the size of <code>size_t</code>.  Finally, try the size of $pc.  If <code>in_bits</code> is set to True, the result is returned in bits, otherwise in  bytes.  <code>get_memory_alignment</code> is DEPRECATED and will be removed in the future.  Use <code>gef.arch.ptrsize</code> instead </p> <p></p>"},{"location":"api/gef/#function-clear_screen","title":"function <code>clear_screen</code>","text":"<pre><code>clear_screen(tty: str = '') \u2192 None\n</code></pre> <p>Clear the screen. </p> <p></p>"},{"location":"api/gef/#function-format_address","title":"function <code>format_address</code>","text":"<pre><code>format_address(addr: int) \u2192 str\n</code></pre> <p>Format the address according to its size. </p> <p></p>"},{"location":"api/gef/#function-format_address_spaces","title":"function <code>format_address_spaces</code>","text":"<pre><code>format_address_spaces(addr: int, left: bool = True) \u2192 str\n</code></pre> <p>Format the address according to its size, but with spaces instead of zeroes. </p> <p></p>"},{"location":"api/gef/#function-align_address","title":"function <code>align_address</code>","text":"<pre><code>align_address(address: int) \u2192 int\n</code></pre> <p>Align the provided address to the process's native length. </p> <p></p>"},{"location":"api/gef/#function-align_address_to_size","title":"function <code>align_address_to_size</code>","text":"<pre><code>align_address_to_size(address: int, align: int) \u2192 int\n</code></pre> <p>Align the address to the given size. </p> <p></p>"},{"location":"api/gef/#function-align_address_to_page","title":"function <code>align_address_to_page</code>","text":"<pre><code>align_address_to_page(address: int) \u2192 int\n</code></pre> <p>Align the address to a page. </p> <p></p>"},{"location":"api/gef/#function-parse_address","title":"function <code>parse_address</code>","text":"<pre><code>parse_address(address: str) \u2192 int\n</code></pre> <p>Parse an address and return it as an Integer. </p> <p></p>"},{"location":"api/gef/#function-is_in_x86_kernel","title":"function <code>is_in_x86_kernel</code>","text":"<pre><code>is_in_x86_kernel(address: int) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-is_remote_debug","title":"function <code>is_remote_debug</code>","text":"<pre><code>is_remote_debug() \u2192 bool\n</code></pre> <p>\"Return True is the current debugging session is running through GDB remote session. </p> <p></p>"},{"location":"api/gef/#function-de_bruijn","title":"function <code>de_bruijn</code>","text":"<pre><code>de_bruijn(alphabet: bytes, n: int) \u2192 Generator[int, NoneType, NoneType]\n</code></pre> <p>De Bruijn sequence for alphabet and subsequences of length n (for compat. w/ pwnlib). </p> <p></p>"},{"location":"api/gef/#function-generate_cyclic_pattern","title":"function <code>generate_cyclic_pattern</code>","text":"<pre><code>generate_cyclic_pattern(length: int, cycle: int = 4) \u2192 bytearray\n</code></pre> <p>Create a <code>length</code> byte bytearray of a de Bruijn cyclic pattern. </p> <p></p>"},{"location":"api/gef/#function-safe_parse_and_eval","title":"function <code>safe_parse_and_eval</code>","text":"<pre><code>safe_parse_and_eval(value: str) \u2192 gdb.Value | None\n</code></pre> <p>GEF wrapper for gdb.parse_and_eval(): this function returns None instead of raising gdb.error if the eval failed. </p> <p></p>"},{"location":"api/gef/#function-gef_convenience","title":"function <code>gef_convenience</code>","text":"<pre><code>gef_convenience(value: str | bytes) \u2192 str\n</code></pre> <p>Defines a new convenience value. </p> <p></p>"},{"location":"api/gef/#function-parse_string_range","title":"function <code>parse_string_range</code>","text":"<pre><code>parse_string_range(s: str) \u2192 Iterator[int]\n</code></pre> <p>Parses an address range (e.g. 0x400000-0x401000) </p> <p></p>"},{"location":"api/gef/#function-gef_get_pie_breakpoint","title":"function <code>gef_get_pie_breakpoint</code>","text":"<pre><code>gef_get_pie_breakpoint(num: int) \u2192 PieVirtualBreakpoint\n</code></pre> <p><code>gef_get_pie_breakpoint</code> is DEPRECATED and will be removed in the future.  Use <code>gef.session.pie_breakpoints[num]</code> </p> <p></p>"},{"location":"api/gef/#function-endian_str","title":"function <code>endian_str</code>","text":"<pre><code>endian_str() \u2192 str\n</code></pre> <p><code>endian_str</code> is DEPRECATED and will be removed in the future.  Use <code>str(gef.arch.endianness)</code> instead </p> <p></p>"},{"location":"api/gef/#function-get_gef_setting","title":"function <code>get_gef_setting</code>","text":"<pre><code>get_gef_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_gef_setting</code> is DEPRECATED and will be removed in the future.  Use <code>gef.config[key]</code> </p> <p></p>"},{"location":"api/gef/#function-set_gef_setting","title":"function <code>set_gef_setting</code>","text":"<pre><code>set_gef_setting(name: str, value: Any) \u2192 None\n</code></pre> <p><code>set_gef_setting</code> is DEPRECATED and will be removed in the future.  Use <code>gef.config[key] = value</code> </p> <p></p>"},{"location":"api/gef/#function-gef_getpagesize","title":"function <code>gef_getpagesize</code>","text":"<pre><code>gef_getpagesize() \u2192 int\n</code></pre> <p><code>gef_getpagesize</code> is DEPRECATED and will be removed in the future.  Use <code>gef.session.pagesize</code> </p> <p></p>"},{"location":"api/gef/#function-gef_read_canary","title":"function <code>gef_read_canary</code>","text":"<pre><code>gef_read_canary() \u2192 tuple[int, int] | None\n</code></pre> <p><code>gef_read_canary</code> is DEPRECATED and will be removed in the future.  Use <code>gef.session.canary</code> </p> <p></p>"},{"location":"api/gef/#function-get_pid","title":"function <code>get_pid</code>","text":"<pre><code>get_pid() \u2192 int\n</code></pre> <p><code>get_pid</code> is DEPRECATED and will be removed in the future.  Use <code>gef.session.pid</code> </p> <p></p>"},{"location":"api/gef/#function-get_filename","title":"function <code>get_filename</code>","text":"<pre><code>get_filename() \u2192 str\n</code></pre> <p><code>get_filename</code> is DEPRECATED and will be removed in the future.  Use <code>gef.session.file.name</code> </p> <p></p>"},{"location":"api/gef/#function-get_glibc_arena","title":"function <code>get_glibc_arena</code>","text":"<pre><code>get_glibc_arena() \u2192 __main__.GlibcArena | None\n</code></pre> <p><code>get_glibc_arena</code> is DEPRECATED and will be removed in the future.  Use <code>gef.heap.main_arena</code> </p> <p></p>"},{"location":"api/gef/#function-get_register","title":"function <code>get_register</code>","text":"<pre><code>get_register(regname) \u2192 int | None\n</code></pre> <p><code>get_register</code> is DEPRECATED and will be removed in the future.  Use <code>gef.arch.register(regname)</code> </p> <p></p>"},{"location":"api/gef/#function-get_process_maps","title":"function <code>get_process_maps</code>","text":"<pre><code>get_process_maps() \u2192 list[__main__.Section]\n</code></pre> <p><code>get_process_maps</code> is DEPRECATED and will be removed in the future.  Use <code>gef.memory.maps</code> </p> <p></p>"},{"location":"api/gef/#function-set_arch","title":"function <code>set_arch</code>","text":"<pre><code>set_arch(arch: str | None = None, _: str | None = None) \u2192 None\n</code></pre> <p><code>set_arch</code> is DEPRECATED and will be removed in the future.  Use <code>reset_architecture</code> </p> <p></p>"},{"location":"api/gef/#function-register_external_context_pane","title":"function <code>register_external_context_pane</code>","text":"<pre><code>register_external_context_pane(\n    pane_name: str,\n    display_pane_function: Callable[[], NoneType],\n    pane_title_function: Callable[[], str | None],\n    condition: Optional[Callable[[], bool]] = None\n) \u2192 None\n</code></pre> <p>Registering function for new GEF Context View. pane_name: a string that has no spaces (used in settings) display_pane_function: a function that uses gef_print() to print strings pane_title_function: a function that returns a string or None, which will be displayed as the title. If None, no title line is displayed. condition: an optional callback: if not None, the callback will be executed first. If it returns true,  then only the pane title and content will displayed. Otherwise, it's simply skipped. </p> <p>Example usage for a simple text to show when we hit a syscall: def only_syscall(): return gef_current_instruction(gef.arch.pc).is_syscall() def display_pane():  gef_print(\"Wow, I am a context pane!\") def pane_title():  return \"example:pane\" register_external_context_pane(\"example_pane\", display_pane, pane_title, only_syscall) </p> <p></p>"},{"location":"api/gef/#function-register_external_context_layout_mapping","title":"function <code>register_external_context_layout_mapping</code>","text":"<pre><code>register_external_context_layout_mapping(\n    current_pane_name: str,\n    display_pane_function: Callable[[], NoneType],\n    pane_title_function: Callable[[], str | None],\n    condition: Optional[Callable[[], bool]] = None\n) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-register_external_command","title":"function <code>register_external_command</code>","text":"<pre><code>register_external_command(\n    cls: Type[ForwardRef('GenericCommand')]\n) \u2192 Type[ForwardRef('GenericCommand')]\n</code></pre> <p>Registering function for new GEF (sub-)command to GDB.  <code>register_external_command</code> is DEPRECATED and will be removed in the future.  Use <code>register()</code>, and inherit from <code>GenericCommand</code> instead </p> <p></p>"},{"location":"api/gef/#function-register_command","title":"function <code>register_command</code>","text":"<pre><code>register_command(\n    cls: Type[ForwardRef('GenericCommand')]\n) \u2192 Type[ForwardRef('GenericCommand')]\n</code></pre> <p>Decorator for registering new GEF (sub-)command to GDB.  <code>register_command</code> is DEPRECATED and will be removed in the future.  Use <code>register()</code>, and inherit from <code>GenericCommand</code> instead </p> <p></p>"},{"location":"api/gef/#function-register_priority_command","title":"function <code>register_priority_command</code>","text":"<pre><code>register_priority_command(\n    cls: Type[ForwardRef('GenericCommand')]\n) \u2192 Type[ForwardRef('GenericCommand')]\n</code></pre> <p>Decorator for registering new command with priority, meaning that it must  loaded before the other generic commands.  <code>register_priority_command</code> is DEPRECATED and will be removed in the future.</p> <p></p>"},{"location":"api/gef/#function-register","title":"function <code>register</code>","text":"<pre><code>register(\n    cls: Union[Type[ForwardRef('ValidCommandType')], Type[ForwardRef('ValidFunctionType')]]\n) \u2192 Union[Type[ForwardRef('ValidCommandType')], Type[ForwardRef('ValidFunctionType')]]\n</code></pre>"},{"location":"api/gef/#function-register_function","title":"function <code>register_function</code>","text":"<pre><code>register_function(\n    cls: Type[ForwardRef('GenericFunction')]\n) \u2192 Type[ForwardRef('GenericFunction')]\n</code></pre> <p>Decorator for registering a new convenience function to GDB.  <code>register_function</code> is DEPRECATED and will be removed in the future.</p> <p></p>"},{"location":"api/gef/#function-target_remote_posthook","title":"function <code>target_remote_posthook</code>","text":"<pre><code>target_remote_posthook()\n</code></pre>"},{"location":"api/gef/#class-aarch64","title":"class <code>AARCH64</code>","text":""},{"location":"api/gef/#property-aarch64cpsr","title":"property AARCH64.cpsr","text":""},{"location":"api/gef/#property-aarch64endianness","title":"property AARCH64.endianness","text":""},{"location":"api/gef/#property-aarch64fp","title":"property AARCH64.fp","text":""},{"location":"api/gef/#property-aarch64instruction_length","title":"property AARCH64.instruction_length","text":""},{"location":"api/gef/#property-aarch64pc","title":"property AARCH64.pc","text":""},{"location":"api/gef/#property-aarch64ptrsize","title":"property AARCH64.ptrsize","text":"<p>Determine the size of pointer from the current CPU mode </p>"},{"location":"api/gef/#property-aarch64registers","title":"property AARCH64.registers","text":""},{"location":"api/gef/#property-aarch64sp","title":"property AARCH64.sp","text":""},{"location":"api/gef/#function-aarch64canary_address","title":"function <code>AARCH64.canary_address</code>","text":"<pre><code>canary_address() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-aarch64flag_register_to_human","title":"function <code>AARCH64.flag_register_to_human</code>","text":"<pre><code>flag_register_to_human(val: int | None = None) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-aarch64get_ith_parameter","title":"function <code>AARCH64.get_ith_parameter</code>","text":"<pre><code>get_ith_parameter(i: int, in_func: bool = True) \u2192 tuple[str, int | None]\n</code></pre> <p>Retrieves the correct parameter used for the current function call. </p> <p></p>"},{"location":"api/gef/#function-aarch64get_ra","title":"function <code>AARCH64.get_ra</code>","text":"<pre><code>get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 int | None\n</code></pre>"},{"location":"api/gef/#function-aarch64is_aarch32","title":"function <code>AARCH64.is_aarch32</code>","text":"<pre><code>is_aarch32() \u2192 bool\n</code></pre> <p>Determine if the CPU is currently in AARCH32 mode from runtime. </p> <p></p>"},{"location":"api/gef/#function-aarch64is_branch_taken","title":"function <code>AARCH64.is_branch_taken</code>","text":"<pre><code>is_branch_taken(insn: __main__.Instruction) \u2192 tuple[bool, str]\n</code></pre>"},{"location":"api/gef/#function-aarch64is_call","title":"function <code>AARCH64.is_call</code>","text":"<pre><code>is_call(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-aarch64is_conditional_branch","title":"function <code>AARCH64.is_conditional_branch</code>","text":"<pre><code>is_conditional_branch(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-aarch64is_ret","title":"function <code>AARCH64.is_ret</code>","text":"<pre><code>is_ret(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-aarch64is_thumb","title":"function <code>AARCH64.is_thumb</code>","text":"<pre><code>is_thumb() \u2192 bool\n</code></pre> <p>Determine if the machine is currently in THUMB mode. </p> <p></p>"},{"location":"api/gef/#function-aarch64is_thumb32","title":"function <code>AARCH64.is_thumb32</code>","text":"<pre><code>is_thumb32() \u2192 bool\n</code></pre> <p>Determine if the CPU is currently in THUMB32 mode from runtime. </p> <p></p>"},{"location":"api/gef/#function-aarch64mprotect_asm","title":"function <code>AARCH64.mprotect_asm</code>","text":"<pre><code>mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-aarch64register","title":"function <code>AARCH64.register</code>","text":"<pre><code>register(name: str) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-aarch64reset_caches","title":"function <code>AARCH64.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aarch64supports_gdb_arch","title":"function <code>AARCH64.supports_gdb_arch</code>","text":"<pre><code>supports_gdb_arch(gdb_arch: str) \u2192 bool | None\n</code></pre> <p>If implemented by a child <code>Architecture</code>, this function dictates if the current class supports the loaded ELF file (which can be accessed via <code>gef.binary</code>). This callback function will override any assumption made by GEF to determine the architecture. </p>"},{"location":"api/gef/#class-arm","title":"class <code>ARM</code>","text":""},{"location":"api/gef/#property-armcpsr","title":"property ARM.cpsr","text":""},{"location":"api/gef/#property-armendianness","title":"property ARM.endianness","text":""},{"location":"api/gef/#property-armfp","title":"property ARM.fp","text":""},{"location":"api/gef/#property-arminstruction_length","title":"property ARM.instruction_length","text":""},{"location":"api/gef/#property-armmode","title":"property ARM.mode","text":""},{"location":"api/gef/#property-armpc","title":"property ARM.pc","text":""},{"location":"api/gef/#property-armptrsize","title":"property ARM.ptrsize","text":""},{"location":"api/gef/#property-armregisters","title":"property ARM.registers","text":""},{"location":"api/gef/#property-armsp","title":"property ARM.sp","text":""},{"location":"api/gef/#function-armcanary_address","title":"function <code>ARM.canary_address</code>","text":"<pre><code>canary_address() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-armflag_register_to_human","title":"function <code>ARM.flag_register_to_human</code>","text":"<pre><code>flag_register_to_human(val: int | None = None) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-armget_ith_parameter","title":"function <code>ARM.get_ith_parameter</code>","text":"<pre><code>get_ith_parameter(i: int, in_func: bool = True) \u2192 tuple[str, int | None]\n</code></pre> <p>Retrieves the correct parameter used for the current function call. </p> <p></p>"},{"location":"api/gef/#function-armget_ra","title":"function <code>ARM.get_ra</code>","text":"<pre><code>get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 int | None\n</code></pre>"},{"location":"api/gef/#function-armis_branch_taken","title":"function <code>ARM.is_branch_taken</code>","text":"<pre><code>is_branch_taken(insn: __main__.Instruction) \u2192 tuple[bool, str]\n</code></pre>"},{"location":"api/gef/#function-armis_call","title":"function <code>ARM.is_call</code>","text":"<pre><code>is_call(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-armis_conditional_branch","title":"function <code>ARM.is_conditional_branch</code>","text":"<pre><code>is_conditional_branch(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-armis_ret","title":"function <code>ARM.is_ret</code>","text":"<pre><code>is_ret(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-armis_thumb","title":"function <code>ARM.is_thumb</code>","text":"<pre><code>is_thumb() \u2192 bool\n</code></pre> <p>Determine if the machine is currently in THUMB mode. </p> <p></p>"},{"location":"api/gef/#function-armmprotect_asm","title":"function <code>ARM.mprotect_asm</code>","text":"<pre><code>mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-armregister","title":"function <code>ARM.register</code>","text":"<pre><code>register(name: str) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-armreset_caches","title":"function <code>ARM.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-armsupports_gdb_arch","title":"function <code>ARM.supports_gdb_arch</code>","text":"<pre><code>supports_gdb_arch(gdb_arch: str) \u2192 bool | None\n</code></pre> <p>If implemented by a child <code>Architecture</code>, this function dictates if the current class supports the loaded ELF file (which can be accessed via <code>gef.binary</code>). This callback function will override any assumption made by GEF to determine the architecture. </p>"},{"location":"api/gef/#class-aslrcommand","title":"class <code>ASLRCommand</code>","text":"<p>View/modify the ASLR setting of GDB. By default, GDB will disable ASLR when it starts the process. (i.e. not attached). This command allows to change that setting. </p> <p></p>"},{"location":"api/gef/#function-aslrcommand__init__","title":"function <code>ASLRCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-aslrcommandsettings","title":"property ASLRCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-aslrcommandadd_setting","title":"function <code>ASLRCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-aslrcommanddel_setting","title":"function <code>ASLRCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-aslrcommanddo_invoke","title":"function <code>ASLRCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aslrcommandget_setting","title":"function <code>ASLRCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-aslrcommandhas_setting","title":"function <code>ASLRCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-aslrcommandinvoke","title":"function <code>ASLRCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aslrcommandpost_load","title":"function <code>ASLRCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aslrcommandpre_load","title":"function <code>ASLRCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aslrcommandusage","title":"function <code>ASLRCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-address","title":"class <code>Address</code>","text":"<p>GEF representation of memory addresses. </p> <p></p>"},{"location":"api/gef/#function-address__init__","title":"function <code>Address.__init__</code>","text":"<pre><code>__init__(**kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-addressvalid","title":"property Address.valid","text":""},{"location":"api/gef/#function-addressdereference","title":"function <code>Address.dereference</code>","text":"<pre><code>dereference() \u2192 int | None\n</code></pre>"},{"location":"api/gef/#function-addressis_in_heap_segment","title":"function <code>Address.is_in_heap_segment</code>","text":"<pre><code>is_in_heap_segment() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-addressis_in_stack_segment","title":"function <code>Address.is_in_stack_segment</code>","text":"<pre><code>is_in_stack_segment() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-addressis_in_text_segment","title":"function <code>Address.is_in_text_segment</code>","text":"<pre><code>is_in_text_segment() \u2192 bool\n</code></pre>"},{"location":"api/gef/#class-aliasesaddcommand","title":"class <code>AliasesAddCommand</code>","text":"<p>Command to add aliases. </p> <p></p>"},{"location":"api/gef/#function-aliasesaddcommand__init__","title":"function <code>AliasesAddCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-aliasesaddcommandsettings","title":"property AliasesAddCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-aliasesaddcommandadd_setting","title":"function <code>AliasesAddCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-aliasesaddcommanddel_setting","title":"function <code>AliasesAddCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-aliasesaddcommanddo_invoke","title":"function <code>AliasesAddCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aliasesaddcommandget_setting","title":"function <code>AliasesAddCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-aliasesaddcommandhas_setting","title":"function <code>AliasesAddCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-aliasesaddcommandinvoke","title":"function <code>AliasesAddCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aliasesaddcommandpost_load","title":"function <code>AliasesAddCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aliasesaddcommandpre_load","title":"function <code>AliasesAddCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aliasesaddcommandusage","title":"function <code>AliasesAddCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-aliasescommand","title":"class <code>AliasesCommand</code>","text":"<p>Base command to add, remove, or list aliases. </p> <p></p>"},{"location":"api/gef/#function-aliasescommand__init__","title":"function <code>AliasesCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-aliasescommandsettings","title":"property AliasesCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-aliasescommandadd_setting","title":"function <code>AliasesCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-aliasescommanddel_setting","title":"function <code>AliasesCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-aliasescommanddo_invoke","title":"function <code>AliasesCommand.do_invoke</code>","text":"<pre><code>do_invoke(_: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aliasescommandget_setting","title":"function <code>AliasesCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-aliasescommandhas_setting","title":"function <code>AliasesCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-aliasescommandinvoke","title":"function <code>AliasesCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aliasescommandpost_load","title":"function <code>AliasesCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aliasescommandpre_load","title":"function <code>AliasesCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aliasescommandusage","title":"function <code>AliasesCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-aliaseslistcommand","title":"class <code>AliasesListCommand</code>","text":"<p>Command to list aliases. </p> <p></p>"},{"location":"api/gef/#function-aliaseslistcommand__init__","title":"function <code>AliasesListCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-aliaseslistcommandsettings","title":"property AliasesListCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-aliaseslistcommandadd_setting","title":"function <code>AliasesListCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-aliaseslistcommanddel_setting","title":"function <code>AliasesListCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-aliaseslistcommanddo_invoke","title":"function <code>AliasesListCommand.do_invoke</code>","text":"<pre><code>do_invoke(_: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aliaseslistcommandget_setting","title":"function <code>AliasesListCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-aliaseslistcommandhas_setting","title":"function <code>AliasesListCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-aliaseslistcommandinvoke","title":"function <code>AliasesListCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aliaseslistcommandpost_load","title":"function <code>AliasesListCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aliaseslistcommandpre_load","title":"function <code>AliasesListCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aliaseslistcommandusage","title":"function <code>AliasesListCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-aliasesrmcommand","title":"class <code>AliasesRmCommand</code>","text":"<p>Command to remove aliases. </p> <p></p>"},{"location":"api/gef/#function-aliasesrmcommand__init__","title":"function <code>AliasesRmCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-aliasesrmcommandsettings","title":"property AliasesRmCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-aliasesrmcommandadd_setting","title":"function <code>AliasesRmCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-aliasesrmcommanddel_setting","title":"function <code>AliasesRmCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-aliasesrmcommanddo_invoke","title":"function <code>AliasesRmCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aliasesrmcommandget_setting","title":"function <code>AliasesRmCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-aliasesrmcommandhas_setting","title":"function <code>AliasesRmCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-aliasesrmcommandinvoke","title":"function <code>AliasesRmCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aliasesrmcommandpost_load","title":"function <code>AliasesRmCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aliasesrmcommandpre_load","title":"function <code>AliasesRmCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-aliasesrmcommandusage","title":"function <code>AliasesRmCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-alreadyregisteredexception","title":"class <code>AlreadyRegisteredException</code>","text":""},{"location":"api/gef/#class-archcommand","title":"class <code>ArchCommand</code>","text":"<p>Manage the current loaded architecture. </p> <p></p>"},{"location":"api/gef/#function-archcommand__init__","title":"function <code>ArchCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-archcommandsettings","title":"property ArchCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-archcommandadd_setting","title":"function <code>ArchCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-archcommanddel_setting","title":"function <code>ArchCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-archcommanddo_invoke","title":"function <code>ArchCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-archcommandget_setting","title":"function <code>ArchCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-archcommandhas_setting","title":"function <code>ArchCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-archcommandinvoke","title":"function <code>ArchCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-archcommandpost_load","title":"function <code>ArchCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-archcommandpre_load","title":"function <code>ArchCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-archcommandusage","title":"function <code>ArchCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-archgetcommand","title":"class <code>ArchGetCommand</code>","text":"<p>Get the current loaded architecture. </p> <p></p>"},{"location":"api/gef/#function-archgetcommand__init__","title":"function <code>ArchGetCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-archgetcommandsettings","title":"property ArchGetCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-archgetcommandadd_setting","title":"function <code>ArchGetCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-archgetcommanddel_setting","title":"function <code>ArchGetCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-archgetcommanddo_invoke","title":"function <code>ArchGetCommand.do_invoke</code>","text":"<pre><code>do_invoke(args: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-archgetcommandget_setting","title":"function <code>ArchGetCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-archgetcommandhas_setting","title":"function <code>ArchGetCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-archgetcommandinvoke","title":"function <code>ArchGetCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-archgetcommandpost_load","title":"function <code>ArchGetCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-archgetcommandpre_load","title":"function <code>ArchGetCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-archgetcommandusage","title":"function <code>ArchGetCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-archlistcommand","title":"class <code>ArchListCommand</code>","text":"<p>List the available architectures. </p> <p></p>"},{"location":"api/gef/#function-archlistcommand__init__","title":"function <code>ArchListCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-archlistcommandsettings","title":"property ArchListCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-archlistcommandadd_setting","title":"function <code>ArchListCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-archlistcommanddel_setting","title":"function <code>ArchListCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-archlistcommanddo_invoke","title":"function <code>ArchListCommand.do_invoke</code>","text":"<pre><code>do_invoke(args: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-archlistcommandget_setting","title":"function <code>ArchListCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-archlistcommandhas_setting","title":"function <code>ArchListCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-archlistcommandinvoke","title":"function <code>ArchListCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-archlistcommandpost_load","title":"function <code>ArchListCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-archlistcommandpre_load","title":"function <code>ArchListCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-archlistcommandusage","title":"function <code>ArchListCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-archsetcommand","title":"class <code>ArchSetCommand</code>","text":"<p>Set the current loaded architecture. </p> <p></p>"},{"location":"api/gef/#function-archsetcommand__init__","title":"function <code>ArchSetCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-archsetcommandsettings","title":"property ArchSetCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-archsetcommandadd_setting","title":"function <code>ArchSetCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-archsetcommandcomplete","title":"function <code>ArchSetCommand.complete</code>","text":"<pre><code>complete(text: str, word: str) \u2192 list[str]\n</code></pre>"},{"location":"api/gef/#function-archsetcommanddel_setting","title":"function <code>ArchSetCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-archsetcommanddo_invoke","title":"function <code>ArchSetCommand.do_invoke</code>","text":"<pre><code>do_invoke(args: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-archsetcommandget_setting","title":"function <code>ArchSetCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-archsetcommandhas_setting","title":"function <code>ArchSetCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-archsetcommandinvoke","title":"function <code>ArchSetCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-archsetcommandpost_load","title":"function <code>ArchSetCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-archsetcommandpre_load","title":"function <code>ArchSetCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-archsetcommandusage","title":"function <code>ArchSetCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-architecture","title":"class <code>Architecture</code>","text":"<p>Generic metaclass for the architecture supported by GEF. </p>"},{"location":"api/gef/#property-architectureendianness","title":"property Architecture.endianness","text":""},{"location":"api/gef/#property-architecturefp","title":"property Architecture.fp","text":""},{"location":"api/gef/#property-architecturepc","title":"property Architecture.pc","text":""},{"location":"api/gef/#property-architectureptrsize","title":"property Architecture.ptrsize","text":""},{"location":"api/gef/#property-architectureregisters","title":"property Architecture.registers","text":""},{"location":"api/gef/#property-architecturesp","title":"property Architecture.sp","text":""},{"location":"api/gef/#function-architecturecanary_address","title":"function <code>Architecture.canary_address</code>","text":"<pre><code>canary_address() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-architectureflag_register_to_human","title":"function <code>Architecture.flag_register_to_human</code>","text":"<pre><code>flag_register_to_human(val: int | None = None) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-architectureget_ith_parameter","title":"function <code>Architecture.get_ith_parameter</code>","text":"<pre><code>get_ith_parameter(i: int, in_func: bool = True) \u2192 tuple[str, int | None]\n</code></pre> <p>Retrieves the correct parameter used for the current function call. </p> <p></p>"},{"location":"api/gef/#function-architectureget_ra","title":"function <code>Architecture.get_ra</code>","text":"<pre><code>get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 int | None\n</code></pre>"},{"location":"api/gef/#function-architectureis_branch_taken","title":"function <code>Architecture.is_branch_taken</code>","text":"<pre><code>is_branch_taken(insn: __main__.Instruction) \u2192 tuple[bool, str]\n</code></pre>"},{"location":"api/gef/#function-architectureis_call","title":"function <code>Architecture.is_call</code>","text":"<pre><code>is_call(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-architectureis_conditional_branch","title":"function <code>Architecture.is_conditional_branch</code>","text":"<pre><code>is_conditional_branch(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-architectureis_ret","title":"function <code>Architecture.is_ret</code>","text":"<pre><code>is_ret(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-architecturemprotect_asm","title":"function <code>Architecture.mprotect_asm</code>","text":"<pre><code>mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-architectureregister","title":"function <code>Architecture.register</code>","text":"<pre><code>register(name: str) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-architecturereset_caches","title":"function <code>Architecture.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-architecturesupports_gdb_arch","title":"function <code>Architecture.supports_gdb_arch</code>","text":"<pre><code>supports_gdb_arch(gdb_arch: str) \u2192 bool | None\n</code></pre> <p>If implemented by a child <code>Architecture</code>, this function dictates if the current class supports the loaded ELF file (which can be accessed via <code>gef.binary</code>). This callback function will override any assumption made by GEF to determine the architecture. </p>"},{"location":"api/gef/#class-architecturebase","title":"class <code>ArchitectureBase</code>","text":"<p>Class decorator for declaring an architecture to GEF. </p>"},{"location":"api/gef/#class-bssbasefunction","title":"class <code>BssBaseFunction</code>","text":"<p>Return the current bss base address plus the given offset. </p> <p></p>"},{"location":"api/gef/#function-bssbasefunction__init__","title":"function <code>BssBaseFunction.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-bssbasefunctionarg_to_long","title":"function <code>BssBaseFunction.arg_to_long</code>","text":"<pre><code>arg_to_long(args: Any, index: int, default: int = 0) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-bssbasefunctiondo_invoke","title":"function <code>BssBaseFunction.do_invoke</code>","text":"<pre><code>do_invoke(args: list) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-bssbasefunctioninvoke","title":"function <code>BssBaseFunction.invoke</code>","text":"<pre><code>invoke(*args: Any) \u2192 int\n</code></pre>"},{"location":"api/gef/#class-canarycommand","title":"class <code>CanaryCommand</code>","text":"<p>Shows the canary value of the current process. </p> <p></p>"},{"location":"api/gef/#function-canarycommand__init__","title":"function <code>CanaryCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-canarycommandsettings","title":"property CanaryCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-canarycommandadd_setting","title":"function <code>CanaryCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-canarycommanddel_setting","title":"function <code>CanaryCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-canarycommanddo_invoke","title":"function <code>CanaryCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-canarycommandget_setting","title":"function <code>CanaryCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-canarycommandhas_setting","title":"function <code>CanaryCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-canarycommandinvoke","title":"function <code>CanaryCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-canarycommandpost_load","title":"function <code>CanaryCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-canarycommandpre_load","title":"function <code>CanaryCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-canarycommandusage","title":"function <code>CanaryCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-changefdcommand","title":"class <code>ChangeFdCommand</code>","text":"<p>ChangeFdCommand: redirect file descriptor during runtime. </p> <p></p>"},{"location":"api/gef/#function-changefdcommand__init__","title":"function <code>ChangeFdCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-changefdcommandsettings","title":"property ChangeFdCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-changefdcommandadd_setting","title":"function <code>ChangeFdCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-changefdcommanddel_setting","title":"function <code>ChangeFdCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-changefdcommanddo_invoke","title":"function <code>ChangeFdCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-changefdcommandget_fd_from_result","title":"function <code>ChangeFdCommand.get_fd_from_result</code>","text":"<pre><code>get_fd_from_result(res: str) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-changefdcommandget_setting","title":"function <code>ChangeFdCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-changefdcommandhas_setting","title":"function <code>ChangeFdCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-changefdcommandinvoke","title":"function <code>ChangeFdCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-changefdcommandpost_load","title":"function <code>ChangeFdCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-changefdcommandpre_load","title":"function <code>ChangeFdCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-changefdcommandusage","title":"function <code>ChangeFdCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-changepermissionbreakpoint","title":"class <code>ChangePermissionBreakpoint</code>","text":"<p>When hit, this temporary breakpoint will restore the original code, and position $pc correctly. </p> <p></p>"},{"location":"api/gef/#function-changepermissionbreakpoint__init__","title":"function <code>ChangePermissionBreakpoint.__init__</code>","text":"<pre><code>__init__(loc: str, code: ByteString, pc: int) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-changepermissionbreakpointstop","title":"function <code>ChangePermissionBreakpoint.stop</code>","text":"<pre><code>stop() \u2192 bool\n</code></pre>"},{"location":"api/gef/#class-checkseccommand","title":"class <code>ChecksecCommand</code>","text":"<p>Checksec the security properties of the current executable or passed as argument. The command checks for the following protections:  - PIE  - NX  - RelRO  - Glibc Stack Canaries  - Fortify Source </p> <p></p>"},{"location":"api/gef/#function-checkseccommand__init__","title":"function <code>ChecksecCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-checkseccommandsettings","title":"property ChecksecCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-checkseccommandadd_setting","title":"function <code>ChecksecCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-checkseccommanddel_setting","title":"function <code>ChecksecCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-checkseccommanddo_invoke","title":"function <code>ChecksecCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-checkseccommandget_setting","title":"function <code>ChecksecCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-checkseccommandhas_setting","title":"function <code>ChecksecCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-checkseccommandinvoke","title":"function <code>ChecksecCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-checkseccommandpost_load","title":"function <code>ChecksecCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-checkseccommandpre_load","title":"function <code>ChecksecCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-checkseccommandprint_security_properties","title":"function <code>ChecksecCommand.print_security_properties</code>","text":"<pre><code>print_security_properties(filename: str) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-checkseccommandusage","title":"function <code>ChecksecCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-color","title":"class <code>Color</code>","text":"<p>Used to colorify terminal output. </p> <p></p>"},{"location":"api/gef/#function-colorblinkify","title":"function <code>Color.blinkify</code>","text":"<pre><code>blinkify(msg: str) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-colorblueify","title":"function <code>Color.blueify</code>","text":"<pre><code>blueify(msg: str) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-colorboldify","title":"function <code>Color.boldify</code>","text":"<pre><code>boldify(msg: str) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-colorcolorify","title":"function <code>Color.colorify</code>","text":"<pre><code>colorify(text: str, attrs: str) \u2192 str\n</code></pre> <p>Color text according to the given attributes. </p> <p></p>"},{"location":"api/gef/#function-colorcyanify","title":"function <code>Color.cyanify</code>","text":"<pre><code>cyanify(msg: str) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-colorgrayify","title":"function <code>Color.grayify</code>","text":"<pre><code>grayify(msg: str) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-colorgreenify","title":"function <code>Color.greenify</code>","text":"<pre><code>greenify(msg: str) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-colorhighlightify","title":"function <code>Color.highlightify</code>","text":"<pre><code>highlightify(msg: str) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-colorlight_grayify","title":"function <code>Color.light_grayify</code>","text":"<pre><code>light_grayify(msg: str) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-colorpinkify","title":"function <code>Color.pinkify</code>","text":"<pre><code>pinkify(msg: str) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-colorredify","title":"function <code>Color.redify</code>","text":"<pre><code>redify(msg: str) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-colorunderlinify","title":"function <code>Color.underlinify</code>","text":"<pre><code>underlinify(msg: str) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-coloryellowify","title":"function <code>Color.yellowify</code>","text":"<pre><code>yellowify(msg: str) \u2192 str\n</code></pre>"},{"location":"api/gef/#class-contextcommand","title":"class <code>ContextCommand</code>","text":"<p>Displays a comprehensive and modular summary of runtime context. Unless setting <code>enable</code> is set to False, this command will be spawned automatically every time GDB hits a breakpoint, a watchpoint, or any kind of interrupt. By default, it will show panes that contain the register states, the stack, and the disassembly code around $pc. </p> <p></p>"},{"location":"api/gef/#function-contextcommand__init__","title":"function <code>ContextCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-contextcommandsettings","title":"property ContextCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-contextcommandadd_setting","title":"function <code>ContextCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-contextcommandaddr_has_breakpoint","title":"function <code>ContextCommand.addr_has_breakpoint</code>","text":"<pre><code>addr_has_breakpoint(address: int, bp_locations: list[str]) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-contextcommandcontext_additional_information","title":"function <code>ContextCommand.context_additional_information</code>","text":"<pre><code>context_additional_information() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-contextcommandcontext_args","title":"function <code>ContextCommand.context_args</code>","text":"<pre><code>context_args() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-contextcommandcontext_code","title":"function <code>ContextCommand.context_code</code>","text":"<pre><code>context_code() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-contextcommandcontext_memory","title":"function <code>ContextCommand.context_memory</code>","text":"<pre><code>context_memory() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-contextcommandcontext_regs","title":"function <code>ContextCommand.context_regs</code>","text":"<pre><code>context_regs() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-contextcommandcontext_source","title":"function <code>ContextCommand.context_source</code>","text":"<pre><code>context_source() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-contextcommandcontext_stack","title":"function <code>ContextCommand.context_stack</code>","text":"<pre><code>context_stack() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-contextcommandcontext_threads","title":"function <code>ContextCommand.context_threads</code>","text":"<pre><code>context_threads() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-contextcommandcontext_title","title":"function <code>ContextCommand.context_title</code>","text":"<pre><code>context_title(m: str | None) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-contextcommandcontext_trace","title":"function <code>ContextCommand.context_trace</code>","text":"<pre><code>context_trace() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-contextcommanddel_setting","title":"function <code>ContextCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-contextcommanddo_invoke","title":"function <code>ContextCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-contextcommandempty_extra_messages","title":"function <code>ContextCommand.empty_extra_messages</code>","text":"<pre><code>empty_extra_messages(_) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-contextcommandget_pc_context_info","title":"function <code>ContextCommand.get_pc_context_info</code>","text":"<pre><code>get_pc_context_info(pc: int, line: str) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-contextcommandget_setting","title":"function <code>ContextCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-contextcommandhas_setting","title":"function <code>ContextCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-contextcommandinvoke","title":"function <code>ContextCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-contextcommandline_has_breakpoint","title":"function <code>ContextCommand.line_has_breakpoint</code>","text":"<pre><code>line_has_breakpoint(\n    file_name: str,\n    line_number: int,\n    bp_locations: list[str]\n) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-contextcommandpost_load","title":"function <code>ContextCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-contextcommandpre_load","title":"function <code>ContextCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-contextcommandprint_arguments_from_symbol","title":"function <code>ContextCommand.print_arguments_from_symbol</code>","text":"<pre><code>print_arguments_from_symbol(function_name: str, symbol: 'gdb.Symbol') \u2192 None\n</code></pre> <p>If symbols were found, parse them and print the argument adequately. </p> <p></p>"},{"location":"api/gef/#function-contextcommandprint_guessed_arguments","title":"function <code>ContextCommand.print_guessed_arguments</code>","text":"<pre><code>print_guessed_arguments(function_name: str) \u2192 None\n</code></pre> <p>When no symbol, read the current basic block and look for \"interesting\" instructions. </p> <p></p>"},{"location":"api/gef/#function-contextcommandshow_legend","title":"function <code>ContextCommand.show_legend</code>","text":"<pre><code>show_legend() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-contextcommandupdate_registers","title":"function <code>ContextCommand.update_registers</code>","text":"<pre><code>update_registers(_) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-contextcommandusage","title":"function <code>ContextCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-dereferencecommand","title":"class <code>DereferenceCommand</code>","text":"<p>Dereference recursively from an address and display information. This acts like WinDBG <code>dps</code> command. </p> <p></p>"},{"location":"api/gef/#function-dereferencecommand__init__","title":"function <code>DereferenceCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-dereferencecommandsettings","title":"property DereferenceCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-dereferencecommandadd_setting","title":"function <code>DereferenceCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-dereferencecommanddel_setting","title":"function <code>DereferenceCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-dereferencecommandwrapper","title":"function <code>DereferenceCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-dereferencecommandget_setting","title":"function <code>DereferenceCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-dereferencecommandhas_setting","title":"function <code>DereferenceCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-dereferencecommandinvoke","title":"function <code>DereferenceCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-dereferencecommandpost_load","title":"function <code>DereferenceCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-dereferencecommandpprint_dereferenced","title":"function <code>DereferenceCommand.pprint_dereferenced</code>","text":"<pre><code>pprint_dereferenced(addr: int, idx: int, base_offset: int = 0) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-dereferencecommandpre_load","title":"function <code>DereferenceCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-dereferencecommandusage","title":"function <code>DereferenceCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-detailregisterscommand","title":"class <code>DetailRegistersCommand</code>","text":"<p>Display full details on one, many or all registers value from current architecture. </p> <p></p>"},{"location":"api/gef/#function-detailregisterscommand__init__","title":"function <code>DetailRegistersCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-detailregisterscommandsettings","title":"property DetailRegistersCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-detailregisterscommandadd_setting","title":"function <code>DetailRegistersCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-detailregisterscommanddel_setting","title":"function <code>DetailRegistersCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-detailregisterscommandwrapper","title":"function <code>DetailRegistersCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-detailregisterscommandget_setting","title":"function <code>DetailRegistersCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-detailregisterscommandhas_setting","title":"function <code>DetailRegistersCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-detailregisterscommandinvoke","title":"function <code>DetailRegistersCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-detailregisterscommandpost_load","title":"function <code>DetailRegistersCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-detailregisterscommandpre_load","title":"function <code>DetailRegistersCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-detailregisterscommandusage","title":"function <code>DetailRegistersCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-disablecontextoutputcontext","title":"class <code>DisableContextOutputContext</code>","text":""},{"location":"api/gef/#class-elf","title":"class <code>Elf</code>","text":"<p>Basic ELF parsing. Ref:  - http://www.skyfree.org/linux/references/ELF_Format.pdf  - https://refspecs.linuxfoundation.org/elf/elfspec_ppc.pdf  - https://refspecs.linuxfoundation.org/ELF/ppc64/PPC-elf64abi.html </p> <p></p>"},{"location":"api/gef/#function-elf__init__","title":"function <code>Elf.__init__</code>","text":"<pre><code>__init__(path: str | pathlib.Path) \u2192 None\n</code></pre> <p>Instantiate an ELF object. A valid ELF must be provided, or an exception will be thrown. </p>"},{"location":"api/gef/#property-elfchecksec","title":"property Elf.checksec","text":"<p>Check the security property of the ELF binary. The following properties are:  - Canary  - NX  - PIE  - Fortify  - Partial/Full RelRO. Return a dict() with the different keys mentioned above, and the boolean associated whether the protection was found. </p>"},{"location":"api/gef/#property-elfentry_point","title":"property Elf.entry_point","text":""},{"location":"api/gef/#function-elfis_valid","title":"function <code>Elf.is_valid</code>","text":"<pre><code>is_valid(path: pathlib.Path) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-elfread","title":"function <code>Elf.read</code>","text":"<pre><code>read(size: int) \u2192 bytes\n</code></pre>"},{"location":"api/gef/#function-elfread_and_unpack","title":"function <code>Elf.read_and_unpack</code>","text":"<pre><code>read_and_unpack(fmt: str) \u2192 tuple[Any, ...]\n</code></pre>"},{"location":"api/gef/#function-elfseek","title":"function <code>Elf.seek</code>","text":"<pre><code>seek(off: int) \u2192 None\n</code></pre>"},{"location":"api/gef/#class-elfinfocommand","title":"class <code>ElfInfoCommand</code>","text":"<p>Display a limited subset of ELF header information. If no argument is provided, the command will show information about the current ELF being debugged. </p> <p></p>"},{"location":"api/gef/#function-elfinfocommand__init__","title":"function <code>ElfInfoCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-elfinfocommandsettings","title":"property ElfInfoCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-elfinfocommandadd_setting","title":"function <code>ElfInfoCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-elfinfocommanddel_setting","title":"function <code>ElfInfoCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-elfinfocommandwrapper","title":"function <code>ElfInfoCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-elfinfocommandget_setting","title":"function <code>ElfInfoCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-elfinfocommandhas_setting","title":"function <code>ElfInfoCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-elfinfocommandinvoke","title":"function <code>ElfInfoCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-elfinfocommandpost_load","title":"function <code>ElfInfoCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-elfinfocommandpre_load","title":"function <code>ElfInfoCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-elfinfocommandusage","title":"function <code>ElfInfoCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-endianness","title":"class <code>Endianness</code>","text":""},{"location":"api/gef/#class-entrybreakbreakpoint","title":"class <code>EntryBreakBreakpoint</code>","text":"<p>Breakpoint used internally to stop execution at the most convenient entry point. </p> <p></p>"},{"location":"api/gef/#function-entrybreakbreakpoint__init__","title":"function <code>EntryBreakBreakpoint.__init__</code>","text":"<pre><code>__init__(location: str) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-entrybreakbreakpointstop","title":"function <code>EntryBreakBreakpoint.stop</code>","text":"<pre><code>stop() \u2192 bool\n</code></pre>"},{"location":"api/gef/#class-entrypointbreakcommand","title":"class <code>EntryPointBreakCommand</code>","text":"<p>Tries to find best entry point and sets a temporary breakpoint on it. The command will test for well-known symbols for entry points, such as <code>main</code>, <code>_main</code>, <code>__libc_start_main</code>, etc. defined by the setting <code>entrypoint_symbols</code>. </p> <p></p>"},{"location":"api/gef/#function-entrypointbreakcommand__init__","title":"function <code>EntryPointBreakCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-entrypointbreakcommandsettings","title":"property EntryPointBreakCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-entrypointbreakcommandadd_setting","title":"function <code>EntryPointBreakCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-entrypointbreakcommanddel_setting","title":"function <code>EntryPointBreakCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-entrypointbreakcommanddo_invoke","title":"function <code>EntryPointBreakCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-entrypointbreakcommandget_setting","title":"function <code>EntryPointBreakCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-entrypointbreakcommandhas_setting","title":"function <code>EntryPointBreakCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-entrypointbreakcommandinvoke","title":"function <code>EntryPointBreakCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-entrypointbreakcommandpost_load","title":"function <code>EntryPointBreakCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-entrypointbreakcommandpre_load","title":"function <code>EntryPointBreakCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-entrypointbreakcommandset_init_tbreak","title":"function <code>EntryPointBreakCommand.set_init_tbreak</code>","text":"<pre><code>set_init_tbreak(addr: int) \u2192 EntryBreakBreakpoint\n</code></pre>"},{"location":"api/gef/#function-entrypointbreakcommandset_init_tbreak_pie","title":"function <code>EntryPointBreakCommand.set_init_tbreak_pie</code>","text":"<pre><code>set_init_tbreak_pie(addr: int, argv: list[str]) \u2192 EntryBreakBreakpoint\n</code></pre>"},{"location":"api/gef/#function-entrypointbreakcommandusage","title":"function <code>EntryPointBreakCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-externalstructuremanager","title":"class <code>ExternalStructureManager</code>","text":""},{"location":"api/gef/#function-externalstructuremanager__init__","title":"function <code>ExternalStructureManager.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-externalstructuremanagermodules","title":"property ExternalStructureManager.modules","text":""},{"location":"api/gef/#property-externalstructuremanagerpath","title":"property ExternalStructureManager.path","text":""},{"location":"api/gef/#property-externalstructuremanagerstructures","title":"property ExternalStructureManager.structures","text":""},{"location":"api/gef/#handler-externalstructuremanagerfind","title":"handler ExternalStructureManager.find","text":""},{"location":"api/gef/#function-externalstructuremanagerclear_caches","title":"function <code>ExternalStructureManager.clear_caches</code>","text":"<pre><code>clear_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-fileformat","title":"class <code>FileFormat</code>","text":""},{"location":"api/gef/#function-fileformat__init__","title":"function <code>FileFormat.__init__</code>","text":"<pre><code>__init__(path: str | pathlib.Path) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-fileformatis_valid","title":"function <code>FileFormat.is_valid</code>","text":"<pre><code>is_valid(_: pathlib.Path) \u2192 bool\n</code></pre>"},{"location":"api/gef/#class-fileformatsection","title":"class <code>FileFormatSection</code>","text":""},{"location":"api/gef/#class-flagscommand","title":"class <code>FlagsCommand</code>","text":"<p>Edit flags in a human friendly way. </p> <p></p>"},{"location":"api/gef/#function-flagscommand__init__","title":"function <code>FlagsCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-flagscommandsettings","title":"property FlagsCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-flagscommandadd_setting","title":"function <code>FlagsCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-flagscommanddel_setting","title":"function <code>FlagsCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-flagscommanddo_invoke","title":"function <code>FlagsCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-flagscommandget_setting","title":"function <code>FlagsCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-flagscommandhas_setting","title":"function <code>FlagsCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-flagscommandinvoke","title":"function <code>FlagsCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-flagscommandpost_load","title":"function <code>FlagsCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-flagscommandpre_load","title":"function <code>FlagsCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-flagscommandusage","title":"function <code>FlagsCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-formatstringbreakpoint","title":"class <code>FormatStringBreakpoint</code>","text":"<p>Inspect stack for format string. </p> <p></p>"},{"location":"api/gef/#function-formatstringbreakpoint__init__","title":"function <code>FormatStringBreakpoint.__init__</code>","text":"<pre><code>__init__(spec: str, num_args: int) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-formatstringbreakpointstop","title":"function <code>FormatStringBreakpoint.stop</code>","text":"<pre><code>stop() \u2192 bool\n</code></pre>"},{"location":"api/gef/#class-formatstringsearchcommand","title":"class <code>FormatStringSearchCommand</code>","text":"<p>Exploitable format-string helper: this command will set up specific breakpoints at well-known dangerous functions (printf, snprintf, etc.), and check if the pointer holding the format string is writable, and therefore susceptible to format string attacks if an attacker can control its content. </p> <p></p>"},{"location":"api/gef/#function-formatstringsearchcommand__init__","title":"function <code>FormatStringSearchCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-formatstringsearchcommandsettings","title":"property FormatStringSearchCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-formatstringsearchcommandadd_setting","title":"function <code>FormatStringSearchCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-formatstringsearchcommanddel_setting","title":"function <code>FormatStringSearchCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-formatstringsearchcommanddo_invoke","title":"function <code>FormatStringSearchCommand.do_invoke</code>","text":"<pre><code>do_invoke(_: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-formatstringsearchcommandget_setting","title":"function <code>FormatStringSearchCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-formatstringsearchcommandhas_setting","title":"function <code>FormatStringSearchCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-formatstringsearchcommandinvoke","title":"function <code>FormatStringSearchCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-formatstringsearchcommandpost_load","title":"function <code>FormatStringSearchCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-formatstringsearchcommandpre_load","title":"function <code>FormatStringSearchCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-formatstringsearchcommandusage","title":"function <code>FormatStringSearchCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-gdbremovereadlinefinder","title":"class <code>GdbRemoveReadlineFinder</code>","text":""},{"location":"api/gef/#function-gdbremovereadlinefinderfind_module","title":"function <code>GdbRemoveReadlineFinder.find_module</code>","text":"<pre><code>find_module(fullname, path=None)\n</code></pre>"},{"location":"api/gef/#function-gdbremovereadlinefinderload_module","title":"function <code>GdbRemoveReadlineFinder.load_module</code>","text":"<pre><code>load_module(fullname)\n</code></pre>"},{"location":"api/gef/#class-gef","title":"class <code>Gef</code>","text":"<p>The GEF root class, which serves as a entrypoint for all the debugging session attributes (architecture, memory, settings, etc.). </p> <p></p>"},{"location":"api/gef/#function-gef__init__","title":"function <code>Gef.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefreinitialize_managers","title":"function <code>Gef.reinitialize_managers</code>","text":"<pre><code>reinitialize_managers() \u2192 None\n</code></pre> <p>Reinitialize the managers. Avoid calling this function directly, using <code>pi reset()</code> is preferred </p> <p></p>"},{"location":"api/gef/#function-gefreset_caches","title":"function <code>Gef.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre> <p>Recursively clean the cache of all the managers. Avoid calling this function directly, using <code>reset-cache</code> is preferred </p> <p></p>"},{"location":"api/gef/#function-gefsetup","title":"function <code>Gef.setup</code>","text":"<pre><code>setup() \u2192 None\n</code></pre> <p>Setup initialize the runtime setup, which may require for the <code>gef</code> to be not None. </p>"},{"location":"api/gef/#class-gefalias","title":"class <code>GefAlias</code>","text":"<p>Simple aliasing wrapper because GDB doesn't do what it should. </p> <p></p>"},{"location":"api/gef/#function-gefalias__init__","title":"function <code>GefAlias.__init__</code>","text":"<pre><code>__init__(\n    alias: str,\n    command: str,\n    completer_class: int = 0,\n    command_class: int = -1\n) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefaliasinvoke","title":"function <code>GefAlias.invoke</code>","text":"<pre><code>invoke(args: Any, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefaliaslookup_command","title":"function <code>GefAlias.lookup_command</code>","text":"<pre><code>lookup_command(cmd: str) \u2192 tuple[str, __main__.GenericCommand] | None\n</code></pre>"},{"location":"api/gef/#class-gefcommand","title":"class <code>GefCommand</code>","text":"<p>GEF main command: view all new commands by typing <code>gef</code>. </p> <p></p>"},{"location":"api/gef/#function-gefcommand__init__","title":"function <code>GefCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-gefcommandloaded_command_names","title":"property GefCommand.loaded_command_names","text":""},{"location":"api/gef/#property-gefcommandloaded_commands","title":"property GefCommand.loaded_commands","text":"<p><code>loaded_commands</code> is DEPRECATED and will be removed in the future.</p>"},{"location":"api/gef/#property-gefcommandloaded_functions","title":"property GefCommand.loaded_functions","text":"<p><code>loaded_functions</code> is DEPRECATED and will be removed in the future.</p>"},{"location":"api/gef/#property-gefcommandmissing_commands","title":"property GefCommand.missing_commands","text":"<p><code>missing_commands</code> is DEPRECATED and will be removed in the future.</p> <p></p>"},{"location":"api/gef/#function-gefcommandadd_context_layout_mapping","title":"function <code>GefCommand.add_context_layout_mapping</code>","text":"<pre><code>add_context_layout_mapping(\n    current_pane_name: str,\n    display_pane_function: Callable,\n    pane_title_function: Callable,\n    condition: Optional[Callable]\n) \u2192 None\n</code></pre> <p>Add a new context layout mapping. </p> <p></p>"},{"location":"api/gef/#function-gefcommandadd_context_pane","title":"function <code>GefCommand.add_context_pane</code>","text":"<pre><code>add_context_pane(\n    pane_name: str,\n    display_pane_function: Callable,\n    pane_title_function: Callable,\n    condition: Optional[Callable]\n) \u2192 None\n</code></pre> <p>Add a new context pane to ContextCommand. </p> <p></p>"},{"location":"api/gef/#function-gefcommandinvoke","title":"function <code>GefCommand.invoke</code>","text":"<pre><code>invoke(args: Any, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefcommandload","title":"function <code>GefCommand.load</code>","text":"<pre><code>load() \u2192 None\n</code></pre> <p>Load all the commands and functions defined by GEF into GDB. </p> <p></p>"},{"location":"api/gef/#function-gefcommandload_extra_plugins","title":"function <code>GefCommand.load_extra_plugins</code>","text":"<pre><code>load_extra_plugins(extra_plugins_dir: pathlib.Path | None = None) \u2192 int\n</code></pre> <p>Load the plugins from the gef-extras setting. Returns the number of new plugins added. </p> <p></p>"},{"location":"api/gef/#function-gefcommandsetup","title":"function <code>GefCommand.setup</code>","text":"<pre><code>setup() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefcommandshow_banner","title":"function <code>GefCommand.show_banner</code>","text":"<pre><code>show_banner() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-gefconfigcommand","title":"class <code>GefConfigCommand</code>","text":"<p>GEF configuration sub-command This command will help set/view GEF settings for the current debugging session. It is possible to make those changes permanent by running <code>gef save</code> (refer to this command help), and/or restore previously saved settings by running <code>gef restore</code> (refer help). </p> <p></p>"},{"location":"api/gef/#function-gefconfigcommand__init__","title":"function <code>GefConfigCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefconfigcommandcomplete","title":"function <code>GefConfigCommand.complete</code>","text":"<pre><code>complete(text: str, word: str) \u2192 list[str]\n</code></pre>"},{"location":"api/gef/#function-gefconfigcommandinvoke","title":"function <code>GefConfigCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefconfigcommandprint_setting","title":"function <code>GefConfigCommand.print_setting</code>","text":"<pre><code>print_setting(plugin_name: str, verbose: bool = False) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefconfigcommandprint_settings","title":"function <code>GefConfigCommand.print_settings</code>","text":"<pre><code>print_settings() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefconfigcommandset_setting","title":"function <code>GefConfigCommand.set_setting</code>","text":"<pre><code>set_setting(argv: list[str]) \u2192 bool\n</code></pre>"},{"location":"api/gef/#class-geffunctionscommand","title":"class <code>GefFunctionsCommand</code>","text":"<p>List the convenience functions provided by GEF. </p> <p></p>"},{"location":"api/gef/#function-geffunctionscommand__init__","title":"function <code>GefFunctionsCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-geffunctionscommandsettings","title":"property GefFunctionsCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-geffunctionscommandadd_setting","title":"function <code>GefFunctionsCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-geffunctionscommanddel_setting","title":"function <code>GefFunctionsCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-geffunctionscommanddo_invoke","title":"function <code>GefFunctionsCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-geffunctionscommandget_setting","title":"function <code>GefFunctionsCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-geffunctionscommandhas_setting","title":"function <code>GefFunctionsCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-geffunctionscommandinvoke","title":"function <code>GefFunctionsCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-geffunctionscommandpost_load","title":"function <code>GefFunctionsCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-geffunctionscommandpre_load","title":"function <code>GefFunctionsCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-geffunctionscommandusage","title":"function <code>GefFunctionsCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-gefheapmanager","title":"class <code>GefHeapManager</code>","text":"<p>Class managing session heap. </p> <p></p>"},{"location":"api/gef/#function-gefheapmanager__init__","title":"function <code>GefHeapManager.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-gefheapmanagerarenas","title":"property GefHeapManager.arenas","text":""},{"location":"api/gef/#property-gefheapmanagerbase_address","title":"property GefHeapManager.base_address","text":""},{"location":"api/gef/#property-gefheapmanagerchunks","title":"property GefHeapManager.chunks","text":""},{"location":"api/gef/#property-gefheapmanagermain_arena","title":"property GefHeapManager.main_arena","text":""},{"location":"api/gef/#property-gefheapmanagermalloc_alignment","title":"property GefHeapManager.malloc_alignment","text":""},{"location":"api/gef/#property-gefheapmanagermin_chunk_size","title":"property GefHeapManager.min_chunk_size","text":""},{"location":"api/gef/#property-gefheapmanagerselected_arena","title":"property GefHeapManager.selected_arena","text":""},{"location":"api/gef/#handler-gefheapmanagerfind_main_arena_addr","title":"handler GefHeapManager.find_main_arena_addr","text":""},{"location":"api/gef/#function-gefheapmanagercsize2tidx","title":"function <code>GefHeapManager.csize2tidx</code>","text":"<pre><code>csize2tidx(size: int) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-gefheapmanagermalloc_align_address","title":"function <code>GefHeapManager.malloc_align_address</code>","text":"<pre><code>malloc_align_address(address: int) \u2192 int\n</code></pre> <p>Align addresses according to glibc's MALLOC_ALIGNMENT. See also Issue #689 on Github </p> <p></p>"},{"location":"api/gef/#function-gefheapmanagerreset_caches","title":"function <code>GefHeapManager.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefheapmanagertidx2size","title":"function <code>GefHeapManager.tidx2size</code>","text":"<pre><code>tidx2size(idx: int) \u2192 int\n</code></pre>"},{"location":"api/gef/#class-gefhelpcommand","title":"class <code>GefHelpCommand</code>","text":"<p>GEF help sub-command. </p> <p></p>"},{"location":"api/gef/#function-gefhelpcommand__init__","title":"function <code>GefHelpCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefhelpcommandinvoke","title":"function <code>GefHelpCommand.invoke</code>","text":"<pre><code>invoke(args: Any, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#class-gefinstallextrascriptcommand","title":"class <code>GefInstallExtraScriptCommand</code>","text":"<p><code>gef install</code> command: installs one or more scripts from the <code>gef-extras</code> script repo. Note that the command doesn't check for external dependencies the script(s) might require. </p> <p></p>"},{"location":"api/gef/#function-gefinstallextrascriptcommand__init__","title":"function <code>GefInstallExtraScriptCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefinstallextrascriptcommandinvoke","title":"function <code>GefInstallExtraScriptCommand.invoke</code>","text":"<pre><code>invoke(argv: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#class-geflibcmanager","title":"class <code>GefLibcManager</code>","text":"<p>Class managing everything libc-related (except heap). </p> <p></p>"},{"location":"api/gef/#function-geflibcmanager__init__","title":"function <code>GefLibcManager.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-geflibcmanagerversion","title":"property GefLibcManager.version","text":""},{"location":"api/gef/#handler-geflibcmanagerfind_libc_version","title":"handler GefLibcManager.find_libc_version","text":""},{"location":"api/gef/#function-geflibcmanagerreset_caches","title":"function <code>GefLibcManager.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre> <p>Reset the LRU-cached attributes </p>"},{"location":"api/gef/#class-gefmanager","title":"class <code>GefManager</code>","text":""},{"location":"api/gef/#function-gefmanagerreset_caches","title":"function <code>GefManager.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre> <p>Reset the LRU-cached attributes </p>"},{"location":"api/gef/#class-gefmemorymanager","title":"class <code>GefMemoryManager</code>","text":"<p>Class that manages memory access for gef. </p> <p></p>"},{"location":"api/gef/#function-gefmemorymanager__init__","title":"function <code>GefMemoryManager.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-gefmemorymanagermaps","title":"property GefMemoryManager.maps","text":""},{"location":"api/gef/#function-gefmemorymanagerappend","title":"function <code>GefMemoryManager.append</code>","text":"<pre><code>append(section: __main__.Section)\n</code></pre>"},{"location":"api/gef/#function-gefmemorymanagerparse_gdb_info_proc_maps","title":"function <code>GefMemoryManager.parse_gdb_info_proc_maps</code>","text":"<pre><code>parse_gdb_info_proc_maps() \u2192 Generator[__main__.Section, NoneType, NoneType]\n</code></pre> <p>Get the memory mapping from GDB's command <code>info proc mappings</code>. </p> <p></p>"},{"location":"api/gef/#function-gefmemorymanagerparse_gdb_maintenance_info_sections","title":"function <code>GefMemoryManager.parse_gdb_maintenance_info_sections</code>","text":"<pre><code>parse_gdb_maintenance_info_sections() \u2192 Generator[__main__.Section, NoneType, NoneType]\n</code></pre> <p>Get the memory mapping from GDB's command <code>maintenance info sections</code> (limited info). In some cases (i.e. coredumps), the memory info collected by <code>info proc sections</code> is insufficient. </p> <p></p>"},{"location":"api/gef/#function-gefmemorymanagerparse_info_mem","title":"function <code>GefMemoryManager.parse_info_mem</code>","text":"<pre><code>parse_info_mem()\n</code></pre> <p>Get the memory mapping from GDB's command <code>info mem</code>. This can be provided by certain gdbserver implementations. </p> <p></p>"},{"location":"api/gef/#function-gefmemorymanagerparse_monitor_info_mem","title":"function <code>GefMemoryManager.parse_monitor_info_mem</code>","text":"<pre><code>parse_monitor_info_mem() \u2192 Generator[__main__.Section, NoneType, NoneType]\n</code></pre> <p>Get the memory mapping from GDB's command <code>monitor info mem</code> This can raise an exception, which the memory manager takes to mean that this method does not work to get a map. </p> <p></p>"},{"location":"api/gef/#function-gefmemorymanagerparse_procfs_maps","title":"function <code>GefMemoryManager.parse_procfs_maps</code>","text":"<pre><code>parse_procfs_maps() \u2192 Generator[__main__.Section, NoneType, NoneType]\n</code></pre> <p>Get the memory mapping from procfs. </p> <p></p>"},{"location":"api/gef/#function-gefmemorymanagerread","title":"function <code>GefMemoryManager.read</code>","text":"<pre><code>read(addr: int, length: int = 16) \u2192 bytes\n</code></pre> <p>Return a <code>length</code> long byte array with the copy of the process memory at <code>addr</code>. </p> <p></p>"},{"location":"api/gef/#function-gefmemorymanagerread_ascii_string","title":"function <code>GefMemoryManager.read_ascii_string</code>","text":"<pre><code>read_ascii_string(address: int) \u2192 str | None\n</code></pre> <p>Read an ASCII string from memory </p> <p></p>"},{"location":"api/gef/#function-gefmemorymanagerread_cstring","title":"function <code>GefMemoryManager.read_cstring</code>","text":"<pre><code>read_cstring(\n    address: int,\n    max_length: int = 50,\n    encoding: str | None = None\n) \u2192 str\n</code></pre> <p>Return a C-string read from memory. </p> <p></p>"},{"location":"api/gef/#function-gefmemorymanagerread_integer","title":"function <code>GefMemoryManager.read_integer</code>","text":"<pre><code>read_integer(addr: int) \u2192 int\n</code></pre> <p>Return an integer read from memory. </p> <p></p>"},{"location":"api/gef/#function-gefmemorymanagerreset_caches","title":"function <code>GefMemoryManager.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefmemorymanagerwrite","title":"function <code>GefMemoryManager.write</code>","text":"<pre><code>write(address: int, buffer: ByteString, length: int | None = None) \u2192 None\n</code></pre> <p>Write <code>buffer</code> at address <code>address</code>. </p>"},{"location":"api/gef/#class-gefmissingcommand","title":"class <code>GefMissingCommand</code>","text":"<p>GEF missing sub-command Display the GEF commands that could not be loaded, along with the reason of why they could not be loaded. </p> <p></p>"},{"location":"api/gef/#function-gefmissingcommand__init__","title":"function <code>GefMissingCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefmissingcommandinvoke","title":"function <code>GefMissingCommand.invoke</code>","text":"<pre><code>invoke(args: Any, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#class-gefremotesessionmanager","title":"class <code>GefRemoteSessionManager</code>","text":"<p>Class for managing remote sessions with GEF. It will create a temporary environment designed to clone the remote one. </p> <p></p>"},{"location":"api/gef/#function-gefremotesessionmanager__init__","title":"function <code>GefRemoteSessionManager.__init__</code>","text":"<pre><code>__init__(\n    host: str,\n    port: int,\n    pid: int = -1,\n    qemu: pathlib.Path | None = None\n) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-gefremotesessionmanagerauxiliary_vector","title":"property GefRemoteSessionManager.auxiliary_vector","text":""},{"location":"api/gef/#property-gefremotesessionmanagercanary","title":"property GefRemoteSessionManager.canary","text":"<p>Return a tuple of the canary address and value, read from the canonical location if supported by the architecture. Otherwise, read from the auxiliary vector. </p>"},{"location":"api/gef/#property-gefremotesessionmanagercwd","title":"property GefRemoteSessionManager.cwd","text":""},{"location":"api/gef/#property-gefremotesessionmanagerfile","title":"property GefRemoteSessionManager.file","text":"<p>Path to the file being debugged as seen by the remote endpoint. </p>"},{"location":"api/gef/#property-gefremotesessionmanagerlfile","title":"property GefRemoteSessionManager.lfile","text":"<p>Local path to the file being debugged. </p>"},{"location":"api/gef/#property-gefremotesessionmanagermaps","title":"property GefRemoteSessionManager.maps","text":""},{"location":"api/gef/#property-gefremotesessionmanagermode","title":"property GefRemoteSessionManager.mode","text":""},{"location":"api/gef/#property-gefremotesessionmanageroriginal_canary","title":"property GefRemoteSessionManager.original_canary","text":"<p>Return a tuple of the initial canary address and value, read from the auxiliary vector. </p>"},{"location":"api/gef/#property-gefremotesessionmanageros","title":"property GefRemoteSessionManager.os","text":"<p>Return the current OS. </p>"},{"location":"api/gef/#property-gefremotesessionmanagerpagesize","title":"property GefRemoteSessionManager.pagesize","text":"<p>Get the system page size </p>"},{"location":"api/gef/#property-gefremotesessionmanagerpid","title":"property GefRemoteSessionManager.pid","text":"<p>Return the PID of the target process. </p>"},{"location":"api/gef/#property-gefremotesessionmanagerroot","title":"property GefRemoteSessionManager.root","text":""},{"location":"api/gef/#property-gefremotesessionmanagertarget","title":"property GefRemoteSessionManager.target","text":""},{"location":"api/gef/#function-gefremotesessionmanagerclose","title":"function <code>GefRemoteSessionManager.close</code>","text":"<pre><code>close() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefremotesessionmanagerconnect","title":"function <code>GefRemoteSessionManager.connect</code>","text":"<pre><code>connect(pid: int) \u2192 bool\n</code></pre> <p>Connect to remote target. If in extended mode, also attach to the given PID. </p> <p></p>"},{"location":"api/gef/#function-gefremotesessionmanagerremote_objfile_event_handler","title":"function <code>GefRemoteSessionManager.remote_objfile_event_handler</code>","text":"<pre><code>remote_objfile_event_handler(evt: 'gdb.NewObjFileEvent') \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefremotesessionmanagerreset_caches","title":"function <code>GefRemoteSessionManager.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefremotesessionmanagersetup","title":"function <code>GefRemoteSessionManager.setup</code>","text":"<pre><code>setup() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-gefremotesessionmanagersync","title":"function <code>GefRemoteSessionManager.sync</code>","text":"<pre><code>sync(src: str, dst: str | None = None) \u2192 bool\n</code></pre> <p>Copy the <code>src</code> into the temporary chroot. If <code>dst</code> is provided, that path will be used instead of <code>src</code>. </p>"},{"location":"api/gef/#class-gefrestorecommand","title":"class <code>GefRestoreCommand</code>","text":"<p>GEF restore sub-command. Loads settings from file '~/.gef.rc' and apply them to the configuration of GEF. </p> <p></p>"},{"location":"api/gef/#function-gefrestorecommand__init__","title":"function <code>GefRestoreCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefrestorecommandinvoke","title":"function <code>GefRestoreCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefrestorecommandreload","title":"function <code>GefRestoreCommand.reload</code>","text":"<pre><code>reload(quiet: bool)\n</code></pre>"},{"location":"api/gef/#class-gefruncommand","title":"class <code>GefRunCommand</code>","text":"<p>Override GDB run commands with the context from GEF. Simple wrapper for GDB run command to use arguments set from <code>gef set args</code>. </p> <p></p>"},{"location":"api/gef/#function-gefruncommand__init__","title":"function <code>GefRunCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefruncommandinvoke","title":"function <code>GefRunCommand.invoke</code>","text":"<pre><code>invoke(args: Any, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#class-gefsavecommand","title":"class <code>GefSaveCommand</code>","text":"<p>GEF save sub-command. Saves the current configuration of GEF to disk (by default in file '~/.gef.rc'). </p> <p></p>"},{"location":"api/gef/#function-gefsavecommand__init__","title":"function <code>GefSaveCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefsavecommandinvoke","title":"function <code>GefSaveCommand.invoke</code>","text":"<pre><code>invoke(args: Any, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#class-gefsessionmanager","title":"class <code>GefSessionManager</code>","text":"<p>Class managing the runtime properties of GEF.  </p> <p></p>"},{"location":"api/gef/#function-gefsessionmanager__init__","title":"function <code>GefSessionManager.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-gefsessionmanagerauxiliary_vector","title":"property GefSessionManager.auxiliary_vector","text":""},{"location":"api/gef/#property-gefsessionmanagercanary","title":"property GefSessionManager.canary","text":"<p>Return a tuple of the canary address and value, read from the canonical location if supported by the architecture. Otherwise, read from the auxiliary vector. </p>"},{"location":"api/gef/#property-gefsessionmanagercwd","title":"property GefSessionManager.cwd","text":""},{"location":"api/gef/#property-gefsessionmanagerfile","title":"property GefSessionManager.file","text":"<p>Return a Path object of the target process. </p>"},{"location":"api/gef/#property-gefsessionmanagermaps","title":"property GefSessionManager.maps","text":"<p>Returns the Path to the procfs entry for the memory mapping. </p>"},{"location":"api/gef/#property-gefsessionmanageroriginal_canary","title":"property GefSessionManager.original_canary","text":"<p>Return a tuple of the initial canary address and value, read from the auxiliary vector. </p>"},{"location":"api/gef/#property-gefsessionmanageros","title":"property GefSessionManager.os","text":"<p>Return the current OS. </p>"},{"location":"api/gef/#property-gefsessionmanagerpagesize","title":"property GefSessionManager.pagesize","text":"<p>Get the system page size </p>"},{"location":"api/gef/#property-gefsessionmanagerpid","title":"property GefSessionManager.pid","text":"<p>Return the PID of the target process. </p>"},{"location":"api/gef/#property-gefsessionmanagerroot","title":"property GefSessionManager.root","text":"<p>Returns the path to the process's root directory. </p> <p></p>"},{"location":"api/gef/#function-gefsessionmanagerreset_caches","title":"function <code>GefSessionManager.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-gefsetcommand","title":"class <code>GefSetCommand</code>","text":"<p>Override GDB set commands with the context from GEF. </p> <p></p>"},{"location":"api/gef/#function-gefsetcommand__init__","title":"function <code>GefSetCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefsetcommandinvoke","title":"function <code>GefSetCommand.invoke</code>","text":"<pre><code>invoke(args: Any, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#class-gefsetting","title":"class <code>GefSetting</code>","text":"<p>Basic class for storing gef settings as objects </p> <p></p>"},{"location":"api/gef/#function-gefsetting__init__","title":"function <code>GefSetting.__init__</code>","text":"<pre><code>__init__(\n    value: Any,\n    cls: type | None = None,\n    description: str | None = None,\n    hooks: dict[str, list[typing.Callable]] | None = None\n) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefsettingadd_hook","title":"function <code>GefSetting.add_hook</code>","text":"<pre><code>add_hook(access: str, funcs: list[typing.Callable])\n</code></pre>"},{"location":"api/gef/#function-gefsettingcreate_folder_tree","title":"function <code>GefSetting.create_folder_tree</code>","text":"<pre><code>create_folder_tree(value: pathlib.Path)\n</code></pre>"},{"location":"api/gef/#function-gefsettingmust_exist","title":"function <code>GefSetting.must_exist</code>","text":"<pre><code>must_exist(value: pathlib.Path)\n</code></pre>"},{"location":"api/gef/#function-gefsettingno_spaces","title":"function <code>GefSetting.no_spaces</code>","text":"<pre><code>no_spaces(value: pathlib.Path)\n</code></pre>"},{"location":"api/gef/#class-gefsettingsmanager","title":"class <code>GefSettingsManager</code>","text":"<p>GefSettings acts as a dict where the global settings are stored and can be read, written or deleted as any other dict. For instance, to read a specific command setting: <code>gef.config[mycommand.mysetting]</code> </p> <p></p>"},{"location":"api/gef/#function-gefsettingsmanagerraw_entry","title":"function <code>GefSettingsManager.raw_entry</code>","text":"<pre><code>raw_entry(name: str) \u2192 GefSetting\n</code></pre>"},{"location":"api/gef/#class-gefthemecommand","title":"class <code>GefThemeCommand</code>","text":"<p>Customize GEF appearance. </p> <p></p>"},{"location":"api/gef/#function-gefthemecommand__init__","title":"function <code>GefThemeCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-gefthemecommandsettings","title":"property GefThemeCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-gefthemecommandadd_setting","title":"function <code>GefThemeCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-gefthemecommanddel_setting","title":"function <code>GefThemeCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-gefthemecommanddo_invoke","title":"function <code>GefThemeCommand.do_invoke</code>","text":"<pre><code>do_invoke(args: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefthemecommandget_setting","title":"function <code>GefThemeCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-gefthemecommandhas_setting","title":"function <code>GefThemeCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-gefthemecommandinvoke","title":"function <code>GefThemeCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefthemecommandpost_load","title":"function <code>GefThemeCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefthemecommandpre_load","title":"function <code>GefThemeCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefthemecommandusage","title":"function <code>GefThemeCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-geftmuxsetup","title":"class <code>GefTmuxSetup</code>","text":"<p>Setup a comfortable tmux debugging environment. </p> <p></p>"},{"location":"api/gef/#function-geftmuxsetup__init__","title":"function <code>GefTmuxSetup.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-geftmuxsetupinvoke","title":"function <code>GefTmuxSetup.invoke</code>","text":"<pre><code>invoke(args: Any, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-geftmuxsetupscreen_setup","title":"function <code>GefTmuxSetup.screen_setup</code>","text":"<pre><code>screen_setup() \u2192 None\n</code></pre> <p>Hackish equivalent of the tmux_setup() function for screen. </p> <p></p>"},{"location":"api/gef/#function-geftmuxsetuptmux_setup","title":"function <code>GefTmuxSetup.tmux_setup</code>","text":"<pre><code>tmux_setup() \u2192 None\n</code></pre> <p>Prepare the tmux environment by vertically splitting the current pane, and forcing the context to be redirected there. </p>"},{"location":"api/gef/#class-gefuimanager","title":"class <code>GefUiManager</code>","text":"<p>Class managing UI settings. </p> <p></p>"},{"location":"api/gef/#function-gefuimanager__init__","title":"function <code>GefUiManager.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gefuimanagerreset_caches","title":"function <code>GefUiManager.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre> <p>Reset the LRU-cached attributes </p>"},{"location":"api/gef/#class-genericarchitecture","title":"class <code>GenericArchitecture</code>","text":""},{"location":"api/gef/#property-genericarchitectureendianness","title":"property GenericArchitecture.endianness","text":""},{"location":"api/gef/#property-genericarchitecturefp","title":"property GenericArchitecture.fp","text":""},{"location":"api/gef/#property-genericarchitecturepc","title":"property GenericArchitecture.pc","text":""},{"location":"api/gef/#property-genericarchitectureptrsize","title":"property GenericArchitecture.ptrsize","text":""},{"location":"api/gef/#property-genericarchitectureregisters","title":"property GenericArchitecture.registers","text":""},{"location":"api/gef/#property-genericarchitecturesp","title":"property GenericArchitecture.sp","text":""},{"location":"api/gef/#function-genericarchitecturecanary_address","title":"function <code>GenericArchitecture.canary_address</code>","text":"<pre><code>canary_address() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-genericarchitectureflag_register_to_human","title":"function <code>GenericArchitecture.flag_register_to_human</code>","text":"<pre><code>flag_register_to_human(val: int | None = None) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-genericarchitectureget_ith_parameter","title":"function <code>GenericArchitecture.get_ith_parameter</code>","text":"<pre><code>get_ith_parameter(i: int, in_func: bool = True) \u2192 tuple[str, int | None]\n</code></pre> <p>Retrieves the correct parameter used for the current function call. </p> <p></p>"},{"location":"api/gef/#function-genericarchitectureget_ra","title":"function <code>GenericArchitecture.get_ra</code>","text":"<pre><code>get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 int | None\n</code></pre>"},{"location":"api/gef/#function-genericarchitectureis_branch_taken","title":"function <code>GenericArchitecture.is_branch_taken</code>","text":"<pre><code>is_branch_taken(insn: __main__.Instruction) \u2192 tuple[bool, str]\n</code></pre>"},{"location":"api/gef/#function-genericarchitectureis_call","title":"function <code>GenericArchitecture.is_call</code>","text":"<pre><code>is_call(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-genericarchitectureis_conditional_branch","title":"function <code>GenericArchitecture.is_conditional_branch</code>","text":"<pre><code>is_conditional_branch(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-genericarchitectureis_ret","title":"function <code>GenericArchitecture.is_ret</code>","text":"<pre><code>is_ret(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-genericarchitecturemprotect_asm","title":"function <code>GenericArchitecture.mprotect_asm</code>","text":"<pre><code>mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-genericarchitectureregister","title":"function <code>GenericArchitecture.register</code>","text":"<pre><code>register(name: str) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-genericarchitecturereset_caches","title":"function <code>GenericArchitecture.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-genericarchitecturesupports_gdb_arch","title":"function <code>GenericArchitecture.supports_gdb_arch</code>","text":"<pre><code>supports_gdb_arch(gdb_arch: str) \u2192 bool | None\n</code></pre> <p>If implemented by a child <code>Architecture</code>, this function dictates if the current class supports the loaded ELF file (which can be accessed via <code>gef.binary</code>). This callback function will override any assumption made by GEF to determine the architecture. </p>"},{"location":"api/gef/#class-genericcommand","title":"class <code>GenericCommand</code>","text":"<p>This is an abstract class for invoking commands, should not be instantiated. </p> <p></p>"},{"location":"api/gef/#function-genericcommand__init__","title":"function <code>GenericCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-genericcommandsettings","title":"property GenericCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-genericcommandadd_setting","title":"function <code>GenericCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-genericcommanddel_setting","title":"function <code>GenericCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-genericcommanddo_invoke","title":"function <code>GenericCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-genericcommandget_setting","title":"function <code>GenericCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-genericcommandhas_setting","title":"function <code>GenericCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-genericcommandinvoke","title":"function <code>GenericCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-genericcommandpost_load","title":"function <code>GenericCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-genericcommandpre_load","title":"function <code>GenericCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-genericcommandusage","title":"function <code>GenericCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-genericfunction","title":"class <code>GenericFunction</code>","text":"<p>This is an abstract class for invoking convenience functions, should not be instantiated. </p> <p></p>"},{"location":"api/gef/#function-genericfunction__init__","title":"function <code>GenericFunction.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-genericfunctionarg_to_long","title":"function <code>GenericFunction.arg_to_long</code>","text":"<pre><code>arg_to_long(args: Any, index: int, default: int = 0) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-genericfunctiondo_invoke","title":"function <code>GenericFunction.do_invoke</code>","text":"<pre><code>do_invoke(args: Any) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-genericfunctioninvoke","title":"function <code>GenericFunction.invoke</code>","text":"<pre><code>invoke(*args: Any) \u2192 int\n</code></pre>"},{"location":"api/gef/#class-glibcarena","title":"class <code>GlibcArena</code>","text":"<p>Glibc arena class </p> <p></p>"},{"location":"api/gef/#function-glibcarena__init__","title":"function <code>GlibcArena.__init__</code>","text":"<pre><code>__init__(addr: str) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-glibcarenaaddr","title":"property GlibcArena.addr","text":""},{"location":"api/gef/#property-glibcarenaaddress","title":"property GlibcArena.address","text":""},{"location":"api/gef/#property-glibcarenaattached_threads","title":"property GlibcArena.attached_threads","text":""},{"location":"api/gef/#property-glibcarenabinmap","title":"property GlibcArena.binmap","text":""},{"location":"api/gef/#property-glibcarenabins","title":"property GlibcArena.bins","text":""},{"location":"api/gef/#property-glibcarenafastbinsy","title":"property GlibcArena.fastbinsY","text":""},{"location":"api/gef/#property-glibcarenalast_remainder","title":"property GlibcArena.last_remainder","text":""},{"location":"api/gef/#property-glibcarenamax_system_mem","title":"property GlibcArena.max_system_mem","text":""},{"location":"api/gef/#property-glibcarenanext","title":"property GlibcArena.next","text":""},{"location":"api/gef/#property-glibcarenanext_free","title":"property GlibcArena.next_free","text":""},{"location":"api/gef/#property-glibcarenasizeof","title":"property GlibcArena.sizeof","text":""},{"location":"api/gef/#property-glibcarenasystem_mem","title":"property GlibcArena.system_mem","text":""},{"location":"api/gef/#property-glibcarenatop","title":"property GlibcArena.top","text":""},{"location":"api/gef/#function-glibcarenabin","title":"function <code>GlibcArena.bin</code>","text":"<pre><code>bin(i: int) \u2192 tuple[int, int]\n</code></pre>"},{"location":"api/gef/#function-glibcarenabin_at","title":"function <code>GlibcArena.bin_at</code>","text":"<pre><code>bin_at(i) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-glibcarenafastbin","title":"function <code>GlibcArena.fastbin</code>","text":"<pre><code>fastbin(i: int) \u2192 GlibcFastChunk | None\n</code></pre> <p>Return head chunk in fastbinsY[i]. </p> <p></p>"},{"location":"api/gef/#function-glibcarenaget_heap_for_ptr","title":"function <code>GlibcArena.get_heap_for_ptr</code>","text":"<pre><code>get_heap_for_ptr(ptr: int) \u2192 int\n</code></pre> <p>Find the corresponding heap for a given pointer (int). See https://github.com/bminor/glibc/blob/glibc-2.34/malloc/arena.c#L129 </p> <p></p>"},{"location":"api/gef/#function-glibcarenaget_heap_info_list","title":"function <code>GlibcArena.get_heap_info_list</code>","text":"<pre><code>get_heap_info_list() \u2192 list[__main__.GlibcHeapInfo] | None\n</code></pre>"},{"location":"api/gef/#function-glibcarenaheap_addr","title":"function <code>GlibcArena.heap_addr</code>","text":"<pre><code>heap_addr(allow_unaligned: bool = False) \u2192 int | None\n</code></pre>"},{"location":"api/gef/#function-glibcarenais_main_arena","title":"function <code>GlibcArena.is_main_arena</code>","text":"<pre><code>is_main_arena() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-glibcarenamalloc_state_t","title":"function <code>GlibcArena.malloc_state_t</code>","text":"<pre><code>malloc_state_t() \u2192 Type[_ctypes.Structure]\n</code></pre>"},{"location":"api/gef/#function-glibcarenareset","title":"function <code>GlibcArena.reset</code>","text":"<pre><code>reset()\n</code></pre>"},{"location":"api/gef/#function-glibcarenaverify","title":"function <code>GlibcArena.verify</code>","text":"<pre><code>verify(addr: int) \u2192 bool\n</code></pre> <p>Verify that the address matches a possible valid GlibcArena </p>"},{"location":"api/gef/#class-glibcchunk","title":"class <code>GlibcChunk</code>","text":"<p>Glibc chunk class. The default behavior (from_base=False) is to interpret the data starting at the memory address pointed to as the chunk data. Setting from_base to True instead treats that data as the chunk header. Ref:  https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/. </p> <p></p>"},{"location":"api/gef/#function-glibcchunk__init__","title":"function <code>GlibcChunk.__init__</code>","text":"<pre><code>__init__(\n    addr: int,\n    from_base: bool = False,\n    allow_unaligned: bool = True\n) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-glibcchunkbk","title":"property GlibcChunk.bk","text":""},{"location":"api/gef/#property-glibcchunkbk_nextsize","title":"property GlibcChunk.bk_nextsize","text":""},{"location":"api/gef/#property-glibcchunkfd","title":"property GlibcChunk.fd","text":""},{"location":"api/gef/#property-glibcchunkfd_nextsize","title":"property GlibcChunk.fd_nextsize","text":""},{"location":"api/gef/#property-glibcchunkflags","title":"property GlibcChunk.flags","text":""},{"location":"api/gef/#property-glibcchunkprev_size","title":"property GlibcChunk.prev_size","text":""},{"location":"api/gef/#property-glibcchunksize","title":"property GlibcChunk.size","text":""},{"location":"api/gef/#property-glibcchunkusable_size","title":"property GlibcChunk.usable_size","text":""},{"location":"api/gef/#function-glibcchunkget_next_chunk","title":"function <code>GlibcChunk.get_next_chunk</code>","text":"<pre><code>get_next_chunk(allow_unaligned: bool = False) \u2192 GlibcChunk\n</code></pre>"},{"location":"api/gef/#function-glibcchunkget_next_chunk_addr","title":"function <code>GlibcChunk.get_next_chunk_addr</code>","text":"<pre><code>get_next_chunk_addr() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-glibcchunkget_prev_chunk_size","title":"function <code>GlibcChunk.get_prev_chunk_size</code>","text":"<pre><code>get_prev_chunk_size() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-glibcchunkget_usable_size","title":"function <code>GlibcChunk.get_usable_size</code>","text":"<pre><code>get_usable_size() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-glibcchunkhas_m_bit","title":"function <code>GlibcChunk.has_m_bit</code>","text":"<pre><code>has_m_bit() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-glibcchunkhas_n_bit","title":"function <code>GlibcChunk.has_n_bit</code>","text":"<pre><code>has_n_bit() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-glibcchunkhas_p_bit","title":"function <code>GlibcChunk.has_p_bit</code>","text":"<pre><code>has_p_bit() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-glibcchunkis_used","title":"function <code>GlibcChunk.is_used</code>","text":"<pre><code>is_used() \u2192 bool\n</code></pre> <p>Check if the current block is used by:  - checking the M bit is true  - or checking that next chunk PREV_INUSE flag is true </p> <p></p>"},{"location":"api/gef/#function-glibcchunkmalloc_chunk_t","title":"function <code>GlibcChunk.malloc_chunk_t</code>","text":"<pre><code>malloc_chunk_t() \u2192 Type[_ctypes.Structure]\n</code></pre>"},{"location":"api/gef/#function-glibcchunkpsprint","title":"function <code>GlibcChunk.psprint</code>","text":"<pre><code>psprint() \u2192 str\n</code></pre>"},{"location":"api/gef/#function-glibcchunkreset","title":"function <code>GlibcChunk.reset</code>","text":"<pre><code>reset()\n</code></pre>"},{"location":"api/gef/#function-glibcchunkresolve_type","title":"function <code>GlibcChunk.resolve_type</code>","text":"<pre><code>resolve_type() \u2192 str\n</code></pre>"},{"location":"api/gef/#class-glibcfastchunk","title":"class <code>GlibcFastChunk</code>","text":""},{"location":"api/gef/#function-glibcfastchunk__init__","title":"function <code>GlibcFastChunk.__init__</code>","text":"<pre><code>__init__(\n    addr: int,\n    from_base: bool = False,\n    allow_unaligned: bool = True\n) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-glibcfastchunkbk","title":"property GlibcFastChunk.bk","text":""},{"location":"api/gef/#property-glibcfastchunkbk_nextsize","title":"property GlibcFastChunk.bk_nextsize","text":""},{"location":"api/gef/#property-glibcfastchunkfd","title":"property GlibcFastChunk.fd","text":""},{"location":"api/gef/#property-glibcfastchunkfd_nextsize","title":"property GlibcFastChunk.fd_nextsize","text":""},{"location":"api/gef/#property-glibcfastchunkflags","title":"property GlibcFastChunk.flags","text":""},{"location":"api/gef/#property-glibcfastchunkprev_size","title":"property GlibcFastChunk.prev_size","text":""},{"location":"api/gef/#property-glibcfastchunksize","title":"property GlibcFastChunk.size","text":""},{"location":"api/gef/#property-glibcfastchunkusable_size","title":"property GlibcFastChunk.usable_size","text":""},{"location":"api/gef/#function-glibcfastchunkget_next_chunk","title":"function <code>GlibcFastChunk.get_next_chunk</code>","text":"<pre><code>get_next_chunk(allow_unaligned: bool = False) \u2192 GlibcChunk\n</code></pre>"},{"location":"api/gef/#function-glibcfastchunkget_next_chunk_addr","title":"function <code>GlibcFastChunk.get_next_chunk_addr</code>","text":"<pre><code>get_next_chunk_addr() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-glibcfastchunkget_prev_chunk_size","title":"function <code>GlibcFastChunk.get_prev_chunk_size</code>","text":"<pre><code>get_prev_chunk_size() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-glibcfastchunkget_usable_size","title":"function <code>GlibcFastChunk.get_usable_size</code>","text":"<pre><code>get_usable_size() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-glibcfastchunkhas_m_bit","title":"function <code>GlibcFastChunk.has_m_bit</code>","text":"<pre><code>has_m_bit() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-glibcfastchunkhas_n_bit","title":"function <code>GlibcFastChunk.has_n_bit</code>","text":"<pre><code>has_n_bit() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-glibcfastchunkhas_p_bit","title":"function <code>GlibcFastChunk.has_p_bit</code>","text":"<pre><code>has_p_bit() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-glibcfastchunkis_used","title":"function <code>GlibcFastChunk.is_used</code>","text":"<pre><code>is_used() \u2192 bool\n</code></pre> <p>Check if the current block is used by:  - checking the M bit is true  - or checking that next chunk PREV_INUSE flag is true </p> <p></p>"},{"location":"api/gef/#function-glibcfastchunkmalloc_chunk_t","title":"function <code>GlibcFastChunk.malloc_chunk_t</code>","text":"<pre><code>malloc_chunk_t() \u2192 Type[_ctypes.Structure]\n</code></pre>"},{"location":"api/gef/#function-glibcfastchunkprotect_ptr","title":"function <code>GlibcFastChunk.protect_ptr</code>","text":"<pre><code>protect_ptr(pos: int, pointer: int) \u2192 int\n</code></pre> <p>https://elixir.bootlin.com/glibc/glibc-2.32/source/malloc/malloc.c#L339 </p> <p></p>"},{"location":"api/gef/#function-glibcfastchunkpsprint","title":"function <code>GlibcFastChunk.psprint</code>","text":"<pre><code>psprint() \u2192 str\n</code></pre>"},{"location":"api/gef/#function-glibcfastchunkreset","title":"function <code>GlibcFastChunk.reset</code>","text":"<pre><code>reset()\n</code></pre>"},{"location":"api/gef/#function-glibcfastchunkresolve_type","title":"function <code>GlibcFastChunk.resolve_type</code>","text":"<pre><code>resolve_type() \u2192 str\n</code></pre>"},{"location":"api/gef/#function-glibcfastchunkreveal_ptr","title":"function <code>GlibcFastChunk.reveal_ptr</code>","text":"<pre><code>reveal_ptr(pointer: int) \u2192 int\n</code></pre> <p>https://elixir.bootlin.com/glibc/glibc-2.32/source/malloc/malloc.c#L341 </p>"},{"location":"api/gef/#class-glibcheaparenacommand","title":"class <code>GlibcHeapArenaCommand</code>","text":"<p>Display information on a heap chunk. </p> <p></p>"},{"location":"api/gef/#function-glibcheaparenacommand__init__","title":"function <code>GlibcHeapArenaCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-glibcheaparenacommandsettings","title":"property GlibcHeapArenaCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-glibcheaparenacommandadd_setting","title":"function <code>GlibcHeapArenaCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheaparenacommanddel_setting","title":"function <code>GlibcHeapArenaCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheaparenacommanddo_invoke","title":"function <code>GlibcHeapArenaCommand.do_invoke</code>","text":"<pre><code>do_invoke(_: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheaparenacommandget_setting","title":"function <code>GlibcHeapArenaCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheaparenacommandhas_setting","title":"function <code>GlibcHeapArenaCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheaparenacommandinvoke","title":"function <code>GlibcHeapArenaCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheaparenacommandpost_load","title":"function <code>GlibcHeapArenaCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheaparenacommandpre_load","title":"function <code>GlibcHeapArenaCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheaparenacommandusage","title":"function <code>GlibcHeapArenaCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-glibcheaparenasummary","title":"class <code>GlibcHeapArenaSummary</code>","text":""},{"location":"api/gef/#function-glibcheaparenasummary__init__","title":"function <code>GlibcHeapArenaSummary.__init__</code>","text":"<pre><code>__init__(resolve_type=False) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheaparenasummaryprint","title":"function <code>GlibcHeapArenaSummary.print</code>","text":"<pre><code>print() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheaparenasummaryprocess_chunk","title":"function <code>GlibcHeapArenaSummary.process_chunk</code>","text":"<pre><code>process_chunk(chunk: __main__.GlibcChunk) \u2192 None\n</code></pre>"},{"location":"api/gef/#class-glibcheapbinscommand","title":"class <code>GlibcHeapBinsCommand</code>","text":"<p>Display information on the bins on an arena (default: main_arena). See https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1123. </p> <p></p>"},{"location":"api/gef/#function-glibcheapbinscommand__init__","title":"function <code>GlibcHeapBinsCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-glibcheapbinscommandsettings","title":"property GlibcHeapBinsCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-glibcheapbinscommandadd_setting","title":"function <code>GlibcHeapBinsCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapbinscommanddel_setting","title":"function <code>GlibcHeapBinsCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapbinscommanddo_invoke","title":"function <code>GlibcHeapBinsCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapbinscommandget_setting","title":"function <code>GlibcHeapBinsCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapbinscommandhas_setting","title":"function <code>GlibcHeapBinsCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapbinscommandinvoke","title":"function <code>GlibcHeapBinsCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapbinscommandpost_load","title":"function <code>GlibcHeapBinsCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapbinscommandpprint_bin","title":"function <code>GlibcHeapBinsCommand.pprint_bin</code>","text":"<pre><code>pprint_bin(arena_addr: str, index: int, _type: str = '') \u2192 int\n</code></pre>"},{"location":"api/gef/#function-glibcheapbinscommandpre_load","title":"function <code>GlibcHeapBinsCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapbinscommandusage","title":"function <code>GlibcHeapBinsCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-glibcheapchunkcommand","title":"class <code>GlibcHeapChunkCommand</code>","text":"<p>Display information on a heap chunk. See https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1123. </p> <p></p>"},{"location":"api/gef/#function-glibcheapchunkcommand__init__","title":"function <code>GlibcHeapChunkCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-glibcheapchunkcommandsettings","title":"property GlibcHeapChunkCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-glibcheapchunkcommandadd_setting","title":"function <code>GlibcHeapChunkCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapchunkcommanddel_setting","title":"function <code>GlibcHeapChunkCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapchunkcommandwrapper","title":"function <code>GlibcHeapChunkCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-glibcheapchunkcommandget_setting","title":"function <code>GlibcHeapChunkCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapchunkcommandhas_setting","title":"function <code>GlibcHeapChunkCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapchunkcommandinvoke","title":"function <code>GlibcHeapChunkCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapchunkcommandpost_load","title":"function <code>GlibcHeapChunkCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapchunkcommandpre_load","title":"function <code>GlibcHeapChunkCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapchunkcommandusage","title":"function <code>GlibcHeapChunkCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-glibcheapchunksummary","title":"class <code>GlibcHeapChunkSummary</code>","text":""},{"location":"api/gef/#function-glibcheapchunksummary__init__","title":"function <code>GlibcHeapChunkSummary.__init__</code>","text":"<pre><code>__init__(desc='')\n</code></pre>"},{"location":"api/gef/#function-glibcheapchunksummaryprocess_chunk","title":"function <code>GlibcHeapChunkSummary.process_chunk</code>","text":"<pre><code>process_chunk(chunk: __main__.GlibcChunk) \u2192 None\n</code></pre>"},{"location":"api/gef/#class-glibcheapchunkscommand","title":"class <code>GlibcHeapChunksCommand</code>","text":"<p>Display all heap chunks for the current arena. As an optional argument the base address of a different arena can be passed </p> <p></p>"},{"location":"api/gef/#function-glibcheapchunkscommand__init__","title":"function <code>GlibcHeapChunksCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-glibcheapchunkscommandsettings","title":"property GlibcHeapChunksCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-glibcheapchunkscommandadd_setting","title":"function <code>GlibcHeapChunksCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapchunkscommanddel_setting","title":"function <code>GlibcHeapChunksCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapchunkscommandwrapper","title":"function <code>GlibcHeapChunksCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-glibcheapchunkscommanddump_chunks_arena","title":"function <code>GlibcHeapChunksCommand.dump_chunks_arena</code>","text":"<pre><code>dump_chunks_arena(\n    arena: __main__.GlibcArena,\n    ctx: __main__.GlibcHeapWalkContext\n) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapchunkscommanddump_chunks_heap","title":"function <code>GlibcHeapChunksCommand.dump_chunks_heap</code>","text":"<pre><code>dump_chunks_heap(\n    start: int,\n    end: int,\n    arena: __main__.GlibcArena,\n    ctx: __main__.GlibcHeapWalkContext\n) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-glibcheapchunkscommandget_setting","title":"function <code>GlibcHeapChunksCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapchunkscommandhas_setting","title":"function <code>GlibcHeapChunksCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapchunkscommandinvoke","title":"function <code>GlibcHeapChunksCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapchunkscommandpost_load","title":"function <code>GlibcHeapChunksCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapchunkscommandpre_load","title":"function <code>GlibcHeapChunksCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapchunkscommandshould_process_chunk","title":"function <code>GlibcHeapChunksCommand.should_process_chunk</code>","text":"<pre><code>should_process_chunk(\n    chunk: __main__.GlibcChunk,\n    ctx: __main__.GlibcHeapWalkContext\n) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-glibcheapchunkscommandusage","title":"function <code>GlibcHeapChunksCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-glibcheapcommand","title":"class <code>GlibcHeapCommand</code>","text":"<p>Base command to get information about the Glibc heap structure. </p> <p></p>"},{"location":"api/gef/#function-glibcheapcommand__init__","title":"function <code>GlibcHeapCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-glibcheapcommandsettings","title":"property GlibcHeapCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-glibcheapcommandadd_setting","title":"function <code>GlibcHeapCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapcommanddel_setting","title":"function <code>GlibcHeapCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapcommanddo_invoke","title":"function <code>GlibcHeapCommand.do_invoke</code>","text":"<pre><code>do_invoke(_: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapcommandget_setting","title":"function <code>GlibcHeapCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapcommandhas_setting","title":"function <code>GlibcHeapCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapcommandinvoke","title":"function <code>GlibcHeapCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapcommandpost_load","title":"function <code>GlibcHeapCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapcommandpre_load","title":"function <code>GlibcHeapCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapcommandusage","title":"function <code>GlibcHeapCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-glibcheapfastbinsycommand","title":"class <code>GlibcHeapFastbinsYCommand</code>","text":"<p>Display information on the fastbinsY on an arena (default: main_arena). See https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1123. </p> <p></p>"},{"location":"api/gef/#function-glibcheapfastbinsycommand__init__","title":"function <code>GlibcHeapFastbinsYCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-glibcheapfastbinsycommandsettings","title":"property GlibcHeapFastbinsYCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-glibcheapfastbinsycommandadd_setting","title":"function <code>GlibcHeapFastbinsYCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapfastbinsycommanddel_setting","title":"function <code>GlibcHeapFastbinsYCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapfastbinsycommandwrapper","title":"function <code>GlibcHeapFastbinsYCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-glibcheapfastbinsycommandget_setting","title":"function <code>GlibcHeapFastbinsYCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapfastbinsycommandhas_setting","title":"function <code>GlibcHeapFastbinsYCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapfastbinsycommandinvoke","title":"function <code>GlibcHeapFastbinsYCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapfastbinsycommandpost_load","title":"function <code>GlibcHeapFastbinsYCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapfastbinsycommandpre_load","title":"function <code>GlibcHeapFastbinsYCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapfastbinsycommandusage","title":"function <code>GlibcHeapFastbinsYCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-glibcheapinfo","title":"class <code>GlibcHeapInfo</code>","text":"<p>Glibc heap_info struct </p> <p></p>"},{"location":"api/gef/#function-glibcheapinfo__init__","title":"function <code>GlibcHeapInfo.__init__</code>","text":"<pre><code>__init__(addr: str | int) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-glibcheapinfoaddr","title":"property GlibcHeapInfo.addr","text":""},{"location":"api/gef/#property-glibcheapinfoaddress","title":"property GlibcHeapInfo.address","text":""},{"location":"api/gef/#property-glibcheapinfoheap_end","title":"property GlibcHeapInfo.heap_end","text":""},{"location":"api/gef/#property-glibcheapinfoheap_start","title":"property GlibcHeapInfo.heap_start","text":""},{"location":"api/gef/#property-glibcheapinfosizeof","title":"property GlibcHeapInfo.sizeof","text":""},{"location":"api/gef/#function-glibcheapinfoheap_info_t","title":"function <code>GlibcHeapInfo.heap_info_t</code>","text":"<pre><code>heap_info_t() \u2192 Type[_ctypes.Structure]\n</code></pre>"},{"location":"api/gef/#function-glibcheapinforeset","title":"function <code>GlibcHeapInfo.reset</code>","text":"<pre><code>reset()\n</code></pre>"},{"location":"api/gef/#class-glibcheaplargebinscommand","title":"class <code>GlibcHeapLargeBinsCommand</code>","text":"<p>Convenience command for viewing large bins. </p> <p></p>"},{"location":"api/gef/#function-glibcheaplargebinscommand__init__","title":"function <code>GlibcHeapLargeBinsCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-glibcheaplargebinscommandsettings","title":"property GlibcHeapLargeBinsCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-glibcheaplargebinscommandadd_setting","title":"function <code>GlibcHeapLargeBinsCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheaplargebinscommanddel_setting","title":"function <code>GlibcHeapLargeBinsCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheaplargebinscommandwrapper","title":"function <code>GlibcHeapLargeBinsCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-glibcheaplargebinscommandget_setting","title":"function <code>GlibcHeapLargeBinsCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheaplargebinscommandhas_setting","title":"function <code>GlibcHeapLargeBinsCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheaplargebinscommandinvoke","title":"function <code>GlibcHeapLargeBinsCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheaplargebinscommandpost_load","title":"function <code>GlibcHeapLargeBinsCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheaplargebinscommandpre_load","title":"function <code>GlibcHeapLargeBinsCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheaplargebinscommandusage","title":"function <code>GlibcHeapLargeBinsCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-glibcheapsetarenacommand","title":"class <code>GlibcHeapSetArenaCommand</code>","text":"<p>Set the address of the main_arena or the currently selected arena. </p> <p></p>"},{"location":"api/gef/#function-glibcheapsetarenacommand__init__","title":"function <code>GlibcHeapSetArenaCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-glibcheapsetarenacommandsettings","title":"property GlibcHeapSetArenaCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-glibcheapsetarenacommandadd_setting","title":"function <code>GlibcHeapSetArenaCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapsetarenacommanddel_setting","title":"function <code>GlibcHeapSetArenaCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapsetarenacommandwrapper","title":"function <code>GlibcHeapSetArenaCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-glibcheapsetarenacommandget_setting","title":"function <code>GlibcHeapSetArenaCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapsetarenacommandhas_setting","title":"function <code>GlibcHeapSetArenaCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapsetarenacommandinvoke","title":"function <code>GlibcHeapSetArenaCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapsetarenacommandpost_load","title":"function <code>GlibcHeapSetArenaCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapsetarenacommandpre_load","title":"function <code>GlibcHeapSetArenaCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapsetarenacommandusage","title":"function <code>GlibcHeapSetArenaCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-glibcheapsmallbinscommand","title":"class <code>GlibcHeapSmallBinsCommand</code>","text":"<p>Convenience command for viewing small bins. </p> <p></p>"},{"location":"api/gef/#function-glibcheapsmallbinscommand__init__","title":"function <code>GlibcHeapSmallBinsCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-glibcheapsmallbinscommandsettings","title":"property GlibcHeapSmallBinsCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-glibcheapsmallbinscommandadd_setting","title":"function <code>GlibcHeapSmallBinsCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapsmallbinscommanddel_setting","title":"function <code>GlibcHeapSmallBinsCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapsmallbinscommandwrapper","title":"function <code>GlibcHeapSmallBinsCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-glibcheapsmallbinscommandget_setting","title":"function <code>GlibcHeapSmallBinsCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapsmallbinscommandhas_setting","title":"function <code>GlibcHeapSmallBinsCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapsmallbinscommandinvoke","title":"function <code>GlibcHeapSmallBinsCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapsmallbinscommandpost_load","title":"function <code>GlibcHeapSmallBinsCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapsmallbinscommandpre_load","title":"function <code>GlibcHeapSmallBinsCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapsmallbinscommandusage","title":"function <code>GlibcHeapSmallBinsCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-glibcheaptcachebinscommand","title":"class <code>GlibcHeapTcachebinsCommand</code>","text":"<p>Display information on the Tcachebins on an arena (default: main_arena). See https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc. </p> <p></p>"},{"location":"api/gef/#function-glibcheaptcachebinscommand__init__","title":"function <code>GlibcHeapTcachebinsCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-glibcheaptcachebinscommandsettings","title":"property GlibcHeapTcachebinsCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-glibcheaptcachebinscommandadd_setting","title":"function <code>GlibcHeapTcachebinsCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheaptcachebinscommandcheck_thread_ids","title":"function <code>GlibcHeapTcachebinsCommand.check_thread_ids</code>","text":"<pre><code>check_thread_ids(tids: list[int]) \u2192 list[int]\n</code></pre> <p>Return the subset of tids that are currently valid. </p> <p></p>"},{"location":"api/gef/#function-glibcheaptcachebinscommanddel_setting","title":"function <code>GlibcHeapTcachebinsCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheaptcachebinscommanddo_invoke","title":"function <code>GlibcHeapTcachebinsCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheaptcachebinscommandfind_tcache","title":"function <code>GlibcHeapTcachebinsCommand.find_tcache</code>","text":"<pre><code>find_tcache() \u2192 int\n</code></pre> <p>Return the location of the current thread's tcache. </p> <p></p>"},{"location":"api/gef/#function-glibcheaptcachebinscommandget_setting","title":"function <code>GlibcHeapTcachebinsCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheaptcachebinscommandhas_setting","title":"function <code>GlibcHeapTcachebinsCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheaptcachebinscommandinvoke","title":"function <code>GlibcHeapTcachebinsCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheaptcachebinscommandpost_load","title":"function <code>GlibcHeapTcachebinsCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheaptcachebinscommandpre_load","title":"function <code>GlibcHeapTcachebinsCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheaptcachebinscommandtcachebin","title":"function <code>GlibcHeapTcachebinsCommand.tcachebin</code>","text":"<pre><code>tcachebin(\n    tcache_base: int,\n    i: int\n) \u2192 tuple[__main__.GlibcTcacheChunk | None, int]\n</code></pre> <p>Return the head chunk in tcache[i] and the number of chunks in the bin. </p> <p></p>"},{"location":"api/gef/#function-glibcheaptcachebinscommandusage","title":"function <code>GlibcHeapTcachebinsCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-glibcheapunsortedbinscommand","title":"class <code>GlibcHeapUnsortedBinsCommand</code>","text":"<p>Display information on the Unsorted Bins of an arena (default: main_arena). See: https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1689. </p> <p></p>"},{"location":"api/gef/#function-glibcheapunsortedbinscommand__init__","title":"function <code>GlibcHeapUnsortedBinsCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-glibcheapunsortedbinscommandsettings","title":"property GlibcHeapUnsortedBinsCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-glibcheapunsortedbinscommandadd_setting","title":"function <code>GlibcHeapUnsortedBinsCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapunsortedbinscommanddel_setting","title":"function <code>GlibcHeapUnsortedBinsCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapunsortedbinscommandwrapper","title":"function <code>GlibcHeapUnsortedBinsCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-glibcheapunsortedbinscommandget_setting","title":"function <code>GlibcHeapUnsortedBinsCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapunsortedbinscommandhas_setting","title":"function <code>GlibcHeapUnsortedBinsCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-glibcheapunsortedbinscommandinvoke","title":"function <code>GlibcHeapUnsortedBinsCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapunsortedbinscommandpost_load","title":"function <code>GlibcHeapUnsortedBinsCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapunsortedbinscommandpre_load","title":"function <code>GlibcHeapUnsortedBinsCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-glibcheapunsortedbinscommandusage","title":"function <code>GlibcHeapUnsortedBinsCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-glibcheapwalkcontext","title":"class <code>GlibcHeapWalkContext</code>","text":""},{"location":"api/gef/#function-glibcheapwalkcontext__init__","title":"function <code>GlibcHeapWalkContext.__init__</code>","text":"<pre><code>__init__(\n    print_arena: bool = False,\n    allow_unaligned: bool = False,\n    min_size: int = 0,\n    max_size: int = 0,\n    count: int = -1,\n    resolve_type: bool = False,\n    summary: bool = False\n) \u2192 None\n</code></pre>"},{"location":"api/gef/#class-glibctcachechunk","title":"class <code>GlibcTcacheChunk</code>","text":""},{"location":"api/gef/#function-glibctcachechunk__init__","title":"function <code>GlibcTcacheChunk.__init__</code>","text":"<pre><code>__init__(\n    addr: int,\n    from_base: bool = False,\n    allow_unaligned: bool = True\n) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-glibctcachechunkbk","title":"property GlibcTcacheChunk.bk","text":""},{"location":"api/gef/#property-glibctcachechunkbk_nextsize","title":"property GlibcTcacheChunk.bk_nextsize","text":""},{"location":"api/gef/#property-glibctcachechunkfd","title":"property GlibcTcacheChunk.fd","text":""},{"location":"api/gef/#property-glibctcachechunkfd_nextsize","title":"property GlibcTcacheChunk.fd_nextsize","text":""},{"location":"api/gef/#property-glibctcachechunkflags","title":"property GlibcTcacheChunk.flags","text":""},{"location":"api/gef/#property-glibctcachechunkprev_size","title":"property GlibcTcacheChunk.prev_size","text":""},{"location":"api/gef/#property-glibctcachechunksize","title":"property GlibcTcacheChunk.size","text":""},{"location":"api/gef/#property-glibctcachechunkusable_size","title":"property GlibcTcacheChunk.usable_size","text":""},{"location":"api/gef/#function-glibctcachechunkget_next_chunk","title":"function <code>GlibcTcacheChunk.get_next_chunk</code>","text":"<pre><code>get_next_chunk(allow_unaligned: bool = False) \u2192 GlibcChunk\n</code></pre>"},{"location":"api/gef/#function-glibctcachechunkget_next_chunk_addr","title":"function <code>GlibcTcacheChunk.get_next_chunk_addr</code>","text":"<pre><code>get_next_chunk_addr() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-glibctcachechunkget_prev_chunk_size","title":"function <code>GlibcTcacheChunk.get_prev_chunk_size</code>","text":"<pre><code>get_prev_chunk_size() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-glibctcachechunkget_usable_size","title":"function <code>GlibcTcacheChunk.get_usable_size</code>","text":"<pre><code>get_usable_size() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-glibctcachechunkhas_m_bit","title":"function <code>GlibcTcacheChunk.has_m_bit</code>","text":"<pre><code>has_m_bit() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-glibctcachechunkhas_n_bit","title":"function <code>GlibcTcacheChunk.has_n_bit</code>","text":"<pre><code>has_n_bit() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-glibctcachechunkhas_p_bit","title":"function <code>GlibcTcacheChunk.has_p_bit</code>","text":"<pre><code>has_p_bit() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-glibctcachechunkis_used","title":"function <code>GlibcTcacheChunk.is_used</code>","text":"<pre><code>is_used() \u2192 bool\n</code></pre> <p>Check if the current block is used by:  - checking the M bit is true  - or checking that next chunk PREV_INUSE flag is true </p> <p></p>"},{"location":"api/gef/#function-glibctcachechunkmalloc_chunk_t","title":"function <code>GlibcTcacheChunk.malloc_chunk_t</code>","text":"<pre><code>malloc_chunk_t() \u2192 Type[_ctypes.Structure]\n</code></pre>"},{"location":"api/gef/#function-glibctcachechunkprotect_ptr","title":"function <code>GlibcTcacheChunk.protect_ptr</code>","text":"<pre><code>protect_ptr(pos: int, pointer: int) \u2192 int\n</code></pre> <p>https://elixir.bootlin.com/glibc/glibc-2.32/source/malloc/malloc.c#L339 </p> <p></p>"},{"location":"api/gef/#function-glibctcachechunkpsprint","title":"function <code>GlibcTcacheChunk.psprint</code>","text":"<pre><code>psprint() \u2192 str\n</code></pre>"},{"location":"api/gef/#function-glibctcachechunkreset","title":"function <code>GlibcTcacheChunk.reset</code>","text":"<pre><code>reset()\n</code></pre>"},{"location":"api/gef/#function-glibctcachechunkresolve_type","title":"function <code>GlibcTcacheChunk.resolve_type</code>","text":"<pre><code>resolve_type() \u2192 str\n</code></pre>"},{"location":"api/gef/#function-glibctcachechunkreveal_ptr","title":"function <code>GlibcTcacheChunk.reveal_ptr</code>","text":"<pre><code>reveal_ptr(pointer: int) \u2192 int\n</code></pre> <p>https://elixir.bootlin.com/glibc/glibc-2.32/source/malloc/malloc.c#L341 </p>"},{"location":"api/gef/#class-gotbasefunction","title":"class <code>GotBaseFunction</code>","text":"<p>Return the current GOT base address plus the given offset. </p> <p></p>"},{"location":"api/gef/#function-gotbasefunction__init__","title":"function <code>GotBaseFunction.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gotbasefunctionarg_to_long","title":"function <code>GotBaseFunction.arg_to_long</code>","text":"<pre><code>arg_to_long(args: Any, index: int, default: int = 0) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-gotbasefunctiondo_invoke","title":"function <code>GotBaseFunction.do_invoke</code>","text":"<pre><code>do_invoke(args: list) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-gotbasefunctioninvoke","title":"function <code>GotBaseFunction.invoke</code>","text":"<pre><code>invoke(*args: Any) \u2192 int\n</code></pre>"},{"location":"api/gef/#class-gotcommand","title":"class <code>GotCommand</code>","text":"<p>Display current status of the got inside the process. </p> <p></p>"},{"location":"api/gef/#function-gotcommand__init__","title":"function <code>GotCommand.__init__</code>","text":"<pre><code>__init__()\n</code></pre>"},{"location":"api/gef/#property-gotcommandsettings","title":"property GotCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-gotcommandadd_setting","title":"function <code>GotCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-gotcommandbuild_line","title":"function <code>GotCommand.build_line</code>","text":"<pre><code>build_line(\n    name: str,\n    _path: str,\n    color: str,\n    address_val: int,\n    got_address: int\n) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-gotcommanddel_setting","title":"function <code>GotCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-gotcommandwrapper","title":"function <code>GotCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-gotcommandget_setting","title":"function <code>GotCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-gotcommandhas_setting","title":"function <code>GotCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-gotcommandinvoke","title":"function <code>GotCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gotcommandpost_load","title":"function <code>GotCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gotcommandpre_load","title":"function <code>GotCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gotcommandprint_got_for","title":"function <code>GotCommand.print_got_for</code>","text":"<pre><code>print_got_for(file: str, realpath: str, argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-gotcommandusage","title":"function <code>GotCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-heapanalysiscommand","title":"class <code>HeapAnalysisCommand</code>","text":"<p>Heap vulnerability analysis helper: this command aims to track dynamic heap allocation done through malloc()/free() to provide some insights on possible heap vulnerabilities. The following vulnerabilities are checked:  - NULL free  - Use-after-Free  - Double Free  - Heap overlap </p> <p></p>"},{"location":"api/gef/#function-heapanalysiscommand__init__","title":"function <code>HeapAnalysisCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-heapanalysiscommandsettings","title":"property HeapAnalysisCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-heapanalysiscommandadd_setting","title":"function <code>HeapAnalysisCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-heapanalysiscommandclean","title":"function <code>HeapAnalysisCommand.clean</code>","text":"<pre><code>clean(_: 'gdb.ExitedEvent') \u2192 None\n</code></pre>"},{"location":"api/gef/#function-heapanalysiscommanddel_setting","title":"function <code>HeapAnalysisCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-heapanalysiscommanddo_invoke","title":"function <code>HeapAnalysisCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-heapanalysiscommanddump_tracked_allocations","title":"function <code>HeapAnalysisCommand.dump_tracked_allocations</code>","text":"<pre><code>dump_tracked_allocations() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-heapanalysiscommandget_setting","title":"function <code>HeapAnalysisCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-heapanalysiscommandhas_setting","title":"function <code>HeapAnalysisCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-heapanalysiscommandinvoke","title":"function <code>HeapAnalysisCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-heapanalysiscommandpost_load","title":"function <code>HeapAnalysisCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-heapanalysiscommandpre_load","title":"function <code>HeapAnalysisCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-heapanalysiscommandsetup","title":"function <code>HeapAnalysisCommand.setup</code>","text":"<pre><code>setup() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-heapanalysiscommandusage","title":"function <code>HeapAnalysisCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-heapbasefunction","title":"class <code>HeapBaseFunction</code>","text":"<p>Return the current heap base address plus an optional offset. </p> <p></p>"},{"location":"api/gef/#function-heapbasefunction__init__","title":"function <code>HeapBaseFunction.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-heapbasefunctionarg_to_long","title":"function <code>HeapBaseFunction.arg_to_long</code>","text":"<pre><code>arg_to_long(args: Any, index: int, default: int = 0) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-heapbasefunctiondo_invoke","title":"function <code>HeapBaseFunction.do_invoke</code>","text":"<pre><code>do_invoke(args: list[str]) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-heapbasefunctioninvoke","title":"function <code>HeapBaseFunction.invoke</code>","text":"<pre><code>invoke(*args: Any) \u2192 int\n</code></pre>"},{"location":"api/gef/#class-hexdumpbytecommand","title":"class <code>HexdumpByteCommand</code>","text":"<p>Display SIZE lines of hexdump as BYTE from the memory location pointed by ADDRESS. </p> <p></p>"},{"location":"api/gef/#function-hexdumpbytecommand__init__","title":"function <code>HexdumpByteCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-hexdumpbytecommandsettings","title":"property HexdumpByteCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-hexdumpbytecommandadd_setting","title":"function <code>HexdumpByteCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpbytecommanddel_setting","title":"function <code>HexdumpByteCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpbytecommandwrapper","title":"function <code>HexdumpByteCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-hexdumpbytecommandget_setting","title":"function <code>HexdumpByteCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpbytecommandhas_setting","title":"function <code>HexdumpByteCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpbytecommandinvoke","title":"function <code>HexdumpByteCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-hexdumpbytecommandpost_load","title":"function <code>HexdumpByteCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-hexdumpbytecommandpre_load","title":"function <code>HexdumpByteCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-hexdumpbytecommandusage","title":"function <code>HexdumpByteCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-hexdumpcommand","title":"class <code>HexdumpCommand</code>","text":"<p>Display SIZE lines of hexdump from the memory location pointed by LOCATION. </p> <p></p>"},{"location":"api/gef/#function-hexdumpcommand__init__","title":"function <code>HexdumpCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-hexdumpcommandsettings","title":"property HexdumpCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-hexdumpcommandadd_setting","title":"function <code>HexdumpCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpcommanddel_setting","title":"function <code>HexdumpCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpcommandwrapper","title":"function <code>HexdumpCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-hexdumpcommandget_setting","title":"function <code>HexdumpCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpcommandhas_setting","title":"function <code>HexdumpCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpcommandinvoke","title":"function <code>HexdumpCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-hexdumpcommandpost_load","title":"function <code>HexdumpCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-hexdumpcommandpre_load","title":"function <code>HexdumpCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-hexdumpcommandusage","title":"function <code>HexdumpCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-hexdumpdwordcommand","title":"class <code>HexdumpDwordCommand</code>","text":"<p>Display SIZE lines of hexdump as DWORD from the memory location pointed by ADDRESS. </p> <p></p>"},{"location":"api/gef/#function-hexdumpdwordcommand__init__","title":"function <code>HexdumpDwordCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-hexdumpdwordcommandsettings","title":"property HexdumpDwordCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-hexdumpdwordcommandadd_setting","title":"function <code>HexdumpDwordCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpdwordcommanddel_setting","title":"function <code>HexdumpDwordCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpdwordcommandwrapper","title":"function <code>HexdumpDwordCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-hexdumpdwordcommandget_setting","title":"function <code>HexdumpDwordCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpdwordcommandhas_setting","title":"function <code>HexdumpDwordCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpdwordcommandinvoke","title":"function <code>HexdumpDwordCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-hexdumpdwordcommandpost_load","title":"function <code>HexdumpDwordCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-hexdumpdwordcommandpre_load","title":"function <code>HexdumpDwordCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-hexdumpdwordcommandusage","title":"function <code>HexdumpDwordCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-hexdumpqwordcommand","title":"class <code>HexdumpQwordCommand</code>","text":"<p>Display SIZE lines of hexdump as QWORD from the memory location pointed by ADDRESS. </p> <p></p>"},{"location":"api/gef/#function-hexdumpqwordcommand__init__","title":"function <code>HexdumpQwordCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-hexdumpqwordcommandsettings","title":"property HexdumpQwordCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-hexdumpqwordcommandadd_setting","title":"function <code>HexdumpQwordCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpqwordcommanddel_setting","title":"function <code>HexdumpQwordCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpqwordcommandwrapper","title":"function <code>HexdumpQwordCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-hexdumpqwordcommandget_setting","title":"function <code>HexdumpQwordCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpqwordcommandhas_setting","title":"function <code>HexdumpQwordCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpqwordcommandinvoke","title":"function <code>HexdumpQwordCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-hexdumpqwordcommandpost_load","title":"function <code>HexdumpQwordCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-hexdumpqwordcommandpre_load","title":"function <code>HexdumpQwordCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-hexdumpqwordcommandusage","title":"function <code>HexdumpQwordCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-hexdumpwordcommand","title":"class <code>HexdumpWordCommand</code>","text":"<p>Display SIZE lines of hexdump as WORD from the memory location pointed by ADDRESS. </p> <p></p>"},{"location":"api/gef/#function-hexdumpwordcommand__init__","title":"function <code>HexdumpWordCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-hexdumpwordcommandsettings","title":"property HexdumpWordCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-hexdumpwordcommandadd_setting","title":"function <code>HexdumpWordCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpwordcommanddel_setting","title":"function <code>HexdumpWordCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpwordcommandwrapper","title":"function <code>HexdumpWordCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-hexdumpwordcommandget_setting","title":"function <code>HexdumpWordCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpwordcommandhas_setting","title":"function <code>HexdumpWordCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-hexdumpwordcommandinvoke","title":"function <code>HexdumpWordCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-hexdumpwordcommandpost_load","title":"function <code>HexdumpWordCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-hexdumpwordcommandpre_load","title":"function <code>HexdumpWordCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-hexdumpwordcommandusage","title":"function <code>HexdumpWordCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-highlightaddcommand","title":"class <code>HighlightAddCommand</code>","text":"<p>Add a match to the highlight table. </p> <p></p>"},{"location":"api/gef/#function-highlightaddcommand__init__","title":"function <code>HighlightAddCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-highlightaddcommandsettings","title":"property HighlightAddCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-highlightaddcommandadd_setting","title":"function <code>HighlightAddCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightaddcommanddel_setting","title":"function <code>HighlightAddCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightaddcommanddo_invoke","title":"function <code>HighlightAddCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightaddcommandget_setting","title":"function <code>HighlightAddCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightaddcommandhas_setting","title":"function <code>HighlightAddCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightaddcommandinvoke","title":"function <code>HighlightAddCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightaddcommandpost_load","title":"function <code>HighlightAddCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightaddcommandpre_load","title":"function <code>HighlightAddCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightaddcommandusage","title":"function <code>HighlightAddCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-highlightclearcommand","title":"class <code>HighlightClearCommand</code>","text":"<p>Clear the highlight table, remove all matches. </p> <p></p>"},{"location":"api/gef/#function-highlightclearcommand__init__","title":"function <code>HighlightClearCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-highlightclearcommandsettings","title":"property HighlightClearCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-highlightclearcommandadd_setting","title":"function <code>HighlightClearCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightclearcommanddel_setting","title":"function <code>HighlightClearCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightclearcommanddo_invoke","title":"function <code>HighlightClearCommand.do_invoke</code>","text":"<pre><code>do_invoke(_: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightclearcommandget_setting","title":"function <code>HighlightClearCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightclearcommandhas_setting","title":"function <code>HighlightClearCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightclearcommandinvoke","title":"function <code>HighlightClearCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightclearcommandpost_load","title":"function <code>HighlightClearCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightclearcommandpre_load","title":"function <code>HighlightClearCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightclearcommandusage","title":"function <code>HighlightClearCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-highlightcommand","title":"class <code>HighlightCommand</code>","text":"<p>Highlight user-defined text matches in GEF output universally. </p> <p></p>"},{"location":"api/gef/#function-highlightcommand__init__","title":"function <code>HighlightCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-highlightcommandsettings","title":"property HighlightCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-highlightcommandadd_setting","title":"function <code>HighlightCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightcommanddel_setting","title":"function <code>HighlightCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightcommanddo_invoke","title":"function <code>HighlightCommand.do_invoke</code>","text":"<pre><code>do_invoke(_: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightcommandget_setting","title":"function <code>HighlightCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightcommandhas_setting","title":"function <code>HighlightCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightcommandinvoke","title":"function <code>HighlightCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightcommandpost_load","title":"function <code>HighlightCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightcommandpre_load","title":"function <code>HighlightCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightcommandusage","title":"function <code>HighlightCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-highlightlistcommand","title":"class <code>HighlightListCommand</code>","text":"<p>Show the current highlight table with matches to colors. </p> <p></p>"},{"location":"api/gef/#function-highlightlistcommand__init__","title":"function <code>HighlightListCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-highlightlistcommandsettings","title":"property HighlightListCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-highlightlistcommandadd_setting","title":"function <code>HighlightListCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightlistcommanddel_setting","title":"function <code>HighlightListCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightlistcommanddo_invoke","title":"function <code>HighlightListCommand.do_invoke</code>","text":"<pre><code>do_invoke(_: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightlistcommandget_setting","title":"function <code>HighlightListCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightlistcommandhas_setting","title":"function <code>HighlightListCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightlistcommandinvoke","title":"function <code>HighlightListCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightlistcommandpost_load","title":"function <code>HighlightListCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightlistcommandpre_load","title":"function <code>HighlightListCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightlistcommandprint_highlight_table","title":"function <code>HighlightListCommand.print_highlight_table</code>","text":"<pre><code>print_highlight_table() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightlistcommandusage","title":"function <code>HighlightListCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-highlightremovecommand","title":"class <code>HighlightRemoveCommand</code>","text":"<p>Remove a match in the highlight table. </p> <p></p>"},{"location":"api/gef/#function-highlightremovecommand__init__","title":"function <code>HighlightRemoveCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-highlightremovecommandsettings","title":"property HighlightRemoveCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-highlightremovecommandadd_setting","title":"function <code>HighlightRemoveCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightremovecommanddel_setting","title":"function <code>HighlightRemoveCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightremovecommanddo_invoke","title":"function <code>HighlightRemoveCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightremovecommandget_setting","title":"function <code>HighlightRemoveCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightremovecommandhas_setting","title":"function <code>HighlightRemoveCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-highlightremovecommandinvoke","title":"function <code>HighlightRemoveCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightremovecommandpost_load","title":"function <code>HighlightRemoveCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightremovecommandpre_load","title":"function <code>HighlightRemoveCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-highlightremovecommandusage","title":"function <code>HighlightRemoveCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-instruction","title":"class <code>Instruction</code>","text":"<p>GEF representation of a CPU instruction. </p> <p></p>"},{"location":"api/gef/#function-instruction__init__","title":"function <code>Instruction.__init__</code>","text":"<pre><code>__init__(\n    address: int,\n    location: str,\n    mnemo: str,\n    operands: list[str],\n    opcodes: bytes\n) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-instructionis_valid","title":"function <code>Instruction.is_valid</code>","text":"<pre><code>is_valid() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-instructionnext","title":"function <code>Instruction.next</code>","text":"<pre><code>next() \u2192 Instruction\n</code></pre>"},{"location":"api/gef/#function-instructionsize","title":"function <code>Instruction.size</code>","text":"<pre><code>size() \u2192 int\n</code></pre>"},{"location":"api/gef/#class-justsilentstopbreakpoint","title":"class <code>JustSilentStopBreakpoint</code>","text":"<p>When hit, this temporary breakpoint stop the execution. </p> <p></p>"},{"location":"api/gef/#function-justsilentstopbreakpoint__init__","title":"function <code>JustSilentStopBreakpoint.__init__</code>","text":"<pre><code>__init__(loc: str) \u2192 None\n</code></pre>"},{"location":"api/gef/#class-mips","title":"class <code>MIPS</code>","text":""},{"location":"api/gef/#property-mipsendianness","title":"property MIPS.endianness","text":""},{"location":"api/gef/#property-mipsfp","title":"property MIPS.fp","text":""},{"location":"api/gef/#property-mipspc","title":"property MIPS.pc","text":""},{"location":"api/gef/#property-mipsptrsize","title":"property MIPS.ptrsize","text":""},{"location":"api/gef/#property-mipsregisters","title":"property MIPS.registers","text":""},{"location":"api/gef/#property-mipssp","title":"property MIPS.sp","text":""},{"location":"api/gef/#function-mipscanary_address","title":"function <code>MIPS.canary_address</code>","text":"<pre><code>canary_address() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-mipsflag_register_to_human","title":"function <code>MIPS.flag_register_to_human</code>","text":"<pre><code>flag_register_to_human(val: int | None = None) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-mipsget_ith_parameter","title":"function <code>MIPS.get_ith_parameter</code>","text":"<pre><code>get_ith_parameter(i: int, in_func: bool = True) \u2192 tuple[str, int | None]\n</code></pre> <p>Retrieves the correct parameter used for the current function call. </p> <p></p>"},{"location":"api/gef/#function-mipsget_ra","title":"function <code>MIPS.get_ra</code>","text":"<pre><code>get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 int | None\n</code></pre>"},{"location":"api/gef/#function-mipsis_branch_taken","title":"function <code>MIPS.is_branch_taken</code>","text":"<pre><code>is_branch_taken(insn: __main__.Instruction) \u2192 tuple[bool, str]\n</code></pre>"},{"location":"api/gef/#function-mipsis_call","title":"function <code>MIPS.is_call</code>","text":"<pre><code>is_call(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-mipsis_conditional_branch","title":"function <code>MIPS.is_conditional_branch</code>","text":"<pre><code>is_conditional_branch(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-mipsis_ret","title":"function <code>MIPS.is_ret</code>","text":"<pre><code>is_ret(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-mipsmprotect_asm","title":"function <code>MIPS.mprotect_asm</code>","text":"<pre><code>mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-mipsregister","title":"function <code>MIPS.register</code>","text":"<pre><code>register(name: str) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-mipsreset_caches","title":"function <code>MIPS.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-mipssupports_gdb_arch","title":"function <code>MIPS.supports_gdb_arch</code>","text":"<pre><code>supports_gdb_arch(gdb_arch: str) \u2192 bool | None\n</code></pre> <p>If implemented by a child <code>Architecture</code>, this function dictates if the current class supports the loaded ELF file (which can be accessed via <code>gef.binary</code>). This callback function will override any assumption made by GEF to determine the architecture. </p>"},{"location":"api/gef/#class-mips64","title":"class <code>MIPS64</code>","text":""},{"location":"api/gef/#property-mips64endianness","title":"property MIPS64.endianness","text":""},{"location":"api/gef/#property-mips64fp","title":"property MIPS64.fp","text":""},{"location":"api/gef/#property-mips64pc","title":"property MIPS64.pc","text":""},{"location":"api/gef/#property-mips64ptrsize","title":"property MIPS64.ptrsize","text":""},{"location":"api/gef/#property-mips64registers","title":"property MIPS64.registers","text":""},{"location":"api/gef/#property-mips64sp","title":"property MIPS64.sp","text":""},{"location":"api/gef/#function-mips64canary_address","title":"function <code>MIPS64.canary_address</code>","text":"<pre><code>canary_address() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-mips64flag_register_to_human","title":"function <code>MIPS64.flag_register_to_human</code>","text":"<pre><code>flag_register_to_human(val: int | None = None) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-mips64get_ith_parameter","title":"function <code>MIPS64.get_ith_parameter</code>","text":"<pre><code>get_ith_parameter(i: int, in_func: bool = True) \u2192 tuple[str, int | None]\n</code></pre> <p>Retrieves the correct parameter used for the current function call. </p> <p></p>"},{"location":"api/gef/#function-mips64get_ra","title":"function <code>MIPS64.get_ra</code>","text":"<pre><code>get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 int | None\n</code></pre>"},{"location":"api/gef/#function-mips64is_branch_taken","title":"function <code>MIPS64.is_branch_taken</code>","text":"<pre><code>is_branch_taken(insn: __main__.Instruction) \u2192 tuple[bool, str]\n</code></pre>"},{"location":"api/gef/#function-mips64is_call","title":"function <code>MIPS64.is_call</code>","text":"<pre><code>is_call(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-mips64is_conditional_branch","title":"function <code>MIPS64.is_conditional_branch</code>","text":"<pre><code>is_conditional_branch(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-mips64is_ret","title":"function <code>MIPS64.is_ret</code>","text":"<pre><code>is_ret(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-mips64mprotect_asm","title":"function <code>MIPS64.mprotect_asm</code>","text":"<pre><code>mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-mips64register","title":"function <code>MIPS64.register</code>","text":"<pre><code>register(name: str) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-mips64reset_caches","title":"function <code>MIPS64.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-mips64supports_gdb_arch","title":"function <code>MIPS64.supports_gdb_arch</code>","text":"<pre><code>supports_gdb_arch(gdb_arch: str) \u2192 bool | None\n</code></pre>"},{"location":"api/gef/#class-memorycommand","title":"class <code>MemoryCommand</code>","text":"<p>Add or remove address ranges to the memory view. </p> <p></p>"},{"location":"api/gef/#function-memorycommand__init__","title":"function <code>MemoryCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-memorycommandsettings","title":"property MemoryCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-memorycommandadd_setting","title":"function <code>MemoryCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-memorycommanddel_setting","title":"function <code>MemoryCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-memorycommanddo_invoke","title":"function <code>MemoryCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memorycommandget_setting","title":"function <code>MemoryCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-memorycommandhas_setting","title":"function <code>MemoryCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-memorycommandinvoke","title":"function <code>MemoryCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memorycommandpost_load","title":"function <code>MemoryCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memorycommandpre_load","title":"function <code>MemoryCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memorycommandusage","title":"function <code>MemoryCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-memoryunwatchcommand","title":"class <code>MemoryUnwatchCommand</code>","text":"<p>Removes address ranges to the memory view. </p> <p></p>"},{"location":"api/gef/#function-memoryunwatchcommand__init__","title":"function <code>MemoryUnwatchCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-memoryunwatchcommandsettings","title":"property MemoryUnwatchCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-memoryunwatchcommandadd_setting","title":"function <code>MemoryUnwatchCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-memoryunwatchcommanddel_setting","title":"function <code>MemoryUnwatchCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-memoryunwatchcommanddo_invoke","title":"function <code>MemoryUnwatchCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memoryunwatchcommandget_setting","title":"function <code>MemoryUnwatchCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-memoryunwatchcommandhas_setting","title":"function <code>MemoryUnwatchCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-memoryunwatchcommandinvoke","title":"function <code>MemoryUnwatchCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memoryunwatchcommandpost_load","title":"function <code>MemoryUnwatchCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memoryunwatchcommandpre_load","title":"function <code>MemoryUnwatchCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memoryunwatchcommandusage","title":"function <code>MemoryUnwatchCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-memorywatchcommand","title":"class <code>MemoryWatchCommand</code>","text":"<p>Adds address ranges to the memory view. </p> <p></p>"},{"location":"api/gef/#function-memorywatchcommand__init__","title":"function <code>MemoryWatchCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-memorywatchcommandsettings","title":"property MemoryWatchCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-memorywatchcommandadd_setting","title":"function <code>MemoryWatchCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-memorywatchcommanddel_setting","title":"function <code>MemoryWatchCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-memorywatchcommanddo_invoke","title":"function <code>MemoryWatchCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memorywatchcommandget_setting","title":"function <code>MemoryWatchCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-memorywatchcommandhas_setting","title":"function <code>MemoryWatchCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-memorywatchcommandinvoke","title":"function <code>MemoryWatchCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memorywatchcommandpost_load","title":"function <code>MemoryWatchCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memorywatchcommandpre_load","title":"function <code>MemoryWatchCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memorywatchcommandusage","title":"function <code>MemoryWatchCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-memorywatchlistcommand","title":"class <code>MemoryWatchListCommand</code>","text":"<p>Lists all watchpoints to display in context layout. </p> <p></p>"},{"location":"api/gef/#function-memorywatchlistcommand__init__","title":"function <code>MemoryWatchListCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-memorywatchlistcommandsettings","title":"property MemoryWatchListCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-memorywatchlistcommandadd_setting","title":"function <code>MemoryWatchListCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-memorywatchlistcommanddel_setting","title":"function <code>MemoryWatchListCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-memorywatchlistcommanddo_invoke","title":"function <code>MemoryWatchListCommand.do_invoke</code>","text":"<pre><code>do_invoke(_: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memorywatchlistcommandget_setting","title":"function <code>MemoryWatchListCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-memorywatchlistcommandhas_setting","title":"function <code>MemoryWatchListCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-memorywatchlistcommandinvoke","title":"function <code>MemoryWatchListCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memorywatchlistcommandpost_load","title":"function <code>MemoryWatchListCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memorywatchlistcommandpre_load","title":"function <code>MemoryWatchListCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memorywatchlistcommandusage","title":"function <code>MemoryWatchListCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-memorywatchresetcommand","title":"class <code>MemoryWatchResetCommand</code>","text":"<p>Removes all watchpoints. </p> <p></p>"},{"location":"api/gef/#function-memorywatchresetcommand__init__","title":"function <code>MemoryWatchResetCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-memorywatchresetcommandsettings","title":"property MemoryWatchResetCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-memorywatchresetcommandadd_setting","title":"function <code>MemoryWatchResetCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-memorywatchresetcommanddel_setting","title":"function <code>MemoryWatchResetCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-memorywatchresetcommanddo_invoke","title":"function <code>MemoryWatchResetCommand.do_invoke</code>","text":"<pre><code>do_invoke(_: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memorywatchresetcommandget_setting","title":"function <code>MemoryWatchResetCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-memorywatchresetcommandhas_setting","title":"function <code>MemoryWatchResetCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-memorywatchresetcommandinvoke","title":"function <code>MemoryWatchResetCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memorywatchresetcommandpost_load","title":"function <code>MemoryWatchResetCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memorywatchresetcommandpre_load","title":"function <code>MemoryWatchResetCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-memorywatchresetcommandusage","title":"function <code>MemoryWatchResetCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-namedbreakpoint","title":"class <code>NamedBreakpoint</code>","text":"<p>Breakpoint which shows a specified name, when hit. </p> <p></p>"},{"location":"api/gef/#function-namedbreakpoint__init__","title":"function <code>NamedBreakpoint.__init__</code>","text":"<pre><code>__init__(location: str, name: str) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-namedbreakpointstop","title":"function <code>NamedBreakpoint.stop</code>","text":"<pre><code>stop() \u2192 bool\n</code></pre>"},{"location":"api/gef/#class-namedbreakpointcommand","title":"class <code>NamedBreakpointCommand</code>","text":"<p>Sets a breakpoint and assigns a name to it, which will be shown, when it's hit. </p> <p></p>"},{"location":"api/gef/#function-namedbreakpointcommand__init__","title":"function <code>NamedBreakpointCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-namedbreakpointcommandsettings","title":"property NamedBreakpointCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-namedbreakpointcommandadd_setting","title":"function <code>NamedBreakpointCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-namedbreakpointcommanddel_setting","title":"function <code>NamedBreakpointCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-namedbreakpointcommandwrapper","title":"function <code>NamedBreakpointCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-namedbreakpointcommandget_setting","title":"function <code>NamedBreakpointCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-namedbreakpointcommandhas_setting","title":"function <code>NamedBreakpointCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-namedbreakpointcommandinvoke","title":"function <code>NamedBreakpointCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-namedbreakpointcommandpost_load","title":"function <code>NamedBreakpointCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-namedbreakpointcommandpre_load","title":"function <code>NamedBreakpointCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-namedbreakpointcommandusage","title":"function <code>NamedBreakpointCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-nopcommand","title":"class <code>NopCommand</code>","text":"<p>Patch the instruction(s) pointed by parameters with NOP. Note: this command is architecture aware. </p> <p></p>"},{"location":"api/gef/#function-nopcommand__init__","title":"function <code>NopCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-nopcommandsettings","title":"property NopCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-nopcommandadd_setting","title":"function <code>NopCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-nopcommanddel_setting","title":"function <code>NopCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-nopcommandwrapper","title":"function <code>NopCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-nopcommandget_setting","title":"function <code>NopCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-nopcommandhas_setting","title":"function <code>NopCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-nopcommandinvoke","title":"function <code>NopCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-nopcommandpost_load","title":"function <code>NopCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-nopcommandpre_load","title":"function <code>NopCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-nopcommandusage","title":"function <code>NopCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-obsoleteexception","title":"class <code>ObsoleteException</code>","text":""},{"location":"api/gef/#class-pcustomcommand","title":"class <code>PCustomCommand</code>","text":"<p>Dump user defined structure. This command attempts to reproduce WinDBG awesome <code>dt</code> command for GDB and allows to apply structures (from symbols or custom) directly to an address. Custom structures can be defined in pure Python using ctypes, and should be stored in a specific directory, whose path must be stored in the <code>pcustom.struct_path</code> configuration setting. </p> <p></p>"},{"location":"api/gef/#function-pcustomcommand__init__","title":"function <code>PCustomCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-pcustomcommandsettings","title":"property PCustomCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-pcustomcommandadd_setting","title":"function <code>PCustomCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-pcustomcommanddel_setting","title":"function <code>PCustomCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-pcustomcommandwrapper","title":"function <code>PCustomCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-pcustomcommandexplode_type","title":"function <code>PCustomCommand.explode_type</code>","text":"<pre><code>explode_type(arg: str) \u2192 tuple[str, str]\n</code></pre>"},{"location":"api/gef/#function-pcustomcommandget_setting","title":"function <code>PCustomCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-pcustomcommandhas_setting","title":"function <code>PCustomCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-pcustomcommandinvoke","title":"function <code>PCustomCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pcustomcommandpost_load","title":"function <code>PCustomCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pcustomcommandpre_load","title":"function <code>PCustomCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pcustomcommandusage","title":"function <code>PCustomCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-pcustomeditcommand","title":"class <code>PCustomEditCommand</code>","text":"<p>PCustom: edit the content of a given structure </p> <p></p>"},{"location":"api/gef/#function-pcustomeditcommand__init__","title":"function <code>PCustomEditCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-pcustomeditcommandsettings","title":"property PCustomEditCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-pcustomeditcommandadd_setting","title":"function <code>PCustomEditCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-pcustomeditcommanddel_setting","title":"function <code>PCustomEditCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-pcustomeditcommanddo_invoke","title":"function <code>PCustomEditCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pcustomeditcommandexplode_type","title":"function <code>PCustomEditCommand.explode_type</code>","text":"<pre><code>explode_type(arg: str) \u2192 tuple[str, str]\n</code></pre>"},{"location":"api/gef/#function-pcustomeditcommandget_setting","title":"function <code>PCustomEditCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-pcustomeditcommandhas_setting","title":"function <code>PCustomEditCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-pcustomeditcommandinvoke","title":"function <code>PCustomEditCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pcustomeditcommandpost_load","title":"function <code>PCustomEditCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pcustomeditcommandpre_load","title":"function <code>PCustomEditCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pcustomeditcommandusage","title":"function <code>PCustomEditCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-pcustomlistcommand","title":"class <code>PCustomListCommand</code>","text":"<p>PCustom: list available structures </p> <p></p>"},{"location":"api/gef/#function-pcustomlistcommand__init__","title":"function <code>PCustomListCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-pcustomlistcommandsettings","title":"property PCustomListCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-pcustomlistcommandadd_setting","title":"function <code>PCustomListCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-pcustomlistcommanddel_setting","title":"function <code>PCustomListCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-pcustomlistcommanddo_invoke","title":"function <code>PCustomListCommand.do_invoke</code>","text":"<pre><code>do_invoke(_: list[str]) \u2192 None\n</code></pre> <p>Dump the list of all the structures and their respective. </p> <p></p>"},{"location":"api/gef/#function-pcustomlistcommandexplode_type","title":"function <code>PCustomListCommand.explode_type</code>","text":"<pre><code>explode_type(arg: str) \u2192 tuple[str, str]\n</code></pre>"},{"location":"api/gef/#function-pcustomlistcommandget_setting","title":"function <code>PCustomListCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-pcustomlistcommandhas_setting","title":"function <code>PCustomListCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-pcustomlistcommandinvoke","title":"function <code>PCustomListCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pcustomlistcommandpost_load","title":"function <code>PCustomListCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pcustomlistcommandpre_load","title":"function <code>PCustomListCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pcustomlistcommandusage","title":"function <code>PCustomListCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-pcustomshowcommand","title":"class <code>PCustomShowCommand</code>","text":"<p>PCustom: show the content of a given structure </p> <p></p>"},{"location":"api/gef/#function-pcustomshowcommand__init__","title":"function <code>PCustomShowCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-pcustomshowcommandsettings","title":"property PCustomShowCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-pcustomshowcommandadd_setting","title":"function <code>PCustomShowCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-pcustomshowcommanddel_setting","title":"function <code>PCustomShowCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-pcustomshowcommanddo_invoke","title":"function <code>PCustomShowCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pcustomshowcommandexplode_type","title":"function <code>PCustomShowCommand.explode_type</code>","text":"<pre><code>explode_type(arg: str) \u2192 tuple[str, str]\n</code></pre>"},{"location":"api/gef/#function-pcustomshowcommandget_setting","title":"function <code>PCustomShowCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-pcustomshowcommandhas_setting","title":"function <code>PCustomShowCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-pcustomshowcommandinvoke","title":"function <code>PCustomShowCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pcustomshowcommandpost_load","title":"function <code>PCustomShowCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pcustomshowcommandpre_load","title":"function <code>PCustomShowCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pcustomshowcommandusage","title":"function <code>PCustomShowCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-patchbytecommand","title":"class <code>PatchByteCommand</code>","text":"<p>Write specified BYTE to the specified address. </p> <p></p>"},{"location":"api/gef/#function-patchbytecommand__init__","title":"function <code>PatchByteCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-patchbytecommandsettings","title":"property PatchByteCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-patchbytecommandadd_setting","title":"function <code>PatchByteCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchbytecommanddel_setting","title":"function <code>PatchByteCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchbytecommandwrapper","title":"function <code>PatchByteCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-patchbytecommandget_setting","title":"function <code>PatchByteCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchbytecommandhas_setting","title":"function <code>PatchByteCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchbytecommandinvoke","title":"function <code>PatchByteCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchbytecommandpost_load","title":"function <code>PatchByteCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchbytecommandpre_load","title":"function <code>PatchByteCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchbytecommandusage","title":"function <code>PatchByteCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-patchcommand","title":"class <code>PatchCommand</code>","text":"<p>Write specified values to the specified address. </p> <p></p>"},{"location":"api/gef/#function-patchcommand__init__","title":"function <code>PatchCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-patchcommandsettings","title":"property PatchCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-patchcommandadd_setting","title":"function <code>PatchCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchcommanddel_setting","title":"function <code>PatchCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchcommandwrapper","title":"function <code>PatchCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-patchcommandget_setting","title":"function <code>PatchCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchcommandhas_setting","title":"function <code>PatchCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchcommandinvoke","title":"function <code>PatchCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchcommandpost_load","title":"function <code>PatchCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchcommandpre_load","title":"function <code>PatchCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchcommandusage","title":"function <code>PatchCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-patchdwordcommand","title":"class <code>PatchDwordCommand</code>","text":"<p>Write specified DWORD to the specified address. </p> <p></p>"},{"location":"api/gef/#function-patchdwordcommand__init__","title":"function <code>PatchDwordCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-patchdwordcommandsettings","title":"property PatchDwordCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-patchdwordcommandadd_setting","title":"function <code>PatchDwordCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchdwordcommanddel_setting","title":"function <code>PatchDwordCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchdwordcommandwrapper","title":"function <code>PatchDwordCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-patchdwordcommandget_setting","title":"function <code>PatchDwordCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchdwordcommandhas_setting","title":"function <code>PatchDwordCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchdwordcommandinvoke","title":"function <code>PatchDwordCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchdwordcommandpost_load","title":"function <code>PatchDwordCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchdwordcommandpre_load","title":"function <code>PatchDwordCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchdwordcommandusage","title":"function <code>PatchDwordCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-patchqwordcommand","title":"class <code>PatchQwordCommand</code>","text":"<p>Write specified QWORD to the specified address. </p> <p></p>"},{"location":"api/gef/#function-patchqwordcommand__init__","title":"function <code>PatchQwordCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-patchqwordcommandsettings","title":"property PatchQwordCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-patchqwordcommandadd_setting","title":"function <code>PatchQwordCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchqwordcommanddel_setting","title":"function <code>PatchQwordCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchqwordcommandwrapper","title":"function <code>PatchQwordCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-patchqwordcommandget_setting","title":"function <code>PatchQwordCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchqwordcommandhas_setting","title":"function <code>PatchQwordCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchqwordcommandinvoke","title":"function <code>PatchQwordCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchqwordcommandpost_load","title":"function <code>PatchQwordCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchqwordcommandpre_load","title":"function <code>PatchQwordCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchqwordcommandusage","title":"function <code>PatchQwordCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-patchstringcommand","title":"class <code>PatchStringCommand</code>","text":"<p>Write specified string to the specified memory location pointed by ADDRESS. </p> <p></p>"},{"location":"api/gef/#function-patchstringcommand__init__","title":"function <code>PatchStringCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-patchstringcommandsettings","title":"property PatchStringCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-patchstringcommandadd_setting","title":"function <code>PatchStringCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchstringcommanddel_setting","title":"function <code>PatchStringCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchstringcommanddo_invoke","title":"function <code>PatchStringCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchstringcommandget_setting","title":"function <code>PatchStringCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchstringcommandhas_setting","title":"function <code>PatchStringCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchstringcommandinvoke","title":"function <code>PatchStringCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchstringcommandpost_load","title":"function <code>PatchStringCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchstringcommandpre_load","title":"function <code>PatchStringCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchstringcommandusage","title":"function <code>PatchStringCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-patchwordcommand","title":"class <code>PatchWordCommand</code>","text":"<p>Write specified WORD to the specified address. </p> <p></p>"},{"location":"api/gef/#function-patchwordcommand__init__","title":"function <code>PatchWordCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-patchwordcommandsettings","title":"property PatchWordCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-patchwordcommandadd_setting","title":"function <code>PatchWordCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchwordcommanddel_setting","title":"function <code>PatchWordCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchwordcommandwrapper","title":"function <code>PatchWordCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-patchwordcommandget_setting","title":"function <code>PatchWordCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchwordcommandhas_setting","title":"function <code>PatchWordCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-patchwordcommandinvoke","title":"function <code>PatchWordCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchwordcommandpost_load","title":"function <code>PatchWordCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchwordcommandpre_load","title":"function <code>PatchWordCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patchwordcommandusage","title":"function <code>PatchWordCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-patterncommand","title":"class <code>PatternCommand</code>","text":"<p>Generate or Search a De Bruijn Sequence of unique substrings of length N and a total length of LENGTH. The default value of N is set to match the currently loaded architecture. </p> <p></p>"},{"location":"api/gef/#function-patterncommand__init__","title":"function <code>PatternCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-patterncommandsettings","title":"property PatternCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-patterncommandadd_setting","title":"function <code>PatternCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-patterncommanddel_setting","title":"function <code>PatternCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patterncommanddo_invoke","title":"function <code>PatternCommand.do_invoke</code>","text":"<pre><code>do_invoke(_: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patterncommandget_setting","title":"function <code>PatternCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patterncommandhas_setting","title":"function <code>PatternCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-patterncommandinvoke","title":"function <code>PatternCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patterncommandpost_load","title":"function <code>PatternCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patterncommandpre_load","title":"function <code>PatternCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patterncommandusage","title":"function <code>PatternCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-patterncreatecommand","title":"class <code>PatternCreateCommand</code>","text":"<p>Generate a De Bruijn Sequence of unique substrings of length N and a total length of LENGTH. The default value of N is set to match the currently loaded architecture. </p> <p></p>"},{"location":"api/gef/#function-patterncreatecommand__init__","title":"function <code>PatternCreateCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-patterncreatecommandsettings","title":"property PatternCreateCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-patterncreatecommandadd_setting","title":"function <code>PatternCreateCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-patterncreatecommanddel_setting","title":"function <code>PatternCreateCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patterncreatecommandwrapper","title":"function <code>PatternCreateCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-patterncreatecommandget_setting","title":"function <code>PatternCreateCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patterncreatecommandhas_setting","title":"function <code>PatternCreateCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-patterncreatecommandinvoke","title":"function <code>PatternCreateCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patterncreatecommandpost_load","title":"function <code>PatternCreateCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patterncreatecommandpre_load","title":"function <code>PatternCreateCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patterncreatecommandusage","title":"function <code>PatternCreateCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-patternsearchcommand","title":"class <code>PatternSearchCommand</code>","text":"<p>Search a De Bruijn Sequence of unique substrings of length N and a maximum total length of MAX_LENGTH. The default value of N is set to match the currently loaded architecture. The PATTERN argument can be a GDB symbol (such as a register name), a string or a hexadecimal value </p> <p></p>"},{"location":"api/gef/#function-patternsearchcommand__init__","title":"function <code>PatternSearchCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-patternsearchcommandsettings","title":"property PatternSearchCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-patternsearchcommandadd_setting","title":"function <code>PatternSearchCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-patternsearchcommanddel_setting","title":"function <code>PatternSearchCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patternsearchcommandwrapper","title":"function <code>PatternSearchCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-patternsearchcommandget_setting","title":"function <code>PatternSearchCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-patternsearchcommandhas_setting","title":"function <code>PatternSearchCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-patternsearchcommandinvoke","title":"function <code>PatternSearchCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patternsearchcommandpost_load","title":"function <code>PatternSearchCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patternsearchcommandpre_load","title":"function <code>PatternSearchCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patternsearchcommandsearch","title":"function <code>PatternSearchCommand.search</code>","text":"<pre><code>search(pattern: str, size: int, period: int) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-patternsearchcommandusage","title":"function <code>PatternSearchCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-permission","title":"class <code>Permission</code>","text":"<p>GEF representation of Linux permission. </p>"},{"location":"api/gef/#class-phdr","title":"class <code>Phdr</code>","text":""},{"location":"api/gef/#function-phdr__init__","title":"function <code>Phdr.__init__</code>","text":"<pre><code>__init__(elf: __main__.Elf, off: int) \u2192 None\n</code></pre>"},{"location":"api/gef/#class-pieattachcommand","title":"class <code>PieAttachCommand</code>","text":"<p>Do attach with PIE breakpoint support. </p> <p></p>"},{"location":"api/gef/#function-pieattachcommand__init__","title":"function <code>PieAttachCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-pieattachcommandsettings","title":"property PieAttachCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-pieattachcommandadd_setting","title":"function <code>PieAttachCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-pieattachcommanddel_setting","title":"function <code>PieAttachCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-pieattachcommanddo_invoke","title":"function <code>PieAttachCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pieattachcommandget_setting","title":"function <code>PieAttachCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-pieattachcommandhas_setting","title":"function <code>PieAttachCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-pieattachcommandinvoke","title":"function <code>PieAttachCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pieattachcommandpost_load","title":"function <code>PieAttachCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pieattachcommandpre_load","title":"function <code>PieAttachCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pieattachcommandusage","title":"function <code>PieAttachCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-piebreakpointcommand","title":"class <code>PieBreakpointCommand</code>","text":"<p>Set a PIE breakpoint at an offset from the target binaries base address. </p> <p></p>"},{"location":"api/gef/#function-piebreakpointcommand__init__","title":"function <code>PieBreakpointCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-piebreakpointcommandsettings","title":"property PieBreakpointCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-piebreakpointcommandadd_setting","title":"function <code>PieBreakpointCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-piebreakpointcommanddel_setting","title":"function <code>PieBreakpointCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-piebreakpointcommandwrapper","title":"function <code>PieBreakpointCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-piebreakpointcommandget_setting","title":"function <code>PieBreakpointCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-piebreakpointcommandhas_setting","title":"function <code>PieBreakpointCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-piebreakpointcommandinvoke","title":"function <code>PieBreakpointCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-piebreakpointcommandpost_load","title":"function <code>PieBreakpointCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-piebreakpointcommandpre_load","title":"function <code>PieBreakpointCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-piebreakpointcommandset_pie_breakpoint","title":"function <code>PieBreakpointCommand.set_pie_breakpoint</code>","text":"<pre><code>set_pie_breakpoint(set_func: Callable[[int], str], addr: int) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-piebreakpointcommandusage","title":"function <code>PieBreakpointCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-piecommand","title":"class <code>PieCommand</code>","text":"<p>PIE breakpoint support. </p> <p></p>"},{"location":"api/gef/#function-piecommand__init__","title":"function <code>PieCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-piecommandsettings","title":"property PieCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-piecommandadd_setting","title":"function <code>PieCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-piecommanddel_setting","title":"function <code>PieCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-piecommanddo_invoke","title":"function <code>PieCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-piecommandget_setting","title":"function <code>PieCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-piecommandhas_setting","title":"function <code>PieCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-piecommandinvoke","title":"function <code>PieCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-piecommandpost_load","title":"function <code>PieCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-piecommandpre_load","title":"function <code>PieCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-piecommandusage","title":"function <code>PieCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-piedeletecommand","title":"class <code>PieDeleteCommand</code>","text":"<p>Delete a PIE breakpoint. </p> <p></p>"},{"location":"api/gef/#function-piedeletecommand__init__","title":"function <code>PieDeleteCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-piedeletecommandsettings","title":"property PieDeleteCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-piedeletecommandadd_setting","title":"function <code>PieDeleteCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-piedeletecommanddel_setting","title":"function <code>PieDeleteCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-piedeletecommanddelete_bp","title":"function <code>PieDeleteCommand.delete_bp</code>","text":"<pre><code>delete_bp(breakpoints: list[__main__.PieVirtualBreakpoint]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-piedeletecommandwrapper","title":"function <code>PieDeleteCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-piedeletecommandget_setting","title":"function <code>PieDeleteCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-piedeletecommandhas_setting","title":"function <code>PieDeleteCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-piedeletecommandinvoke","title":"function <code>PieDeleteCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-piedeletecommandpost_load","title":"function <code>PieDeleteCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-piedeletecommandpre_load","title":"function <code>PieDeleteCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-piedeletecommandusage","title":"function <code>PieDeleteCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-pieinfocommand","title":"class <code>PieInfoCommand</code>","text":"<p>Display breakpoint info. </p> <p></p>"},{"location":"api/gef/#function-pieinfocommand__init__","title":"function <code>PieInfoCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-pieinfocommandsettings","title":"property PieInfoCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-pieinfocommandadd_setting","title":"function <code>PieInfoCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-pieinfocommanddel_setting","title":"function <code>PieInfoCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-pieinfocommandwrapper","title":"function <code>PieInfoCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-pieinfocommandget_setting","title":"function <code>PieInfoCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-pieinfocommandhas_setting","title":"function <code>PieInfoCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-pieinfocommandinvoke","title":"function <code>PieInfoCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pieinfocommandpost_load","title":"function <code>PieInfoCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pieinfocommandpre_load","title":"function <code>PieInfoCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pieinfocommandusage","title":"function <code>PieInfoCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-pieremotecommand","title":"class <code>PieRemoteCommand</code>","text":"<p>Attach to a remote connection with PIE breakpoint support. </p> <p></p>"},{"location":"api/gef/#function-pieremotecommand__init__","title":"function <code>PieRemoteCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-pieremotecommandsettings","title":"property PieRemoteCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-pieremotecommandadd_setting","title":"function <code>PieRemoteCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-pieremotecommanddel_setting","title":"function <code>PieRemoteCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-pieremotecommanddo_invoke","title":"function <code>PieRemoteCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pieremotecommandget_setting","title":"function <code>PieRemoteCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-pieremotecommandhas_setting","title":"function <code>PieRemoteCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-pieremotecommandinvoke","title":"function <code>PieRemoteCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pieremotecommandpost_load","title":"function <code>PieRemoteCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pieremotecommandpre_load","title":"function <code>PieRemoteCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pieremotecommandusage","title":"function <code>PieRemoteCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-pieruncommand","title":"class <code>PieRunCommand</code>","text":"<p>Run process with PIE breakpoint support. </p> <p></p>"},{"location":"api/gef/#function-pieruncommand__init__","title":"function <code>PieRunCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-pieruncommandsettings","title":"property PieRunCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-pieruncommandadd_setting","title":"function <code>PieRunCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-pieruncommanddel_setting","title":"function <code>PieRunCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-pieruncommanddo_invoke","title":"function <code>PieRunCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pieruncommandget_setting","title":"function <code>PieRunCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-pieruncommandhas_setting","title":"function <code>PieRunCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-pieruncommandinvoke","title":"function <code>PieRunCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pieruncommandpost_load","title":"function <code>PieRunCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pieruncommandpre_load","title":"function <code>PieRunCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pieruncommandusage","title":"function <code>PieRunCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-pievirtualbreakpoint","title":"class <code>PieVirtualBreakpoint</code>","text":"<p>PIE virtual breakpoint (not real breakpoint). </p> <p></p>"},{"location":"api/gef/#function-pievirtualbreakpoint__init__","title":"function <code>PieVirtualBreakpoint.__init__</code>","text":"<pre><code>__init__(set_func: Callable[[int], str], vbp_num: int, addr: int) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pievirtualbreakpointdestroy","title":"function <code>PieVirtualBreakpoint.destroy</code>","text":"<pre><code>destroy() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-pievirtualbreakpointinstantiate","title":"function <code>PieVirtualBreakpoint.instantiate</code>","text":"<pre><code>instantiate(base: int) \u2192 None\n</code></pre>"},{"location":"api/gef/#class-powerpc","title":"class <code>PowerPC</code>","text":""},{"location":"api/gef/#property-powerpcendianness","title":"property PowerPC.endianness","text":""},{"location":"api/gef/#property-powerpcfp","title":"property PowerPC.fp","text":""},{"location":"api/gef/#property-powerpcpc","title":"property PowerPC.pc","text":""},{"location":"api/gef/#property-powerpcptrsize","title":"property PowerPC.ptrsize","text":""},{"location":"api/gef/#property-powerpcregisters","title":"property PowerPC.registers","text":""},{"location":"api/gef/#property-powerpcsp","title":"property PowerPC.sp","text":""},{"location":"api/gef/#function-powerpccanary_address","title":"function <code>PowerPC.canary_address</code>","text":"<pre><code>canary_address() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-powerpcflag_register_to_human","title":"function <code>PowerPC.flag_register_to_human</code>","text":"<pre><code>flag_register_to_human(val: int | None = None) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-powerpcget_ith_parameter","title":"function <code>PowerPC.get_ith_parameter</code>","text":"<pre><code>get_ith_parameter(i: int, in_func: bool = True) \u2192 tuple[str, int | None]\n</code></pre> <p>Retrieves the correct parameter used for the current function call. </p> <p></p>"},{"location":"api/gef/#function-powerpcget_ra","title":"function <code>PowerPC.get_ra</code>","text":"<pre><code>get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 int | None\n</code></pre>"},{"location":"api/gef/#function-powerpcis_branch_taken","title":"function <code>PowerPC.is_branch_taken</code>","text":"<pre><code>is_branch_taken(insn: __main__.Instruction) \u2192 tuple[bool, str]\n</code></pre>"},{"location":"api/gef/#function-powerpcis_call","title":"function <code>PowerPC.is_call</code>","text":"<pre><code>is_call(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-powerpcis_conditional_branch","title":"function <code>PowerPC.is_conditional_branch</code>","text":"<pre><code>is_conditional_branch(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-powerpcis_ret","title":"function <code>PowerPC.is_ret</code>","text":"<pre><code>is_ret(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-powerpcmprotect_asm","title":"function <code>PowerPC.mprotect_asm</code>","text":"<pre><code>mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-powerpcregister","title":"function <code>PowerPC.register</code>","text":"<pre><code>register(name: str) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-powerpcreset_caches","title":"function <code>PowerPC.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-powerpcsupports_gdb_arch","title":"function <code>PowerPC.supports_gdb_arch</code>","text":"<pre><code>supports_gdb_arch(gdb_arch: str) \u2192 bool | None\n</code></pre> <p>If implemented by a child <code>Architecture</code>, this function dictates if the current class supports the loaded ELF file (which can be accessed via <code>gef.binary</code>). This callback function will override any assumption made by GEF to determine the architecture. </p>"},{"location":"api/gef/#class-powerpc64","title":"class <code>PowerPC64</code>","text":""},{"location":"api/gef/#property-powerpc64endianness","title":"property PowerPC64.endianness","text":""},{"location":"api/gef/#property-powerpc64fp","title":"property PowerPC64.fp","text":""},{"location":"api/gef/#property-powerpc64pc","title":"property PowerPC64.pc","text":""},{"location":"api/gef/#property-powerpc64ptrsize","title":"property PowerPC64.ptrsize","text":""},{"location":"api/gef/#property-powerpc64registers","title":"property PowerPC64.registers","text":""},{"location":"api/gef/#property-powerpc64sp","title":"property PowerPC64.sp","text":""},{"location":"api/gef/#function-powerpc64canary_address","title":"function <code>PowerPC64.canary_address</code>","text":"<pre><code>canary_address() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-powerpc64flag_register_to_human","title":"function <code>PowerPC64.flag_register_to_human</code>","text":"<pre><code>flag_register_to_human(val: int | None = None) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-powerpc64get_ith_parameter","title":"function <code>PowerPC64.get_ith_parameter</code>","text":"<pre><code>get_ith_parameter(i: int, in_func: bool = True) \u2192 tuple[str, int | None]\n</code></pre> <p>Retrieves the correct parameter used for the current function call. </p> <p></p>"},{"location":"api/gef/#function-powerpc64get_ra","title":"function <code>PowerPC64.get_ra</code>","text":"<pre><code>get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 int | None\n</code></pre>"},{"location":"api/gef/#function-powerpc64is_branch_taken","title":"function <code>PowerPC64.is_branch_taken</code>","text":"<pre><code>is_branch_taken(insn: __main__.Instruction) \u2192 tuple[bool, str]\n</code></pre>"},{"location":"api/gef/#function-powerpc64is_call","title":"function <code>PowerPC64.is_call</code>","text":"<pre><code>is_call(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-powerpc64is_conditional_branch","title":"function <code>PowerPC64.is_conditional_branch</code>","text":"<pre><code>is_conditional_branch(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-powerpc64is_ret","title":"function <code>PowerPC64.is_ret</code>","text":"<pre><code>is_ret(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-powerpc64mprotect_asm","title":"function <code>PowerPC64.mprotect_asm</code>","text":"<pre><code>mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-powerpc64register","title":"function <code>PowerPC64.register</code>","text":"<pre><code>register(name: str) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-powerpc64reset_caches","title":"function <code>PowerPC64.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-powerpc64supports_gdb_arch","title":"function <code>PowerPC64.supports_gdb_arch</code>","text":"<pre><code>supports_gdb_arch(gdb_arch: str) \u2192 bool | None\n</code></pre> <p>If implemented by a child <code>Architecture</code>, this function dictates if the current class supports the loaded ELF file (which can be accessed via <code>gef.binary</code>). This callback function will override any assumption made by GEF to determine the architecture. </p>"},{"location":"api/gef/#class-printformatcommand","title":"class <code>PrintFormatCommand</code>","text":"<p>Print bytes format in commonly used formats, such as literals in high level languages. </p> <p></p>"},{"location":"api/gef/#function-printformatcommand__init__","title":"function <code>PrintFormatCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-printformatcommandformat_matrix","title":"property PrintFormatCommand.format_matrix","text":""},{"location":"api/gef/#property-printformatcommandsettings","title":"property PrintFormatCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-printformatcommandadd_setting","title":"function <code>PrintFormatCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-printformatcommanddel_setting","title":"function <code>PrintFormatCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-printformatcommandwrapper","title":"function <code>PrintFormatCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-printformatcommandget_setting","title":"function <code>PrintFormatCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-printformatcommandhas_setting","title":"function <code>PrintFormatCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-printformatcommandinvoke","title":"function <code>PrintFormatCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-printformatcommandpost_load","title":"function <code>PrintFormatCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-printformatcommandpre_load","title":"function <code>PrintFormatCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-printformatcommandusage","title":"function <code>PrintFormatCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-processlistingcommand","title":"class <code>ProcessListingCommand</code>","text":"<p>List and filter process. If a PATTERN is given as argument, results shown will be grepped by this pattern. </p> <p></p>"},{"location":"api/gef/#function-processlistingcommand__init__","title":"function <code>ProcessListingCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-processlistingcommandsettings","title":"property ProcessListingCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-processlistingcommandadd_setting","title":"function <code>ProcessListingCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-processlistingcommanddel_setting","title":"function <code>ProcessListingCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-processlistingcommandwrapper","title":"function <code>ProcessListingCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-processlistingcommandget_processes","title":"function <code>ProcessListingCommand.get_processes</code>","text":"<pre><code>get_processes() \u2192 Generator[dict[str, str], NoneType, NoneType]\n</code></pre>"},{"location":"api/gef/#function-processlistingcommandget_setting","title":"function <code>ProcessListingCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-processlistingcommandhas_setting","title":"function <code>ProcessListingCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-processlistingcommandinvoke","title":"function <code>ProcessListingCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-processlistingcommandpost_load","title":"function <code>ProcessListingCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-processlistingcommandpre_load","title":"function <code>ProcessListingCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-processlistingcommandusage","title":"function <code>ProcessListingCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-processstatuscommand","title":"class <code>ProcessStatusCommand</code>","text":"<p>Extends the info given by GDB <code>info proc</code>, by giving an exhaustive description of the process status (file descriptors, ancestor, descendants, etc.). </p> <p></p>"},{"location":"api/gef/#function-processstatuscommand__init__","title":"function <code>ProcessStatusCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-processstatuscommandsettings","title":"property ProcessStatusCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-processstatuscommandadd_setting","title":"function <code>ProcessStatusCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-processstatuscommanddel_setting","title":"function <code>ProcessStatusCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-processstatuscommanddo_invoke","title":"function <code>ProcessStatusCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-processstatuscommandget_children_pids","title":"function <code>ProcessStatusCommand.get_children_pids</code>","text":"<pre><code>get_children_pids(pid: int) \u2192 list[int]\n</code></pre>"},{"location":"api/gef/#function-processstatuscommandget_cmdline_of","title":"function <code>ProcessStatusCommand.get_cmdline_of</code>","text":"<pre><code>get_cmdline_of(pid: int) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-processstatuscommandget_process_path_of","title":"function <code>ProcessStatusCommand.get_process_path_of</code>","text":"<pre><code>get_process_path_of(pid: int) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-processstatuscommandget_setting","title":"function <code>ProcessStatusCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-processstatuscommandget_state_of","title":"function <code>ProcessStatusCommand.get_state_of</code>","text":"<pre><code>get_state_of(pid: int) \u2192 dict[str, str]\n</code></pre>"},{"location":"api/gef/#function-processstatuscommandhas_setting","title":"function <code>ProcessStatusCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-processstatuscommandinvoke","title":"function <code>ProcessStatusCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-processstatuscommandlist_sockets","title":"function <code>ProcessStatusCommand.list_sockets</code>","text":"<pre><code>list_sockets(pid: int) \u2192 list[int]\n</code></pre>"},{"location":"api/gef/#function-processstatuscommandparse_ip_port","title":"function <code>ProcessStatusCommand.parse_ip_port</code>","text":"<pre><code>parse_ip_port(addr: str) \u2192 tuple[str, int]\n</code></pre>"},{"location":"api/gef/#function-processstatuscommandpost_load","title":"function <code>ProcessStatusCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-processstatuscommandpre_load","title":"function <code>ProcessStatusCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-processstatuscommandshow_ancestor","title":"function <code>ProcessStatusCommand.show_ancestor</code>","text":"<pre><code>show_ancestor() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-processstatuscommandshow_connections","title":"function <code>ProcessStatusCommand.show_connections</code>","text":"<pre><code>show_connections() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-processstatuscommandshow_descendants","title":"function <code>ProcessStatusCommand.show_descendants</code>","text":"<pre><code>show_descendants() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-processstatuscommandshow_fds","title":"function <code>ProcessStatusCommand.show_fds</code>","text":"<pre><code>show_fds() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-processstatuscommandshow_info_proc","title":"function <code>ProcessStatusCommand.show_info_proc</code>","text":"<pre><code>show_info_proc() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-processstatuscommandusage","title":"function <code>ProcessStatusCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-riscv","title":"class <code>RISCV</code>","text":""},{"location":"api/gef/#property-riscvendianness","title":"property RISCV.endianness","text":""},{"location":"api/gef/#property-riscvfp","title":"property RISCV.fp","text":""},{"location":"api/gef/#property-riscvinstruction_length","title":"property RISCV.instruction_length","text":""},{"location":"api/gef/#property-riscvpc","title":"property RISCV.pc","text":""},{"location":"api/gef/#property-riscvptrsize","title":"property RISCV.ptrsize","text":""},{"location":"api/gef/#property-riscvregisters","title":"property RISCV.registers","text":""},{"location":"api/gef/#property-riscvsp","title":"property RISCV.sp","text":""},{"location":"api/gef/#function-riscvcanary_address","title":"function <code>RISCV.canary_address</code>","text":"<pre><code>canary_address() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-riscvflag_register_to_human","title":"function <code>RISCV.flag_register_to_human</code>","text":"<pre><code>flag_register_to_human(val: int | None = None) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-riscvget_ith_parameter","title":"function <code>RISCV.get_ith_parameter</code>","text":"<pre><code>get_ith_parameter(i: int, in_func: bool = True) \u2192 tuple[str, int | None]\n</code></pre> <p>Retrieves the correct parameter used for the current function call. </p> <p></p>"},{"location":"api/gef/#function-riscvget_ra","title":"function <code>RISCV.get_ra</code>","text":"<pre><code>get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 int | None\n</code></pre>"},{"location":"api/gef/#function-riscvis_branch_taken","title":"function <code>RISCV.is_branch_taken</code>","text":"<pre><code>is_branch_taken(insn: __main__.Instruction) \u2192 tuple[bool, str]\n</code></pre>"},{"location":"api/gef/#function-riscvis_call","title":"function <code>RISCV.is_call</code>","text":"<pre><code>is_call(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-riscvis_conditional_branch","title":"function <code>RISCV.is_conditional_branch</code>","text":"<pre><code>is_conditional_branch(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-riscvis_ret","title":"function <code>RISCV.is_ret</code>","text":"<pre><code>is_ret(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-riscvmprotect_asm","title":"function <code>RISCV.mprotect_asm</code>","text":"<pre><code>mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-riscvregister","title":"function <code>RISCV.register</code>","text":"<pre><code>register(name: str) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-riscvreset_caches","title":"function <code>RISCV.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-riscvsupports_gdb_arch","title":"function <code>RISCV.supports_gdb_arch</code>","text":"<pre><code>supports_gdb_arch(gdb_arch: str) \u2192 bool | None\n</code></pre> <p>If implemented by a child <code>Architecture</code>, this function dictates if the current class supports the loaded ELF file (which can be accessed via <code>gef.binary</code>). This callback function will override any assumption made by GEF to determine the architecture. </p>"},{"location":"api/gef/#class-redirectoutputcontext","title":"class <code>RedirectOutputContext</code>","text":""},{"location":"api/gef/#function-redirectoutputcontext__init__","title":"function <code>RedirectOutputContext.__init__</code>","text":"<pre><code>__init__(to_file: str = '/dev/null') \u2192 None\n</code></pre>"},{"location":"api/gef/#class-remotecommand","title":"class <code>RemoteCommand</code>","text":"<p>GDB <code>target remote</code> command on steroids. This command will use the remote procfs to create a local copy of the execution environment, including the target binary and its libraries in the local temporary directory (the value by default is in <code>gef.config.tempdir</code>). Additionally, it will fetch all the /proc/PID/maps and loads all its information. If procfs is not available remotely, the command will likely fail. You can however still use the limited command provided by GDB <code>target remote</code>. </p> <p></p>"},{"location":"api/gef/#function-remotecommand__init__","title":"function <code>RemoteCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-remotecommandsettings","title":"property RemoteCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-remotecommandadd_setting","title":"function <code>RemoteCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-remotecommanddel_setting","title":"function <code>RemoteCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-remotecommandwrapper","title":"function <code>RemoteCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-remotecommandget_setting","title":"function <code>RemoteCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-remotecommandhas_setting","title":"function <code>RemoteCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-remotecommandinvoke","title":"function <code>RemoteCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-remotecommandpost_load","title":"function <code>RemoteCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-remotecommandpre_load","title":"function <code>RemoteCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-remotecommandusage","title":"function <code>RemoteCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-resetcachecommand","title":"class <code>ResetCacheCommand</code>","text":"<p>Reset cache of all stored data. This command is here for debugging and test purposes, GEF handles properly the cache reset under \"normal\" scenario. </p> <p></p>"},{"location":"api/gef/#function-resetcachecommand__init__","title":"function <code>ResetCacheCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-resetcachecommandsettings","title":"property ResetCacheCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-resetcachecommandadd_setting","title":"function <code>ResetCacheCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-resetcachecommanddel_setting","title":"function <code>ResetCacheCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-resetcachecommanddo_invoke","title":"function <code>ResetCacheCommand.do_invoke</code>","text":"<pre><code>do_invoke(_: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-resetcachecommandget_setting","title":"function <code>ResetCacheCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-resetcachecommandhas_setting","title":"function <code>ResetCacheCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-resetcachecommandinvoke","title":"function <code>ResetCacheCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-resetcachecommandpost_load","title":"function <code>ResetCacheCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-resetcachecommandpre_load","title":"function <code>ResetCacheCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-resetcachecommandusage","title":"function <code>ResetCacheCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-sparc","title":"class <code>SPARC</code>","text":"<p>Refs:  - https://www.cse.scu.edu/~atkinson/teaching/sp05/259/sparc.pdf </p>"},{"location":"api/gef/#property-sparcendianness","title":"property SPARC.endianness","text":""},{"location":"api/gef/#property-sparcfp","title":"property SPARC.fp","text":""},{"location":"api/gef/#property-sparcpc","title":"property SPARC.pc","text":""},{"location":"api/gef/#property-sparcptrsize","title":"property SPARC.ptrsize","text":""},{"location":"api/gef/#property-sparcregisters","title":"property SPARC.registers","text":""},{"location":"api/gef/#property-sparcsp","title":"property SPARC.sp","text":""},{"location":"api/gef/#function-sparccanary_address","title":"function <code>SPARC.canary_address</code>","text":"<pre><code>canary_address() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-sparcflag_register_to_human","title":"function <code>SPARC.flag_register_to_human</code>","text":"<pre><code>flag_register_to_human(val: int | None = None) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-sparcget_ith_parameter","title":"function <code>SPARC.get_ith_parameter</code>","text":"<pre><code>get_ith_parameter(i: int, in_func: bool = True) \u2192 tuple[str, int | None]\n</code></pre> <p>Retrieves the correct parameter used for the current function call. </p> <p></p>"},{"location":"api/gef/#function-sparcget_ra","title":"function <code>SPARC.get_ra</code>","text":"<pre><code>get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 int | None\n</code></pre>"},{"location":"api/gef/#function-sparcis_branch_taken","title":"function <code>SPARC.is_branch_taken</code>","text":"<pre><code>is_branch_taken(insn: __main__.Instruction) \u2192 tuple[bool, str]\n</code></pre>"},{"location":"api/gef/#function-sparcis_call","title":"function <code>SPARC.is_call</code>","text":"<pre><code>is_call(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-sparcis_conditional_branch","title":"function <code>SPARC.is_conditional_branch</code>","text":"<pre><code>is_conditional_branch(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-sparcis_ret","title":"function <code>SPARC.is_ret</code>","text":"<pre><code>is_ret(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-sparcmprotect_asm","title":"function <code>SPARC.mprotect_asm</code>","text":"<pre><code>mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-sparcregister","title":"function <code>SPARC.register</code>","text":"<pre><code>register(name: str) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-sparcreset_caches","title":"function <code>SPARC.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-sparcsupports_gdb_arch","title":"function <code>SPARC.supports_gdb_arch</code>","text":"<pre><code>supports_gdb_arch(gdb_arch: str) \u2192 bool | None\n</code></pre> <p>If implemented by a child <code>Architecture</code>, this function dictates if the current class supports the loaded ELF file (which can be accessed via <code>gef.binary</code>). This callback function will override any assumption made by GEF to determine the architecture. </p>"},{"location":"api/gef/#class-sparc64","title":"class <code>SPARC64</code>","text":"<p>Refs:  - http://math-atlas.sourceforge.net/devel/assembly/abi_sysV_sparc.pdf  - https://cr.yp.to/2005-590/sparcv9.pdf </p>"},{"location":"api/gef/#property-sparc64endianness","title":"property SPARC64.endianness","text":""},{"location":"api/gef/#property-sparc64fp","title":"property SPARC64.fp","text":""},{"location":"api/gef/#property-sparc64pc","title":"property SPARC64.pc","text":""},{"location":"api/gef/#property-sparc64ptrsize","title":"property SPARC64.ptrsize","text":""},{"location":"api/gef/#property-sparc64registers","title":"property SPARC64.registers","text":""},{"location":"api/gef/#property-sparc64sp","title":"property SPARC64.sp","text":""},{"location":"api/gef/#function-sparc64canary_address","title":"function <code>SPARC64.canary_address</code>","text":"<pre><code>canary_address() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-sparc64flag_register_to_human","title":"function <code>SPARC64.flag_register_to_human</code>","text":"<pre><code>flag_register_to_human(val: int | None = None) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-sparc64get_ith_parameter","title":"function <code>SPARC64.get_ith_parameter</code>","text":"<pre><code>get_ith_parameter(i: int, in_func: bool = True) \u2192 tuple[str, int | None]\n</code></pre> <p>Retrieves the correct parameter used for the current function call. </p> <p></p>"},{"location":"api/gef/#function-sparc64get_ra","title":"function <code>SPARC64.get_ra</code>","text":"<pre><code>get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 int | None\n</code></pre>"},{"location":"api/gef/#function-sparc64is_branch_taken","title":"function <code>SPARC64.is_branch_taken</code>","text":"<pre><code>is_branch_taken(insn: __main__.Instruction) \u2192 tuple[bool, str]\n</code></pre>"},{"location":"api/gef/#function-sparc64is_call","title":"function <code>SPARC64.is_call</code>","text":"<pre><code>is_call(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-sparc64is_conditional_branch","title":"function <code>SPARC64.is_conditional_branch</code>","text":"<pre><code>is_conditional_branch(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-sparc64is_ret","title":"function <code>SPARC64.is_ret</code>","text":"<pre><code>is_ret(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-sparc64mprotect_asm","title":"function <code>SPARC64.mprotect_asm</code>","text":"<pre><code>mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-sparc64register","title":"function <code>SPARC64.register</code>","text":"<pre><code>register(name: str) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-sparc64reset_caches","title":"function <code>SPARC64.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-sparc64supports_gdb_arch","title":"function <code>SPARC64.supports_gdb_arch</code>","text":"<pre><code>supports_gdb_arch(gdb_arch: str) \u2192 bool | None\n</code></pre> <p>If implemented by a child <code>Architecture</code>, this function dictates if the current class supports the loaded ELF file (which can be accessed via <code>gef.binary</code>). This callback function will override any assumption made by GEF to determine the architecture. </p>"},{"location":"api/gef/#class-scansectioncommand","title":"class <code>ScanSectionCommand</code>","text":"<p>Search for addresses that are located in a memory mapping (haystack) that belonging to another (needle). </p> <p></p>"},{"location":"api/gef/#function-scansectioncommand__init__","title":"function <code>ScanSectionCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-scansectioncommandsettings","title":"property ScanSectionCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-scansectioncommandadd_setting","title":"function <code>ScanSectionCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-scansectioncommanddel_setting","title":"function <code>ScanSectionCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-scansectioncommanddo_invoke","title":"function <code>ScanSectionCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-scansectioncommandget_setting","title":"function <code>ScanSectionCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-scansectioncommandhas_setting","title":"function <code>ScanSectionCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-scansectioncommandinvoke","title":"function <code>ScanSectionCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-scansectioncommandpost_load","title":"function <code>ScanSectionCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-scansectioncommandpre_load","title":"function <code>ScanSectionCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-scansectioncommandusage","title":"function <code>ScanSectionCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-searchpatterncommand","title":"class <code>SearchPatternCommand</code>","text":"<p>SearchPatternCommand: search a pattern in memory. If given an hex value (starting with 0x) the command will also try to look for upwards cross-references to this address. </p> <p></p>"},{"location":"api/gef/#function-searchpatterncommand__init__","title":"function <code>SearchPatternCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-searchpatterncommandsettings","title":"property SearchPatternCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-searchpatterncommandadd_setting","title":"function <code>SearchPatternCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-searchpatterncommanddel_setting","title":"function <code>SearchPatternCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-searchpatterncommanddo_invoke","title":"function <code>SearchPatternCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-searchpatterncommandget_setting","title":"function <code>SearchPatternCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-searchpatterncommandhas_setting","title":"function <code>SearchPatternCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-searchpatterncommandinvoke","title":"function <code>SearchPatternCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-searchpatterncommandpost_load","title":"function <code>SearchPatternCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-searchpatterncommandpre_load","title":"function <code>SearchPatternCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-searchpatterncommandprint_loc","title":"function <code>SearchPatternCommand.print_loc</code>","text":"<pre><code>print_loc(loc: tuple[int, int, str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-searchpatterncommandprint_section","title":"function <code>SearchPatternCommand.print_section</code>","text":"<pre><code>print_section(section: __main__.Section) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-searchpatterncommandsearch_binpattern_by_address","title":"function <code>SearchPatternCommand.search_binpattern_by_address</code>","text":"<pre><code>search_binpattern_by_address(\n    binpattern: bytes,\n    start_address: int,\n    end_address: int\n) \u2192 list[tuple[int, int, str]]\n</code></pre> <p>Search a binary pattern within a range defined by arguments. </p> <p></p>"},{"location":"api/gef/#function-searchpatterncommandsearch_pattern","title":"function <code>SearchPatternCommand.search_pattern</code>","text":"<pre><code>search_pattern(pattern: str, section_name: str) \u2192 None\n</code></pre> <p>Search a pattern within the whole userland memory. </p> <p></p>"},{"location":"api/gef/#function-searchpatterncommandsearch_pattern_by_address","title":"function <code>SearchPatternCommand.search_pattern_by_address</code>","text":"<pre><code>search_pattern_by_address(\n    pattern: str,\n    start_address: int,\n    end_address: int\n) \u2192 list[tuple[int, int, str]]\n</code></pre> <p>Search a pattern within a range defined by arguments. </p> <p></p>"},{"location":"api/gef/#function-searchpatterncommandusage","title":"function <code>SearchPatternCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-section","title":"class <code>Section</code>","text":"<p>GEF representation of process memory sections. </p> <p></p>"},{"location":"api/gef/#function-section__init__","title":"function <code>Section.__init__</code>","text":"<pre><code>__init__(**kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-sectionrealpath","title":"property Section.realpath","text":""},{"location":"api/gef/#property-sectionsize","title":"property Section.size","text":""},{"location":"api/gef/#function-sectioncontains","title":"function <code>Section.contains</code>","text":"<pre><code>contains(addr: int) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-sectionis_executable","title":"function <code>Section.is_executable</code>","text":"<pre><code>is_executable() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-sectionis_readable","title":"function <code>Section.is_readable</code>","text":"<pre><code>is_readable() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-sectionis_writable","title":"function <code>Section.is_writable</code>","text":"<pre><code>is_writable() \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-sectionoverlaps","title":"function <code>Section.overlaps</code>","text":"<pre><code>overlaps(other: 'Section') \u2192 bool\n</code></pre>"},{"location":"api/gef/#class-sectionbasefunction","title":"class <code>SectionBaseFunction</code>","text":"<p>Return the matching file's base address plus an optional offset. Defaults to current file. Note that quotes need to be escaped </p> <p></p>"},{"location":"api/gef/#function-sectionbasefunction__init__","title":"function <code>SectionBaseFunction.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-sectionbasefunctionarg_to_long","title":"function <code>SectionBaseFunction.arg_to_long</code>","text":"<pre><code>arg_to_long(args: Any, index: int, default: int = 0) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-sectionbasefunctiondo_invoke","title":"function <code>SectionBaseFunction.do_invoke</code>","text":"<pre><code>do_invoke(args: list) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-sectionbasefunctioninvoke","title":"function <code>SectionBaseFunction.invoke</code>","text":"<pre><code>invoke(*args: Any) \u2192 int\n</code></pre>"},{"location":"api/gef/#class-shdr","title":"class <code>Shdr</code>","text":""},{"location":"api/gef/#function-shdr__init__","title":"function <code>Shdr.__init__</code>","text":"<pre><code>__init__(elf: __main__.Elf | None, off: int) \u2192 None\n</code></pre>"},{"location":"api/gef/#class-shellcodecommand","title":"class <code>ShellcodeCommand</code>","text":"<p>ShellcodeCommand uses @JonathanSalwan simple-yet-awesome shellcode API to download shellcodes. </p> <p></p>"},{"location":"api/gef/#function-shellcodecommand__init__","title":"function <code>ShellcodeCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-shellcodecommandsettings","title":"property ShellcodeCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-shellcodecommandadd_setting","title":"function <code>ShellcodeCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-shellcodecommanddel_setting","title":"function <code>ShellcodeCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-shellcodecommanddo_invoke","title":"function <code>ShellcodeCommand.do_invoke</code>","text":"<pre><code>do_invoke(_: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-shellcodecommandget_setting","title":"function <code>ShellcodeCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-shellcodecommandhas_setting","title":"function <code>ShellcodeCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-shellcodecommandinvoke","title":"function <code>ShellcodeCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-shellcodecommandpost_load","title":"function <code>ShellcodeCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-shellcodecommandpre_load","title":"function <code>ShellcodeCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-shellcodecommandusage","title":"function <code>ShellcodeCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-shellcodegetcommand","title":"class <code>ShellcodeGetCommand</code>","text":"<p>Download shellcode from shell-storm's shellcode database. </p> <p></p>"},{"location":"api/gef/#function-shellcodegetcommand__init__","title":"function <code>ShellcodeGetCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-shellcodegetcommandsettings","title":"property ShellcodeGetCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-shellcodegetcommandadd_setting","title":"function <code>ShellcodeGetCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-shellcodegetcommanddel_setting","title":"function <code>ShellcodeGetCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-shellcodegetcommanddo_invoke","title":"function <code>ShellcodeGetCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-shellcodegetcommandget_setting","title":"function <code>ShellcodeGetCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-shellcodegetcommandget_shellcode","title":"function <code>ShellcodeGetCommand.get_shellcode</code>","text":"<pre><code>get_shellcode(sid: int) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-shellcodegetcommandhas_setting","title":"function <code>ShellcodeGetCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-shellcodegetcommandinvoke","title":"function <code>ShellcodeGetCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-shellcodegetcommandpost_load","title":"function <code>ShellcodeGetCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-shellcodegetcommandpre_load","title":"function <code>ShellcodeGetCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-shellcodegetcommandusage","title":"function <code>ShellcodeGetCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-shellcodesearchcommand","title":"class <code>ShellcodeSearchCommand</code>","text":"<p>Search pattern in shell-storm's shellcode database. </p> <p></p>"},{"location":"api/gef/#function-shellcodesearchcommand__init__","title":"function <code>ShellcodeSearchCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-shellcodesearchcommandsettings","title":"property ShellcodeSearchCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-shellcodesearchcommandadd_setting","title":"function <code>ShellcodeSearchCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-shellcodesearchcommanddel_setting","title":"function <code>ShellcodeSearchCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-shellcodesearchcommanddo_invoke","title":"function <code>ShellcodeSearchCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-shellcodesearchcommandget_setting","title":"function <code>ShellcodeSearchCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-shellcodesearchcommandhas_setting","title":"function <code>ShellcodeSearchCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-shellcodesearchcommandinvoke","title":"function <code>ShellcodeSearchCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-shellcodesearchcommandpost_load","title":"function <code>ShellcodeSearchCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-shellcodesearchcommandpre_load","title":"function <code>ShellcodeSearchCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-shellcodesearchcommandusage","title":"function <code>ShellcodeSearchCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-skipicommand","title":"class <code>SkipiCommand</code>","text":"<p>Skip N instruction(s) execution </p> <p></p>"},{"location":"api/gef/#function-skipicommand__init__","title":"function <code>SkipiCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-skipicommandsettings","title":"property SkipiCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-skipicommandadd_setting","title":"function <code>SkipiCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-skipicommanddel_setting","title":"function <code>SkipiCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-skipicommandwrapper","title":"function <code>SkipiCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-skipicommandget_setting","title":"function <code>SkipiCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-skipicommandhas_setting","title":"function <code>SkipiCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-skipicommandinvoke","title":"function <code>SkipiCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-skipicommandpost_load","title":"function <code>SkipiCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-skipicommandpre_load","title":"function <code>SkipiCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-skipicommandusage","title":"function <code>SkipiCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-smartevalcommand","title":"class <code>SmartEvalCommand</code>","text":"<p>SmartEval: Smart eval (vague approach to mimic WinDBG <code>?</code>). </p> <p></p>"},{"location":"api/gef/#function-smartevalcommand__init__","title":"function <code>SmartEvalCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-smartevalcommandsettings","title":"property SmartEvalCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-smartevalcommandadd_setting","title":"function <code>SmartEvalCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-smartevalcommanddel_setting","title":"function <code>SmartEvalCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-smartevalcommanddistance","title":"function <code>SmartEvalCommand.distance</code>","text":"<pre><code>distance(args: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-smartevalcommanddo_invoke","title":"function <code>SmartEvalCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-smartevalcommandevaluate","title":"function <code>SmartEvalCommand.evaluate</code>","text":"<pre><code>evaluate(expr: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-smartevalcommandget_setting","title":"function <code>SmartEvalCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-smartevalcommandhas_setting","title":"function <code>SmartEvalCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-smartevalcommandinvoke","title":"function <code>SmartEvalCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-smartevalcommandpost_load","title":"function <code>SmartEvalCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-smartevalcommandpre_load","title":"function <code>SmartEvalCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-smartevalcommandusage","title":"function <code>SmartEvalCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-stackoffsetfunction","title":"class <code>StackOffsetFunction</code>","text":"<p>Return the current stack base address plus an optional offset. </p> <p></p>"},{"location":"api/gef/#function-stackoffsetfunction__init__","title":"function <code>StackOffsetFunction.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-stackoffsetfunctionarg_to_long","title":"function <code>StackOffsetFunction.arg_to_long</code>","text":"<pre><code>arg_to_long(args: Any, index: int, default: int = 0) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-stackoffsetfunctiondo_invoke","title":"function <code>StackOffsetFunction.do_invoke</code>","text":"<pre><code>do_invoke(args: list) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-stackoffsetfunctioninvoke","title":"function <code>StackOffsetFunction.invoke</code>","text":"<pre><code>invoke(*args: Any) \u2192 int\n</code></pre>"},{"location":"api/gef/#class-stepovercommand","title":"class <code>StepoverCommand</code>","text":"<p>Breaks on the instruction immediately following this one. Ex: Step over call instruction </p> <p></p>"},{"location":"api/gef/#function-stepovercommand__init__","title":"function <code>StepoverCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-stepovercommandsettings","title":"property StepoverCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-stepovercommandadd_setting","title":"function <code>StepoverCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-stepovercommanddel_setting","title":"function <code>StepoverCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-stepovercommanddo_invoke","title":"function <code>StepoverCommand.do_invoke</code>","text":"<pre><code>do_invoke(_: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-stepovercommandget_setting","title":"function <code>StepoverCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-stepovercommandhas_setting","title":"function <code>StepoverCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-stepovercommandinvoke","title":"function <code>StepoverCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-stepovercommandpost_load","title":"function <code>StepoverCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-stepovercommandpre_load","title":"function <code>StepoverCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-stepovercommandusage","title":"function <code>StepoverCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-stubbreakpoint","title":"class <code>StubBreakpoint</code>","text":"<p>Create a breakpoint to permanently disable a call (fork/alarm/signal/etc.). </p> <p></p>"},{"location":"api/gef/#function-stubbreakpoint__init__","title":"function <code>StubBreakpoint.__init__</code>","text":"<pre><code>__init__(func: str, retval: int | None) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-stubbreakpointstop","title":"function <code>StubBreakpoint.stop</code>","text":"<pre><code>stop() \u2192 bool\n</code></pre>"},{"location":"api/gef/#class-stubcommand","title":"class <code>StubCommand</code>","text":"<p>Stub out the specified function. This function is useful when needing to skip one function to be called and disrupt your runtime flow (ex. fork). </p> <p></p>"},{"location":"api/gef/#function-stubcommand__init__","title":"function <code>StubCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-stubcommandsettings","title":"property StubCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-stubcommandadd_setting","title":"function <code>StubCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-stubcommanddel_setting","title":"function <code>StubCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-stubcommandwrapper","title":"function <code>StubCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-stubcommandget_setting","title":"function <code>StubCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-stubcommandhas_setting","title":"function <code>StubCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-stubcommandinvoke","title":"function <code>StubCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-stubcommandpost_load","title":"function <code>StubCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-stubcommandpre_load","title":"function <code>StubCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-stubcommandusage","title":"function <code>StubCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-tracefreebreakpoint","title":"class <code>TraceFreeBreakpoint</code>","text":"<p>Track calls to free() and attempts to detect inconsistencies. </p> <p></p>"},{"location":"api/gef/#function-tracefreebreakpoint__init__","title":"function <code>TraceFreeBreakpoint.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-tracefreebreakpointstop","title":"function <code>TraceFreeBreakpoint.stop</code>","text":"<pre><code>stop() \u2192 bool\n</code></pre>"},{"location":"api/gef/#class-tracefreeretbreakpoint","title":"class <code>TraceFreeRetBreakpoint</code>","text":"<p>Internal temporary breakpoint to track free()d values. </p> <p></p>"},{"location":"api/gef/#function-tracefreeretbreakpoint__init__","title":"function <code>TraceFreeRetBreakpoint.__init__</code>","text":"<pre><code>__init__(addr: int) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-tracefreeretbreakpointstop","title":"function <code>TraceFreeRetBreakpoint.stop</code>","text":"<pre><code>stop() \u2192 bool\n</code></pre>"},{"location":"api/gef/#class-tracemallocbreakpoint","title":"class <code>TraceMallocBreakpoint</code>","text":"<p>Track allocations done with malloc() or calloc(). </p> <p></p>"},{"location":"api/gef/#function-tracemallocbreakpoint__init__","title":"function <code>TraceMallocBreakpoint.__init__</code>","text":"<pre><code>__init__(name: str) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-tracemallocbreakpointstop","title":"function <code>TraceMallocBreakpoint.stop</code>","text":"<pre><code>stop() \u2192 bool\n</code></pre>"},{"location":"api/gef/#class-tracemallocretbreakpoint","title":"class <code>TraceMallocRetBreakpoint</code>","text":"<p>Internal temporary breakpoint to retrieve the return value of malloc(). </p> <p></p>"},{"location":"api/gef/#function-tracemallocretbreakpoint__init__","title":"function <code>TraceMallocRetBreakpoint.__init__</code>","text":"<pre><code>__init__(size: int, name: str) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-tracemallocretbreakpointstop","title":"function <code>TraceMallocRetBreakpoint.stop</code>","text":"<pre><code>stop() \u2192 bool\n</code></pre>"},{"location":"api/gef/#class-tracereallocbreakpoint","title":"class <code>TraceReallocBreakpoint</code>","text":"<p>Track re-allocations done with realloc(). </p> <p></p>"},{"location":"api/gef/#function-tracereallocbreakpoint__init__","title":"function <code>TraceReallocBreakpoint.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-tracereallocbreakpointstop","title":"function <code>TraceReallocBreakpoint.stop</code>","text":"<pre><code>stop() \u2192 bool\n</code></pre>"},{"location":"api/gef/#class-tracereallocretbreakpoint","title":"class <code>TraceReallocRetBreakpoint</code>","text":"<p>Internal temporary breakpoint to retrieve the return value of realloc(). </p> <p></p>"},{"location":"api/gef/#function-tracereallocretbreakpoint__init__","title":"function <code>TraceReallocRetBreakpoint.__init__</code>","text":"<pre><code>__init__(ptr: int, size: int) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-tracereallocretbreakpointstop","title":"function <code>TraceReallocRetBreakpoint.stop</code>","text":"<pre><code>stop() \u2192 bool\n</code></pre>"},{"location":"api/gef/#class-traceruncommand","title":"class <code>TraceRunCommand</code>","text":"<p>Create a runtime trace of all instructions executed from $pc to LOCATION specified. The trace is stored in a text file that can be next imported in IDA Pro to visualize the runtime path. </p> <p></p>"},{"location":"api/gef/#function-traceruncommand__init__","title":"function <code>TraceRunCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-traceruncommandsettings","title":"property TraceRunCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-traceruncommandadd_setting","title":"function <code>TraceRunCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-traceruncommanddel_setting","title":"function <code>TraceRunCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-traceruncommanddo_invoke","title":"function <code>TraceRunCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-traceruncommandget_frames_size","title":"function <code>TraceRunCommand.get_frames_size</code>","text":"<pre><code>get_frames_size() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-traceruncommandget_setting","title":"function <code>TraceRunCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-traceruncommandhas_setting","title":"function <code>TraceRunCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-traceruncommandinvoke","title":"function <code>TraceRunCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-traceruncommandpost_load","title":"function <code>TraceRunCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-traceruncommandpre_load","title":"function <code>TraceRunCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-traceruncommandstart_tracing","title":"function <code>TraceRunCommand.start_tracing</code>","text":"<pre><code>start_tracing(loc_start: int, loc_end: int, depth: int) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-traceruncommandtrace","title":"function <code>TraceRunCommand.trace</code>","text":"<pre><code>trace(loc_start: int, loc_end: int, depth: int) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-traceruncommandusage","title":"function <code>TraceRunCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-uafwatchpoint","title":"class <code>UafWatchpoint</code>","text":"<p>Custom watchpoints set TraceFreeBreakpoint() to monitor free()d pointers being used. </p> <p></p>"},{"location":"api/gef/#function-uafwatchpoint__init__","title":"function <code>UafWatchpoint.__init__</code>","text":"<pre><code>__init__(addr: int) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-uafwatchpointstop","title":"function <code>UafWatchpoint.stop</code>","text":"<pre><code>stop() \u2192 bool\n</code></pre> <p>If this method is triggered, we likely have a UaF. Break the execution and report it. </p>"},{"location":"api/gef/#class-vmmapcommand","title":"class <code>VMMapCommand</code>","text":"<p>Display a comprehensive layout of the virtual memory mapping. If a filter argument, GEF will filter out the mapping whose pathname do not match that filter. </p> <p></p>"},{"location":"api/gef/#function-vmmapcommand__init__","title":"function <code>VMMapCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-vmmapcommandsettings","title":"property VMMapCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-vmmapcommandadd_setting","title":"function <code>VMMapCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-vmmapcommanddel_setting","title":"function <code>VMMapCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-vmmapcommandwrapper","title":"function <code>VMMapCommand.wrapper</code>","text":"<pre><code>wrapper(*args: Any, **kwargs: Any) \u2192 Callable\n</code></pre>"},{"location":"api/gef/#function-vmmapcommandformat_addr_filter","title":"function <code>VMMapCommand.format_addr_filter</code>","text":"<pre><code>format_addr_filter(arg: str, addr: int)\n</code></pre>"},{"location":"api/gef/#function-vmmapcommandget_setting","title":"function <code>VMMapCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-vmmapcommandhas_setting","title":"function <code>VMMapCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-vmmapcommandinvoke","title":"function <code>VMMapCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-vmmapcommandis_integer","title":"function <code>VMMapCommand.is_integer</code>","text":"<pre><code>is_integer(n: str) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-vmmapcommandpost_load","title":"function <code>VMMapCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-vmmapcommandpre_load","title":"function <code>VMMapCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-vmmapcommandprint_entry","title":"function <code>VMMapCommand.print_entry</code>","text":"<pre><code>print_entry(entry: __main__.Section) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-vmmapcommandshow_legend","title":"function <code>VMMapCommand.show_legend</code>","text":"<pre><code>show_legend() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-vmmapcommandusage","title":"function <code>VMMapCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-validationerror","title":"class <code>ValidationError</code>","text":""},{"location":"api/gef/#class-versioncommand","title":"class <code>VersionCommand</code>","text":"<p>Display GEF version info. </p> <p></p>"},{"location":"api/gef/#function-versioncommand__init__","title":"function <code>VersionCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-versioncommandsettings","title":"property VersionCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-versioncommandadd_setting","title":"function <code>VersionCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-versioncommanddel_setting","title":"function <code>VersionCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-versioncommanddo_invoke","title":"function <code>VersionCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-versioncommandget_setting","title":"function <code>VersionCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-versioncommandhas_setting","title":"function <code>VersionCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-versioncommandinvoke","title":"function <code>VersionCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-versioncommandpost_load","title":"function <code>VersionCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-versioncommandpre_load","title":"function <code>VersionCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-versioncommandusage","title":"function <code>VersionCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-x86","title":"class <code>X86</code>","text":""},{"location":"api/gef/#property-x86endianness","title":"property X86.endianness","text":""},{"location":"api/gef/#property-x86fp","title":"property X86.fp","text":""},{"location":"api/gef/#property-x86pc","title":"property X86.pc","text":""},{"location":"api/gef/#property-x86ptrsize","title":"property X86.ptrsize","text":""},{"location":"api/gef/#property-x86registers","title":"property X86.registers","text":""},{"location":"api/gef/#property-x86sp","title":"property X86.sp","text":""},{"location":"api/gef/#function-x86canary_address","title":"function <code>X86.canary_address</code>","text":"<pre><code>canary_address() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-x86flag_register_to_human","title":"function <code>X86.flag_register_to_human</code>","text":"<pre><code>flag_register_to_human(val: int | None = None) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-x86get_ith_parameter","title":"function <code>X86.get_ith_parameter</code>","text":"<pre><code>get_ith_parameter(i: int, in_func: bool = True) \u2192 tuple[str, int | None]\n</code></pre>"},{"location":"api/gef/#function-x86get_ra","title":"function <code>X86.get_ra</code>","text":"<pre><code>get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 int | None\n</code></pre>"},{"location":"api/gef/#function-x86is_branch_taken","title":"function <code>X86.is_branch_taken</code>","text":"<pre><code>is_branch_taken(insn: __main__.Instruction) \u2192 tuple[bool, str]\n</code></pre>"},{"location":"api/gef/#function-x86is_call","title":"function <code>X86.is_call</code>","text":"<pre><code>is_call(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-x86is_conditional_branch","title":"function <code>X86.is_conditional_branch</code>","text":"<pre><code>is_conditional_branch(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-x86is_ret","title":"function <code>X86.is_ret</code>","text":"<pre><code>is_ret(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-x86mprotect_asm","title":"function <code>X86.mprotect_asm</code>","text":"<pre><code>mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-x86register","title":"function <code>X86.register</code>","text":"<pre><code>register(name: str) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-x86reset_caches","title":"function <code>X86.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-x86supports_gdb_arch","title":"function <code>X86.supports_gdb_arch</code>","text":"<pre><code>supports_gdb_arch(gdb_arch: str) \u2192 bool | None\n</code></pre> <p>If implemented by a child <code>Architecture</code>, this function dictates if the current class supports the loaded ELF file (which can be accessed via <code>gef.binary</code>). This callback function will override any assumption made by GEF to determine the architecture. </p>"},{"location":"api/gef/#class-x86_64","title":"class <code>X86_64</code>","text":""},{"location":"api/gef/#property-x86_64endianness","title":"property X86_64.endianness","text":""},{"location":"api/gef/#property-x86_64fp","title":"property X86_64.fp","text":""},{"location":"api/gef/#property-x86_64pc","title":"property X86_64.pc","text":""},{"location":"api/gef/#property-x86_64ptrsize","title":"property X86_64.ptrsize","text":""},{"location":"api/gef/#property-x86_64registers","title":"property X86_64.registers","text":""},{"location":"api/gef/#property-x86_64sp","title":"property X86_64.sp","text":""},{"location":"api/gef/#function-x86_64canary_address","title":"function <code>X86_64.canary_address</code>","text":"<pre><code>canary_address() \u2192 int\n</code></pre>"},{"location":"api/gef/#function-x86_64flag_register_to_human","title":"function <code>X86_64.flag_register_to_human</code>","text":"<pre><code>flag_register_to_human(val: int | None = None) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-x86_64get_ith_parameter","title":"function <code>X86_64.get_ith_parameter</code>","text":"<pre><code>get_ith_parameter(i: int, in_func: bool = True) \u2192 tuple[str, int | None]\n</code></pre> <p>Retrieves the correct parameter used for the current function call. </p> <p></p>"},{"location":"api/gef/#function-x86_64get_ra","title":"function <code>X86_64.get_ra</code>","text":"<pre><code>get_ra(insn: __main__.Instruction, frame: 'gdb.Frame') \u2192 int | None\n</code></pre>"},{"location":"api/gef/#function-x86_64is_branch_taken","title":"function <code>X86_64.is_branch_taken</code>","text":"<pre><code>is_branch_taken(insn: __main__.Instruction) \u2192 tuple[bool, str]\n</code></pre>"},{"location":"api/gef/#function-x86_64is_call","title":"function <code>X86_64.is_call</code>","text":"<pre><code>is_call(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-x86_64is_conditional_branch","title":"function <code>X86_64.is_conditional_branch</code>","text":"<pre><code>is_conditional_branch(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-x86_64is_ret","title":"function <code>X86_64.is_ret</code>","text":"<pre><code>is_ret(insn: __main__.Instruction) \u2192 bool\n</code></pre>"},{"location":"api/gef/#function-x86_64mprotect_asm","title":"function <code>X86_64.mprotect_asm</code>","text":"<pre><code>mprotect_asm(addr: int, size: int, perm: __main__.Permission) \u2192 str\n</code></pre>"},{"location":"api/gef/#function-x86_64register","title":"function <code>X86_64.register</code>","text":"<pre><code>register(name: str) \u2192 int\n</code></pre>"},{"location":"api/gef/#function-x86_64reset_caches","title":"function <code>X86_64.reset_caches</code>","text":"<pre><code>reset_caches() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-x86_64supports_gdb_arch","title":"function <code>X86_64.supports_gdb_arch</code>","text":"<pre><code>supports_gdb_arch(gdb_arch: str) \u2192 bool | None\n</code></pre> <p>If implemented by a child <code>Architecture</code>, this function dictates if the current class supports the loaded ELF file (which can be accessed via <code>gef.binary</code>). This callback function will override any assumption made by GEF to determine the architecture. </p>"},{"location":"api/gef/#class-xaddressinfocommand","title":"class <code>XAddressInfoCommand</code>","text":"<p>Retrieve and display runtime information for the location(s) given as parameter. </p> <p></p>"},{"location":"api/gef/#function-xaddressinfocommand__init__","title":"function <code>XAddressInfoCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-xaddressinfocommandsettings","title":"property XAddressInfoCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-xaddressinfocommandadd_setting","title":"function <code>XAddressInfoCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-xaddressinfocommanddel_setting","title":"function <code>XAddressInfoCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-xaddressinfocommanddo_invoke","title":"function <code>XAddressInfoCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xaddressinfocommandget_setting","title":"function <code>XAddressInfoCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-xaddressinfocommandhas_setting","title":"function <code>XAddressInfoCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-xaddressinfocommandinfos","title":"function <code>XAddressInfoCommand.infos</code>","text":"<pre><code>infos(address: int) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xaddressinfocommandinvoke","title":"function <code>XAddressInfoCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xaddressinfocommandpost_load","title":"function <code>XAddressInfoCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xaddressinfocommandpre_load","title":"function <code>XAddressInfoCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xaddressinfocommandusage","title":"function <code>XAddressInfoCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-xfilescommand","title":"class <code>XFilesCommand</code>","text":"<p>Shows all libraries (and sections) loaded by binary. This command extends the GDB command <code>info files</code>, by retrieving more information from extra sources, and providing a better display. If an argument FILE is given, the output will grep information related to only that file. If an argument name is also given, the output will grep to the name within FILE. </p> <p></p>"},{"location":"api/gef/#function-xfilescommand__init__","title":"function <code>XFilesCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-xfilescommandsettings","title":"property XFilesCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-xfilescommandadd_setting","title":"function <code>XFilesCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-xfilescommanddel_setting","title":"function <code>XFilesCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-xfilescommanddo_invoke","title":"function <code>XFilesCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xfilescommandget_setting","title":"function <code>XFilesCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-xfilescommandhas_setting","title":"function <code>XFilesCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-xfilescommandinvoke","title":"function <code>XFilesCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xfilescommandpost_load","title":"function <code>XFilesCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xfilescommandpre_load","title":"function <code>XFilesCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xfilescommandusage","title":"function <code>XFilesCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-xormemorycommand","title":"class <code>XorMemoryCommand</code>","text":"<p>XOR a block of memory. The command allows to simply display the result, or patch it runtime at runtime. </p> <p></p>"},{"location":"api/gef/#function-xormemorycommand__init__","title":"function <code>XorMemoryCommand.__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/gef/#property-xormemorycommandsettings","title":"property XorMemoryCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-xormemorycommandadd_setting","title":"function <code>XorMemoryCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-xormemorycommanddel_setting","title":"function <code>XorMemoryCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-xormemorycommanddo_invoke","title":"function <code>XorMemoryCommand.do_invoke</code>","text":"<pre><code>do_invoke(_: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xormemorycommandget_setting","title":"function <code>XorMemoryCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-xormemorycommandhas_setting","title":"function <code>XorMemoryCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-xormemorycommandinvoke","title":"function <code>XorMemoryCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xormemorycommandpost_load","title":"function <code>XorMemoryCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xormemorycommandpre_load","title":"function <code>XorMemoryCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xormemorycommandusage","title":"function <code>XorMemoryCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-xormemorydisplaycommand","title":"class <code>XorMemoryDisplayCommand</code>","text":"<p>Display a block of memory pointed by ADDRESS by xor-ing each byte with KEY. The key must be provided in hexadecimal format. </p> <p></p>"},{"location":"api/gef/#function-xormemorydisplaycommand__init__","title":"function <code>XorMemoryDisplayCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-xormemorydisplaycommandsettings","title":"property XorMemoryDisplayCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-xormemorydisplaycommandadd_setting","title":"function <code>XorMemoryDisplayCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-xormemorydisplaycommanddel_setting","title":"function <code>XorMemoryDisplayCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-xormemorydisplaycommanddo_invoke","title":"function <code>XorMemoryDisplayCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xormemorydisplaycommandget_setting","title":"function <code>XorMemoryDisplayCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-xormemorydisplaycommandhas_setting","title":"function <code>XorMemoryDisplayCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-xormemorydisplaycommandinvoke","title":"function <code>XorMemoryDisplayCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xormemorydisplaycommandpost_load","title":"function <code>XorMemoryDisplayCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xormemorydisplaycommandpre_load","title":"function <code>XorMemoryDisplayCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xormemorydisplaycommandusage","title":"function <code>XorMemoryDisplayCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-xormemorypatchcommand","title":"class <code>XorMemoryPatchCommand</code>","text":"<p>Patch a block of memory pointed by ADDRESS by xor-ing each byte with KEY. The key must be provided in hexadecimal format. </p> <p></p>"},{"location":"api/gef/#function-xormemorypatchcommand__init__","title":"function <code>XorMemoryPatchCommand.__init__</code>","text":"<pre><code>__init__(*args: Any, **kwargs: Any) \u2192 None\n</code></pre>"},{"location":"api/gef/#property-xormemorypatchcommandsettings","title":"property XorMemoryPatchCommand.settings","text":"<p>Return the list of settings for this command. </p> <p></p>"},{"location":"api/gef/#function-xormemorypatchcommandadd_setting","title":"function <code>XorMemoryPatchCommand.add_setting</code>","text":"<pre><code>add_setting(\n    name: str,\n    value: tuple[typing.Any, type, str],\n    description: str = ''\n) \u2192 None\n</code></pre> <p><code>add_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name] = value</code> instead </p> <p></p>"},{"location":"api/gef/#function-xormemorypatchcommanddel_setting","title":"function <code>XorMemoryPatchCommand.del_setting</code>","text":"<pre><code>del_setting(name: str) \u2192 None\n</code></pre> <p><code>del_setting</code> is DEPRECATED and will be removed in the future.  Use <code>del self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-xormemorypatchcommanddo_invoke","title":"function <code>XorMemoryPatchCommand.do_invoke</code>","text":"<pre><code>do_invoke(argv: list[str]) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xormemorypatchcommandget_setting","title":"function <code>XorMemoryPatchCommand.get_setting</code>","text":"<pre><code>get_setting(name: str) \u2192 Any\n</code></pre> <p><code>get_setting</code> is DEPRECATED and will be removed in the future.  Use <code>self[setting_name]</code> instead </p> <p></p>"},{"location":"api/gef/#function-xormemorypatchcommandhas_setting","title":"function <code>XorMemoryPatchCommand.has_setting</code>","text":"<pre><code>has_setting(name: str) \u2192 bool\n</code></pre> <p><code>has_setting</code> is DEPRECATED and will be removed in the future.  Use <code>setting_name in self</code> instead </p> <p></p>"},{"location":"api/gef/#function-xormemorypatchcommandinvoke","title":"function <code>XorMemoryPatchCommand.invoke</code>","text":"<pre><code>invoke(args: str, from_tty: bool) \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xormemorypatchcommandpost_load","title":"function <code>XorMemoryPatchCommand.post_load</code>","text":"<pre><code>post_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xormemorypatchcommandpre_load","title":"function <code>XorMemoryPatchCommand.pre_load</code>","text":"<pre><code>pre_load() \u2192 None\n</code></pre>"},{"location":"api/gef/#function-xormemorypatchcommandusage","title":"function <code>XorMemoryPatchCommand.usage</code>","text":"<pre><code>usage() \u2192 None\n</code></pre>"},{"location":"api/gef/#class-zone","title":"class <code>Zone</code>","text":"<p>Zone(name, zone_start, zone_end, filename) </p>"},{"location":"api/gef/#class-classproperty","title":"class <code>classproperty</code>","text":"<p>Make the attribute a <code>classproperty</code>. </p> <p>This file was automatically generated via lazydocs.</p>"},{"location":"commands/aliases/","title":"aliases","text":""},{"location":"commands/aliases/#command-aliases","title":"Command <code>aliases</code>","text":"<p>Base command to add, remove, and list <code>GEF</code> defined aliases.</p> <pre><code>gef\u27a4  aliases\naliases (add|rm|list)\n</code></pre>"},{"location":"commands/aliases/#addingremoving-aliases","title":"Adding/Removing Aliases","text":"<p><code>GEF</code> defines its own aliasing mechanism which overrides the traditional alias that GDB provides through the built-in command <code>alias</code>. To add a new alias, simply use the <code>aliases add</code> command. The \"command\" parameter may contain spaces.</p> <pre><code>aliases add [alias] [command]\n</code></pre> <p>To remove an alias, simply use the <code>aliases rm</code> command.</p> <pre><code>aliases rm [alias]\n</code></pre>"},{"location":"commands/aliases/#listing-aliases","title":"Listing Aliases","text":"<p>One can list aliases by using the <code>aliases ls</code> command. Some sample output of this command is seen below.</p> <pre><code>[+] Aliases defined:\nfmtstr-helper                   \u2192  format-string-helper\ntelescope                       \u2192  dereference\ndps                             \u2192  dereference\ndq                              \u2192  hexdump qword\ndd                              \u2192  hexdump dword\ndw                              \u2192  hexdump word\ndc                              \u2192  hexdump byte\ncs-dis                          \u2192  capstone-disassemble\nctx                             \u2192  context\nstart-break                     \u2192  entry-break\nps                              \u2192  process-search\n[...]\n</code></pre>"},{"location":"commands/aliases/#using-the-configuration-file","title":"Using the Configuration File","text":"<p>Users can also create/modify/delete aliases by editing the <code>GEF</code> configuration file, by default located at <code>~/.gef.rc</code>. The aliases must be in the <code>aliases</code> section of the configuration file.</p> <p>Creating a new alias is as simple as creating a new entry in this section:</p> <pre><code>$ nano ~/.gef.rc\n[...]\n[aliases]\nmy-new-alias = gdb-or-gef-command &lt;arg1&gt; &lt;arg2&gt; &lt;etc...&gt;\n</code></pre>"},{"location":"commands/aliases/#bringing-some-peda-and-windbg-flavours-into-gef","title":"Bringing some PEDA and WinDBG flavours into GEF","text":"<p>For example, for those (like me) who use WinDBG and like its bindings, they can be integrated into GDB via GEF aliases like this:</p> <pre><code>$ nano ~/.gef.rc\n[...]\n[aliases]\n# some windbg aliases\ndps = dereference\ndq = hexdump qword\ndd = hexdump dword\ndw = hexdump word\ndc = hexdump byte\ndt = pcustom\nbl = info breakpoints\nbp = break\nbe = enable breakpoints\nbd = disable breakpoints\nbc = delete breakpoints\ntbp = tbreak\ntba = thbreak\npa = advance\nptc = finish\nt = stepi\np = nexti\ng = gef run\nuf = disassemble\n</code></pre> <p>Or here are some <code>PEDA</code> aliases for people used to using <code>PEDA</code> who made the smart move to <code>GEF</code>.</p> <pre><code># some peda aliases\ntelescope = dereference\nstart = entry-break\nstack = dereference -l 10 $sp\nargv = show args\nkp = info stack\nfindmem = search-pattern\n</code></pre> <p>The aliases will be loaded next time you load GDB (and <code>GEF</code>). Or you can force <code>GEF</code> to reload the settings with the command:</p> <pre><code>gef\u27a4  gef restore\n</code></pre>"},{"location":"commands/arch/","title":"arch","text":""},{"location":"commands/arch/#command-arch","title":"Command <code>arch</code>","text":"<p><code>arch</code> manages the loaded architecture.</p> <p>There are 3 available sub-commands:</p> <ul> <li><code>list</code>: List the installed architectures.</li> <li><code>get</code>: Print the currently loaded architecture, and why it is selected.</li> <li><code>set</code>: Manually set the loaded architecture by providing its name as an argument, or let   gef do magic to detect the architecture by not providing arguments.</li> </ul> <p>[!WARNING] Setting manually should be done as a last resort as GEF expects to find the architecture automatically. Force-setting the architecture can lead to unexpected behavior if not done correctly.</p> <p></p>"},{"location":"commands/aslr/","title":"aslr","text":""},{"location":"commands/aslr/#command-aslr","title":"Command <code>aslr</code>","text":"<p>Easily check, enable or disable ASLR on the debugged binary.</p> <p>Check the status:</p> <pre><code>gef\u27a4  aslr\nASLR is currently disabled\n</code></pre> <p>Activate ASLR:</p> <pre><code>gef\u27a4  aslr on\n[+] Enabling ASLR\ngef\u27a4  aslr\nASLR is currently enabled\n</code></pre> <p>De-activate ASLR:</p> <pre><code>gef\u27a4  aslr off\n[+] Disabling ASLR\n</code></pre> <p>Note: This command cannot affect a process that has already been loaded, to which GDB attached to later. The only way to disable this randomization is by setting the kernel setting <code>/proc/sys/kernel/randomize_va_space</code> to 0..</p>"},{"location":"commands/canary/","title":"canary","text":""},{"location":"commands/canary/#command-canary","title":"Command <code>canary</code>","text":"<p>If the currently debugged process was compiled with the Smash Stack Protector (SSP) - i.e. the <code>-fstack-protector</code> flag was passed to the compiler, this command will display the value of the canary. This makes it convenient to avoid manually searching for this value in memory.</p> <p>The command <code>canary</code> does not take any arguments.</p> <pre><code>gef\u27a4 canary\n</code></pre> <p></p>"},{"location":"commands/checksec/","title":"checksec","text":""},{"location":"commands/checksec/#command-checksec","title":"Command <code>checksec</code>","text":"<p>The <code>checksec</code> command is inspired from <code>checksec.sh</code>. It provides a convenient way to determine which security protections are enabled in a binary.</p> <p>You can use the command on the currently debugged process:</p> <pre><code>gef\u27a4  checksec\n[+] checksec for '/vagrant/test-bin'\nCanary:                                           No\nNX Support:                                       Yes\nPIE Support:                                      No\nNo RPATH:                                         Yes\nNo RUNPATH:                                       Yes\nPartial RelRO:                                    Yes\nFull RelRO:                                       No\n</code></pre> <p>Or specify directly the binary to check, for example:</p> <pre><code>gdb -ex \"checksec ./tests/test-x86\"\n</code></pre>"},{"location":"commands/config/","title":"config","text":""},{"location":"commands/config/#command-gef-config","title":"Command <code>gef config</code>","text":"<p><code>gef</code> reads its config from a file which is by default located at <code>~/.gef.rc</code>, but which can also be specified via the <code>GEF_RC</code> environment variable. In addition, <code>gef</code> can also be configured at runtime with the <code>gef config</code> command.</p> <p>To view all settings for all commands loaded:</p> <pre><code>gef\u27a4  gef config\n</code></pre> <p></p> <p>Or to get one setting value:</p> <pre><code>gef\u27a4  gef config pcustom.struct_path\n</code></pre> <p>Of course you can edit the values. For example, if you want the screen to be cleared before displaying the current context when reaching a breakpoint:</p> <pre><code>gef\u27a4  gef config context.clear_screen 1\n</code></pre> <p>To save the current settings for <code>GEF</code> to the file system to have those options persist across all your future <code>GEF</code> sessions, simply run:</p> <pre><code>gef\u27a4  gef save\n[+] Configuration saved to '/home/vagrant/.gef.rc'\n</code></pre> <p>Upon startup, if <code>$GEF_RC</code> points to an existing file, or otherwise if <code>${HOME}/.gef.rc</code> exists, <code>gef</code> will automatically load its values.</p> <p>To reload the settings during the session, just run:</p> <pre><code>gef\u27a4  gef restore\n[+] Configuration from '/home/hugsy/.gef.rc' restored\n</code></pre> <p>You can tweak this configuration file outside your <code>gdb</code> session to suit your needs.</p>"},{"location":"commands/context/","title":"context","text":""},{"location":"commands/context/#command-context","title":"Command <code>context</code>","text":"<p><code>gef</code> (not unlike <code>PEDA</code> or <code>fG! famous gdbinit</code>) provides comprehensive context menu when hitting a breakpoint.</p> <ul> <li>The register context box displays current register values. Values in red indicate that this   register has had its value changed since the last time execution stopped. It makes it convenient   to track values. Register values can be also accessed and/or dereferenced through the <code>reg</code>   command.</li> <li>The stack context box shows the 10 (by default but can be tweaked) entries in memory pointed by   the stack pointer register. If those values are pointers, they are successively dereferenced.</li> <li>The code context box shows the 10 (by default but can be tweaked) next instructions to be executed.</li> </ul>"},{"location":"commands/context/#adding-custom-context-panes","title":"Adding custom context panes","text":"<p>As well as using the built-in context panes, you can add your own custom pane that will be displayed at each <code>break</code>-like event with all the other panes. Custom panes can be added using the API:</p> <pre><code>register_external_context_pane(pane_name, display_pane_function, pane_title_function)\n</code></pre> <p>Check the API documentation to see a full usage of the registration API.</p>"},{"location":"commands/context/#editing-context-layout","title":"Editing context layout","text":"<p><code>gef</code> allows you to configure your own setup for the display, by re-arranging the order with which contexts will be displayed.</p> <pre><code>gef\u27a4 gef config context.layout\n</code></pre> <p>There are currently 6 sections that can be displayed:</p> <ul> <li><code>legend</code> : a text explanation of the color code</li> <li><code>regs</code> : the state of registers</li> <li><code>stack</code> : the content of memory pointed by <code>$sp</code> register</li> <li><code>code</code> : the code being executed</li> <li><code>args</code> : if stopping at a function calls, print the call arguments</li> <li><code>source</code> : if compiled with source, this will show the corresponding line of source code</li> <li><code>threads</code> : all the threads</li> <li><code>trace</code> : the execution call trace</li> <li><code>extra</code> : if an automatic behavior is detected (vulnerable format string, heap vulnerability,   etc.) it will be displayed in this pane</li> <li><code>memory</code> : peek into arbitrary memory locations</li> </ul> <p>To hide a section, simply use the <code>context.layout</code> setting, and prepend the section name with <code>-</code> or just omit it.</p> <pre><code>gef\u27a4 gef config context.layout \"-legend regs stack code args -source -threads -trace extra memory\"\n</code></pre> <p>This configuration will not display the <code>legend</code>, <code>source</code>, <code>threads</code>, and <code>trace</code> sections.</p> <p>The <code>memory</code> pane will display the content of all locations specified by the <code>memory</code> command. For instance,</p> <pre><code>gef\u27a4 memory watch $sp 0x40 byte\n</code></pre> <p>will print a hexdump version of 0x40 bytes of the stack. This command makes it convenient for tracking the evolution of arbitrary locations in memory. Tracked locations can be removed one by one using <code>memory unwatch</code>, or altogether with <code>memory reset</code>.</p> <p>The size of most sections are also customizable:</p> <ul> <li><code>nb_lines_stack</code> configures how many lines of the stack to show.</li> <li><code>nb_lines_backtrack</code> configures how many lines of the backtrace to show.</li> <li><code>nb_lines_code</code> and <code>nb_lines_code_prev</code> configure how many lines to show after and before the PC,   respectively.</li> <li><code>context.nb_lines_threads</code> determines the number of lines to display inside the thread pane. This   is convenient when debugging heavily multi-threaded applications (apache2, firefox, etc.). It   receives an integer as value: if this value is <code>-1</code> then all threads state will be displayed.   Otherwise, if the value is set to <code>N</code>, then at most <code>N</code> thread states will be shown.</li> </ul> <p>To have the stack displayed with the largest stack addresses on top (i.e., grow the stack downward), enable the following setting:</p> <pre><code>gef\u27a4 gef config context.grow_stack_down True\n</code></pre> <p>If the saved instruction pointer is not within the portion of the stack being displayed, then a section is created that includes the saved ip and depending on the architecture the frame pointer.</p> <pre><code>0x00007fffffffc9e8\u2502+0x00: 0x00007ffff7a2d830  \u2192  &lt;__main+240&gt; mov edi, eax    ($current_frame_savedip)\n0x00007fffffffc9e0\u2502+0x00: 0x00000000004008c0  \u2192  &lt;__init+0&gt; push r15    \u2190 $rbp\n. . . (440 bytes skipped)\n0x00007fffffffc7e8\u2502+0x38: 0x0000000000000000\n0x00007fffffffc7e0\u2502+0x30: 0x0000000000000026 (\"&amp;\"?)\n0x00007fffffffc7d8\u2502+0x28: 0x0000000001958ac0\n0x00007fffffffc7d0\u2502+0x20: 0x00007ffff7ffa2b0  \u2192  0x5f6f7364765f5f00\n0x00007fffffffc7c8\u2502+0x18: 0x00007fff00000000\n0x00007fffffffc7c0\u2502+0x10: 0x00007fffffffc950  \u2192  0x0000000000000000\n0x00007fffffffc7b8\u2502+0x08: 0x0000000000000000\n0x00007fffffffc7b0\u2502+0x00: 0x00007fffffffc7e4  \u2192  0x0000000000000000      \u2190 $rsp\n</code></pre>"},{"location":"commands/context/#redirecting-context-output-to-another-ttyfile","title":"Redirecting context output to another tty/file","text":"<p>By default, the <code>gef</code> context will be displayed on the current TTY. This can be overridden by setting <code>context.redirect</code> variable to have the context sent to another section.</p> <p>To do so, select the TTY/file/socket/etc. you want the context redirected to with <code>gef config</code>.</p> <p>Enter the command <code>tty</code> in the prompt:</p> <pre><code>$ tty\n/dev/pts/0\n</code></pre> <p>Then tell <code>gef</code> about it!</p> <pre><code>gef\u27a4 gef config context.redirect /dev/pts/0\n</code></pre> <p>Enjoy: </p> <p>To go back to normal, remove the value:</p> <pre><code>gef\u27a4 gef config context.redirect \"\"\n</code></pre>"},{"location":"commands/context/#display-individual-sections","title":"Display individual sections","text":"<p>You can display a single section by specifying it as an argument:</p> <pre><code>gef\u27a4 context regs\n</code></pre> <p>Multiple sections can be provided, even if they are not part of the current layout:</p> <pre><code>gef\u27a4 context regs stack\n</code></pre>"},{"location":"commands/context/#examples","title":"Examples","text":"<ul> <li>Display the code section first, then register, and stack, hiding everything else:</li> </ul> <pre><code>gef\u27a4 gef config context.layout \"code regs stack\"\n</code></pre> <ul> <li>Stop showing the context sections when breaking:</li> </ul> <pre><code>gef\u27a4 gef config context.enable 0\n</code></pre> <ul> <li>Clear the screen before showing the context sections when breaking:</li> </ul> <pre><code>gef\u27a4 gef config context.clear_screen 1\n</code></pre> <ul> <li>Don't dereference the registers in the <code>regs</code> section (more compact):</li> </ul> <pre><code>gef\u27a4 gef config context.show_registers_raw 1\n</code></pre> <ul> <li>Number of bytes of opcodes to display next to the disassembly.</li> </ul> <pre><code>gef\u27a4 gef config context.show_opcodes_size 4\n</code></pre> <ul> <li>Don't 'peek' into the start of functions that are called.</li> </ul> <pre><code>gef\u27a4  gef config context.peek_calls False\n</code></pre> <ul> <li>Hide specific registers from the registers view.</li> </ul> <pre><code>gef\u27a4  gef config context.ignore_registers \"$cs $ds $gs\"\n</code></pre> <ul> <li>Hide the extra pc context info from the source code view.</li> </ul> <pre><code>gef\u27a4  gef config context.show_source_code_variable_values 0\n</code></pre> <ul> <li>Control how source file path is displayed.</li> </ul> <p>When displaying the source file name, above the source code view, the following settings can be changed:</p> <pre><code>gef\u27a4  gef config context.show_full_source_file_name_max_len 30\ngef\u27a4  gef config context.show_prefix_source_path_name_len 10\ngef\u27a4  gef config context.show_basename_source_file_name_max_len 20\n</code></pre> <p>In this example, if the file path length is less than or equal to 30 it will be displayed in its entirety. If however, it's more than 30 characters in length, it will be truncated.</p> <p>Truncation first splits the path into the prefix part and file name part. The <code>show_prefix_source_path_name_len</code> controls how many characters of the prefix path to show, and the <code>show_basename_source_file_name_max_len</code> controls how many characters from the file name to show.</p> <ul> <li>Show better definitions for call to libc functions.</li> </ul> <pre><code>gef\u27a4  gef config context.libc_args True\ngef\u27a4  gef config context.libc_args_path /path/to/gef-extras/libc_args\n</code></pre>"},{"location":"commands/dereference/","title":"dereference","text":""},{"location":"commands/dereference/#command-dereference","title":"Command <code>dereference</code>","text":"<p>The <code>dereference</code> command (also aliased <code>telescope</code> for PEDA former users) aims to simplify the dereferencing of an address in GDB to determine the content it actually points to.</p> <p>It is a useful convenience function to spare to process of manually tracking values with successive <code>x/x</code> in GDB.</p> <p><code>dereference</code> takes three optional arguments, a start address (or symbol or register, etc) to dereference (by default, <code>$sp</code>), the number of consecutive addresses to dereference (by default, <code>10</code>) and the base location for offset calculation (by default the same as the start address):</p> <pre><code>gef\u27a4  dereference\n0x00007fffffffdec0\u2502+0x0000: 0x00007ffff7ffe190  \u2192  0x0000555555554000  \u2192   jg 0x555555554047   \u2190 $rsp, $r13\n0x00007fffffffdec8\u2502+0x0008: 0x00007ffff7ffe730  \u2192  0x00007ffff7fd3000  \u2192  0x00010102464c457f\n0x00007fffffffded0\u2502+0x0010: 0x00007ffff7faa000  \u2192  0x00007ffff7de9000  \u2192  0x03010102464c457f\n0x00007fffffffded8\u2502+0x0018: 0x00007ffff7ffd9f0  \u2192  0x00007ffff7fd5000  \u2192  0x00010102464c457f\n0x00007fffffffdee0\u2502+0x0020: 0x00007fffffffdee0  \u2192  [loop detected]\n0x00007fffffffdee8\u2502+0x0028: 0x00007fffffffdee0  \u2192  0x00007fffffffdee0  \u2192  [loop detected]\n0x00007fffffffdef0\u2502+0x0030: 0x00000000f7fa57e3\n0x00007fffffffdef8\u2502+0x0038: 0x0000555555755d60  \u2192  0x0000555555554a40  \u2192   cmp BYTE PTR [rip+0x201601], 0x0        # 0x555555756048\n0x00007fffffffdf00\u2502+0x0040: 0x0000000000000004\n0x00007fffffffdf08\u2502+0x0048: 0x0000000000000001\n</code></pre> <p>Here is an example with arguments:</p> <pre><code>gef\u27a4  telescope $rbp+0x10 -l 8\n0x00007fffffffdf40\u2502+0x0000: 0x00007ffff7fa5760  \u2192  0x00000000fbad2887\n0x00007fffffffdf48\u2502+0x0008: 0x00000001f7e65b63\n0x00007fffffffdf50\u2502+0x0010: 0x0000000000000004\n0x00007fffffffdf58\u2502+0x0018: 0x0000000000000000\n0x00007fffffffdf60\u2502+0x0020: 0x00007fffffffdfa0  \u2192  0x0000555555554fd0  \u2192   push r15\n0x00007fffffffdf68\u2502+0x0028: 0x0000555555554980  \u2192   xor ebp, ebp\n0x00007fffffffdf70\u2502+0x0030: 0x00007fffffffe080  \u2192  0x0000000000000001\n0x00007fffffffdf78\u2502+0x0038: 0x0000000000000000\n</code></pre> <p>It also optionally accepts a second argument, the number of consecutive addresses to dereference (by default, <code>10</code>).</p> <p>For example, if you want to dereference all the stack entries inside a function context (on a 64bit architecture):</p> <pre><code>gef\u27a4  p ($rbp - $rsp)/8\n$3 = 4\ngef\u27a4  dereference -l 5\n0x00007fffffffe170\u2502+0x0000: 0x0000000000400690  \u2192  push r15        \u2190 $rsp\n0x00007fffffffe178\u2502+0x0008: 0x0000000000400460  \u2192  xor ebp, ebp\n0x00007fffffffe180\u2502+0x0010: 0x00007fffffffe270  \u2192  0x1\n0x00007fffffffe188\u2502+0x0018: 0x1\n0x00007fffffffe190\u2502+0x0020: 0x0000000000400690  \u2192  push r15        \u2190 $rbp\n</code></pre> <p>It is possible to change the offset calculation to use a different address than the start address:</p> <pre><code>gef\u27a4  dereference $sp -l 7 -r $rbp\n0x00007ffe6ddaa3e0\u2502-0x0030: 0x0000000000000000    \u2190 $rsp\n0x00007ffe6ddaa3e8\u2502-0x0028: 0x0000000000400970  \u2192  &lt;__libc_csu_init+0&gt; push r15\n0x00007ffe6ddaa3f0\u2502-0x0020: 0x0000000000000000\n0x00007ffe6ddaa3f8\u2502-0x0018: 0x00000000004006e0  \u2192  &lt;_start+0&gt; xor ebp, ebp\n0x00007ffe6ddaa400\u2502-0x0010: 0x00007ffe6ddaa500  \u2192  0x0000000000000001\n0x00007ffe6ddaa408\u2502-0x0008: 0xa42456b3ee465800\n0x00007ffe6ddaa410\u2502+0x0000: 0x0000000000000000    \u2190 $rbp\n</code></pre> <p>Just like with <code>x</code>, you can pass a negative number of addresses to dereference, to examine memory backwards from the start address:</p> <pre><code>gef\u27a4  dereference $sp -l 3\n0x00007fffffffcf90\u2502+0x0010: 0x00007ffff7f5aaa0  \u2192  0x0000000000000000\n0x00007fffffffcf88\u2502+0x0008: 0x00000000000204a0\n0x00007fffffffcf80\u2502+0x0000: 0x00005555555a6b60  \u2192  0x0000000000000000    \u2190 $rsp\ngef\u27a4  dereference $sp -l -3\n0x00007fffffffcf80\u2502+0x0000: 0x00005555555a6b60  \u2192  0x0000000000000000    \u2190 $rsp\n0x00007fffffffcf78\u2502-0x0008: 0x0000000000000020 (\" \"?)\n0x00007fffffffcf70\u2502-0x0010: 0x000000000000000a (\"\\n\"?)\n</code></pre>"},{"location":"commands/edit-flags/","title":"edit-flags","text":""},{"location":"commands/edit-flags/#command-edit-flags","title":"Command <code>edit-flags</code>","text":"<p>The <code>edit-flags</code> command (alias: <code>flags</code>) provides a quick and comprehensible way to view and edit the flag register for the architectures that support it. Without argument, the command will simply return a human-friendly display of the register flags.</p> <p>One or many arguments can be provided, following the syntax below:</p> <pre><code>gef\u27a4 flags [(+|-|~)FLAGNAME ...]\n</code></pre> <p>Where <code>FLAGNAME</code> is the name of the flag (case insensitive), and <code>+|-|~</code> indicates the action on whether to set, unset, or toggle the flag.</p> <p>For instance, on x86 architecture, if we don't want to take a conditional jump (e.g. a <code>jz</code> instruction), but we want to have the Carry flag set, simply go with:</p> <pre><code>gef\u27a4 flags -ZERO +CARRY\n</code></pre> <p></p>"},{"location":"commands/elf-info/","title":"elf-info","text":""},{"location":"commands/elf-info/#command-elf-info","title":"Command <code>elf-info</code>","text":"<p><code>elf-info</code> (alias <code>elf</code>) provides some basic information on the currently loaded ELF binary:</p> <pre><code>gef\u27a4  elf\nMagic                 : 7f 45 4c 46\nClass                 : 0x2 - 64-bit\nEndianness            : 0x1 - Little-Endian\nVersion               : 0x1\nOS ABI                : 0x0 - System V\nABI Version           : 0x0\nType                  : 0x2 - Executable\nMachine               : 0x3e - x86-64\nProgram Header Table  : 0x0000000000000040\nSection Header Table  : 0x00000000000021a8\nHeader Table          : 0x0000000000000040\nELF Version           : 0x1\nHeader size           : 64 (0x40)\nEntry point           : 0x0000000000400750\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Program Header \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  [ #] Type           Offset Virtaddr Physaddr  FileSiz   MemSiz Flags    Align\n  [ 0] PHDR             0x40 0x400040 0x400040    0x1f8    0x1f8 R-X        0x8\n  [ 1] INTERP          0x238 0x400238 0x400238     0x1c     0x1c R--        0x1\n  [ 2] LOAD              0x0 0x400000 0x400000   0x1414   0x1414 R-X   0x200000\n  [ 3] LOAD           0x1e10 0x601e10 0x601e10    0x268    0x330 RW-   0x200000\n  [ 4] DYNAMIC        0x1e28 0x601e28 0x601e28    0x1d0    0x1d0 RW-        0x8\n  [ 5] NOTE            0x254 0x400254 0x400254     0x44     0x44 R--        0x4\n  [ 6] GNU_EH_FLAME   0x11a0 0x4011a0 0x4011a0     0x74     0x74 R--        0x4\n  [ 7] GNU_STACK         0x0      0x0      0x0      0x0      0x0 RW-       0x10\n  [ 8] GNU_RELRO      0x1e10 0x601e10 0x601e10    0x1f0    0x1f0 R--        0x1\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Section Header \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  [ #] Name                            Type  Address   Offset     Size   EntSiz Flags Link Info    Align\n  [ 0]                                 NULL      0x0      0x0      0x0      0x0        0x0  0x0      0x0\n  [ 1] .interp                     PROGBITS 0x400238    0x238     0x1c      0x0 A      0x0  0x0      0x1\n  [ 2] .note.ABI-tag                   NOTE 0x400254    0x254     0x20      0x0 A      0x0  0x0      0x4\n  [ 3] .note.gnu.build-id              NOTE 0x400274    0x274     0x24      0x0 A      0x0  0x0      0x4\n  [ 4] .gnu.hash                   GNU_HASH 0x400298    0x298     0x30      0x0 A      0x5  0x0      0x8\n  [ 5] .dynsym                       DYNSYM 0x4002c8    0x2c8    0x168     0x18 A      0x6  0x1      0x8\n  [ 6] .dynstr                       STRTAB 0x400430    0x430     0x96      0x0 A      0x0  0x0      0x1\n  [ 7] .gnu.version                    HIOS 0x4004c6    0x4c6     0x1e      0x2 A      0x5  0x0      0x2\n  [ 8] .gnu.version_r           GNU_verneed 0x4004e8    0x4e8     0x30      0x0 A      0x6  0x1      0x8\n  [ 9] .rela.dyn                       RELA 0x400518    0x518     0x60     0x18 A      0x5  0x0      0x8\n  [10] .rela.plt                       RELA 0x400578    0x578     0xf0     0x18 AI     0x5 0x18      0x8\n  [11] .init                       PROGBITS 0x400668    0x668     0x1a      0x0 AX     0x0  0x0      0x4\n  [12] .plt                        PROGBITS 0x400690    0x690     0xb0     0x10 AX     0x0  0x0     0x10\n  [13] .plt.got                    PROGBITS 0x400740    0x740      0x8      0x0 AX     0x0  0x0      0x8\n  [14] .text                       PROGBITS 0x400750    0x750    0x842      0x0 AX     0x0  0x0     0x10\n  [15] .fini                       PROGBITS 0x400f94    0xf94      0x9      0x0 AX     0x0  0x0      0x4\n  [16] .rodata                     PROGBITS 0x400fa0    0xfa0    0x200      0x0 A      0x0  0x0      0x8\n  [17] .eh_frame_hdr               PROGBITS 0x4011a0   0x11a0     0x74      0x0 A      0x0  0x0      0x4\n  [18] .eh_frame                   PROGBITS 0x401218   0x1218    0x1fc      0x0 A      0x0  0x0      0x8\n  [19] .init_array               INIT_ARRAY 0x601e10   0x1e10      0x8      0x0 WA     0x0  0x0      0x8\n  [20] .fini_array               FINI_ARRAY 0x601e18   0x1e18      0x8      0x0 WA     0x0  0x0      0x8\n  [21] .jcr                        PROGBITS 0x601e20   0x1e20      0x8      0x0 WA     0x0  0x0      0x8\n  [22] .dynamic                     DYNAMIC 0x601e28   0x1e28    0x1d0     0x10 WA     0x6  0x0      0x8\n  [23] .got                        PROGBITS 0x601ff8   0x1ff8      0x8      0x8 WA     0x0  0x0      0x8\n  [24] .got.plt                    PROGBITS 0x602000   0x2000     0x68      0x8 WA     0x0  0x0      0x8\n  [25] .data                       PROGBITS 0x602068   0x2068     0x10      0x0 WA     0x0  0x0      0x8\n  [26] .bss                          NOBITS 0x602080   0x2078     0xc0      0x0 WA     0x0  0x0     0x20\n  [27] .comment                    PROGBITS      0x0   0x2078     0x34      0x1 MS     0x0  0x0      0x1\n  [28] .shstrtab                     STRTAB      0x0   0x20ac     0xfc      0x0        0x0  0x0      0x1\n</code></pre> <p>Optionally a filepath to another ELF binary can be provided to view the basic information for that binary instead.</p> <pre><code>gef\u27a4 elf-info --filename /path/to/elf/executable\n</code></pre>"},{"location":"commands/entry-break/","title":"entry-break","text":""},{"location":"commands/entry-break/#command-entry-break","title":"Command <code>entry-break</code>","text":"<p>The <code>entry-break</code> (alias <code>start</code>) command's goal is to find and break at the most obvious entry point available in the binary. Since the binary will start running, some of the <code>PLT</code> entries will also be resolved, making further debugging easier.</p> <p>It will perform the following actions:</p> <ol> <li>Look up a <code>main</code> symbol. If found, set a temporary breakpoint and go.</li> <li>Otherwise, it will look up for <code>__libc_start_main</code>. If found, set a temporary breakpoint and go.</li> <li>Finally, if the previous two symbols are not found, it will get the entry point from the ELF    header, set a breakpoint and run. This case should never fail if the ELF binary has a valid    structure.</li> </ol> <p></p>"},{"location":"commands/eval/","title":"eval","text":""},{"location":"commands/eval/#command","title":"Command <code>$</code>","text":"<p>The <code>$</code> command attempts to mimic WinDBG <code>?</code> command.</p> <p>When provided one argument, it will evaluate the expression, and try to display the result with various formats:</p> <pre><code>gef\u27a4  $ $pc+1\n93824992252977\n0x555555559431\n0b10101010101010101010101010101011001010000110001\nb'UUUU\\x941'\nb'1\\x94UUUU'\n\ngef\u27a4  $ -0x1000\n-4096\n0xfffffffffffff000\n0b1111111111111111111111111111111111111111111111111111000000000000\nb'\\xff\\xff\\xff\\xff\\xff\\xff\\xf0\\x00'\nb'\\x00\\xf0\\xff\\xff\\xff\\xff\\xff\\xff'\n</code></pre> <p>With two arguments, it will simply compute the delta between them:</p> <pre><code>gef\u27a4  vmmap libc\nStart              End                Offset             Perm\n0x00007ffff7812000 0x00007ffff79a7000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.24.so\n0x00007ffff79a7000 0x00007ffff7ba7000 0x0000000000195000 --- /lib/x86_64-linux-gnu/libc-2.24.so\n0x00007ffff7ba7000 0x00007ffff7bab000 0x0000000000195000 r-- /lib/x86_64-linux-gnu/libc-2.24.so\n0x00007ffff7bab000 0x00007ffff7bad000 0x0000000000199000 rw- /lib/x86_64-linux-gnu/libc-2.24.so\n\ngef\u27a4  $ 0x00007ffff7812000 0x00007ffff79a7000\n-1658880\n1658880\n\ngef\u27a4  $ 1658880\n1658880\n0x195000\n0b110010101000000000000\nb'\\x19P\\x00'\nb'\\x00P\\x19'\n</code></pre>"},{"location":"commands/format-string-helper/","title":"format-string-helper","text":""},{"location":"commands/format-string-helper/#command-format-string-helper","title":"Command <code>format-string-helper</code>","text":"<p>The <code>format-string-helper</code> command will create a <code>GEF</code> specific type of breakpoints dedicated to detecting potentially insecure format string when using the GlibC library.</p> <p>It will use this new breakpoint against several targets, including:</p> <ul> <li><code>printf()</code></li> <li><code>sprintf()</code></li> <li><code>fprintf()</code></li> <li><code>snprintf()</code></li> <li><code>vsnprintf()</code></li> </ul> <p>Just call the command to enable this functionality.</p> <p><code>fmtstr-helper</code> is a shorter alias.</p> <pre><code>gef\u27a4 fmtstr-helper\n</code></pre> <p>Then start the binary execution.</p> <pre><code>gef\u27a4 r\n</code></pre> <p>If a potentially insecure entry is found, the breakpoint will trigger, stop the process execution, display the reason for trigger and the associated context.</p> <p></p>"},{"location":"commands/functions/","title":"functions","text":""},{"location":"commands/functions/#command-functions","title":"Command <code>functions</code>","text":"<p>The <code>functions</code> command will list all of the convenience functions provided by GEF.</p> <ul> <li><code>$_base([filepath])</code>    -- Return the matching file's base address plus an optional offset.   Defaults to the current file. Note that quotes need to be escaped.</li> <li><code>$_bss([offset])</code>       -- Return the current bss base address plus the given offset.</li> <li><code>$_got([offset])</code>       -- Return the current bss base address plus the given offset.</li> <li><code>$_heap([offset])</code>      -- Return the current heap base address plus an optional offset.</li> <li><code>$_stack([offset])</code>     -- Return the current stack base address plus an optional offset.</li> </ul> <p>These functions can be used as arguments to other commands to dynamically calculate values.</p> <pre><code>gef\u27a4  deref -l 4 $_heap()\n0x0000000000602000\u2502+0x00: 0x0000000000000000     \u2190 $r8\n0x0000000000602008\u2502+0x08: 0x0000000000000021 (\"!\"?)\n0x0000000000602010\u2502+0x10: 0x0000000000000000     \u2190 $rax, $rdx\n0x0000000000602018\u2502+0x18: 0x0000000000000000\ngef\u27a4  deref -l 4 $_heap(0x20)\n0x0000000000602020\u2502+0x00: 0x0000000000000000     \u2190 $rsi\n0x0000000000602028\u2502+0x08: 0x0000000000020fe1\n0x0000000000602030\u2502+0x10: 0x0000000000000000\n0x0000000000602038\u2502+0x18: 0x0000000000000000\ngef\u27a4  deref -l 4 $_base(\\\"libc\\\")\n0x00007ffff7da9000\u2502+0x0000: 0x03010102464c457f\n0x00007ffff7da9008\u2502+0x0008: 0x0000000000000000\n0x00007ffff7da9010\u2502+0x0010: 0x00000001003e0003\n0x00007ffff7da9018\u2502+0x0018: 0x0000000000027c60\n</code></pre>"},{"location":"commands/gef-remote/","title":"gef-remote","text":""},{"location":"commands/gef-remote/#command-gef-remote","title":"Command <code>gef-remote</code>","text":"<p><code>target remote</code> is the traditional GDB way of debugging process or system remotely. However this command by itself does a limited job (80's bandwidth FTW) to collect more information about the target, making the process of debugging more cumbersome. GEF greatly improves that state with the <code>gef-remote</code> command.</p> <p>\ud83d\udcdd Note: If using GEF, <code>gef-remote</code> must be your way or debugging remote processes, never <code>target remote</code>. Maintainers will provide minimal support or help if you decide to use the traditional <code>target remote</code> command. For many reasons, you should not use <code>target remote</code> alone with GEF. It is still important to note that the default <code>target remote</code> command has been overwritten by a minimal copy <code>gef-remote</code>, in order to make most tools relying on this command work.</p> <p><code>gef-remote</code> can function in 2 ways:</p> <ul> <li><code>remote</code> which is meant to enrich use of GDB <code>target remote</code> command, when connecting to a \"real\"   gdbserver instance</li> <li><code>qemu-mode</code> when connecting to GDB stab of either <code>qemu-user</code> or <code>qemu-system</code>.</li> </ul> <p>The reason for this difference being that Qemu provides a lot less information that GEF can extract to enrich debugging. Whereas GDBServer allows to download remote file (therefore allowing to create a small identical environment), GDB stub in Qemu does not support file transfer. As a consequence, in order to use GEF in qemu mode, it is required to provide the binary being debugged. GEF will create a mock (limited) environment so that all its most useful features are available.</p>"},{"location":"commands/gef-remote/#remote-mode","title":"Remote mode","text":""},{"location":"commands/gef-remote/#remote","title":"<code>remote</code>","text":"<p>If you want to remotely debug a binary that you already have, you simply need to tell to <code>gdb</code> where to find the debug information.</p> <p>For example, if we want to debug <code>uname</code>, we do on the server:</p> <pre><code>$ gdbserver  :1234 /tmp/default.out\nProcess /tmp/default.out created; pid = 258932\nListening on port 1234\n</code></pre> <p></p> <p>On the client, when the original <code>gdb</code> would use <code>target remote</code>, GEF's syntax is roughly similar (shown running in debug mode for more verbose output, but you don't have to):</p> <pre><code>$ gdb -ex 'gef config gef.debug 1'\nGEF for linux ready, type `gef' to start, `gef config' to configure\n90 commands loaded and 5 functions added for GDB 10.2 using Python engine 3.8\ngef\u27a4 gef-remote localhost 1234\n[=] [remote] initializing remote session with localhost:1234 under /tmp/tmp8qd0r7iw\n[=] [remote] Installing new objfile handlers\n[=] [remote] Enabling extended remote: False\n[=] [remote] Executing 'target remote localhost:1234'\nReading /tmp/default.out from remote target...\nwarning: File transfers from remote targets can be slow. Use \"set sysroot\" to access files locally instead.\nReading /tmp/default.out from remote target...\nReading symbols from target:/tmp/default.out...\n[=] [remote] in remote_objfile_handler(target:/tmp/default.out))\n[=] [remote] downloading '/tmp/default.out' -&gt; '/tmp/tmp8qd0r7iw/tmp/default.out'\nReading /lib64/ld-linux-x86-64.so.2 from remote target...\nReading /lib64/ld-linux-x86-64.so.2 from remote target...\n[=] [remote] in remote_objfile_handler(/usr/lib/debug/.build-id/45/87364908de169dec62ffa538170118c1c3a078.debug))\n[=] [remote] in remote_objfile_handler(target:/lib64/ld-linux-x86-64.so.2))\n[=] [remote] downloading '/lib64/ld-linux-x86-64.so.2' -&gt; '/tmp/tmp8qd0r7iw/lib64/ld-linux-x86-64.so.2'\n[=] [remote] in remote_objfile_handler(system-supplied DSO at 0x7ffff7fcd000))\n[*] [remote] skipping 'system-supplied DSO at 0x7ffff7fcd000'\n0x00007ffff7fd0100 in _start () from target:/lib64/ld-linux-x86-64.so.2\n[=] Setting up as remote session\n[=] [remote] downloading '/proc/258932/maps' -&gt; '/tmp/tmp8qd0r7iw/proc/258932/maps'\n[=] [remote] downloading '/proc/258932/environ' -&gt; '/tmp/tmp8qd0r7iw/proc/258932/environ'\n[=] [remote] downloading '/proc/258932/cmdline' -&gt; '/tmp/tmp8qd0r7iw/proc/258932/cmdline'\n[...]\n</code></pre> <p>And finally breaking into the program, showing the current context:</p> <p></p> <p>You will also notice the prompt has changed to indicate the debugging mode is now \"remote\". Besides that, all of GEF features are available:</p> <p></p>"},{"location":"commands/gef-remote/#remote-extended","title":"<code>remote-extended</code>","text":"<p>Extended mode works the same as <code>remote</code>. Being an extended session, gdbserver has not spawned or attached to any process. Therefore, all that's required is to add the <code>--pid</code> flag when calling <code>gef-remote</code>, along with the process ID of the process to debug.</p>"},{"location":"commands/gef-remote/#qemu-mode","title":"Qemu mode","text":"<p>Qemu mode of <code>gef-remote</code> allows to connect to the Qemu GDB stub which allows to live debug into either a binary (<code>qemu-user</code>) or even the kernel (<code>qemu-system</code>), of any architecture supported by GEF, which makes now even more sense \ud83d\ude09 And using it is very straight forward.</p>"},{"location":"commands/gef-remote/#qemu-user","title":"<code>qemu-user</code>","text":"<ol> <li>Run <code>qemu-x86_64 :1234 /bin/ls</code></li> <li>Use <code>--qemu-user</code> and <code>--qemu-binary /bin/ls</code> when starting <code>gef-remote</code></li> </ol>"},{"location":"commands/gef-remote/#qemu-system","title":"<code>qemu-system</code>","text":"<p>To test locally, you can use the mini image linux x64 vm here.</p> <ol> <li>Run <code>./run.sh</code></li> <li>Use <code>--qemu-user</code> and <code>--qemu-binary vmlinuz</code> when starting <code>gef-remote</code></li> </ol> <p></p>"},{"location":"commands/gef-remote/#rr-support","title":"<code>rr</code> support","text":"<p>GEF can be used with the time-travel tool <code>rr</code> as it will act as a remote session. Most of the commands will work as long as the debugged binary is present on the target.</p> <p>GEF can be loaded from <code>rr</code> as such in a very similar way it is loaded gdb. The <code>-x</code> command line toggle can be passed load it as it would be for any gdbinit script</p> <pre><code>$ cat ~/load-with-gef-extras\nsource ~/code/gef/gef.py\ngef config gef.extra_plugins_dir ~/code/gef-extras/scripts\ngef config pcustom.struct_path ~/code/gef-extras/structs\n\n$ rr record /usr/bin/date\n[...]\n\n$ rr replay -x ~/load-with-gef-extras\n[...]\n(remote) gef\u27a4  pi gef.binary\nELF('/usr/bin/date', ELF_64_BITS, X86_64)\n(remote) gef\u27a4  pi gef.session\nSession(Remote, pid=3068, os='linux')\n(remote) gef\u27a4  pi gef.session.remote\nRemoteSession(target=':0', local='/', pid=3068, mode=RR)\n(remote) gef\u27a4  vmmap\n[ Legend:  Code | Heap | Stack ]\nStart              End                Offset             Perm Path\n0x0000000068000000 0x0000000068200000 0x0000000000200000 rwx\n0x000000006fffd000 0x0000000070001000 0x0000000000004000 r-x /usr/lib/rr/librrpage.so\n0x0000000070001000 0x0000000070002000 0x0000000000001000 rw- /tmp/rr-shared-preload_thread_locals-801763-0\n0x00005580b30a3000 0x00005580b30a6000 0x0000000000003000 r-- /usr/bin/date\n0x00005580b30a6000 0x00005580b30b6000 0x0000000000010000 r-x /usr/bin/date\n0x00005580b30b6000 0x00005580b30bb000 0x0000000000005000 r-- /usr/bin/date\n0x00005580b30bc000 0x00005580b30be000 0x0000000000002000 rw- /usr/bin/date\n0x00007f21107c7000 0x00007f21107c9000 0x0000000000002000 r-- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2\n0x00007f21107c9000 0x00007f21107f3000 0x000000000002a000 r-x /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2\n0x00007f21107f3000 0x00007f21107fe000 0x000000000000b000 r-- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2\n0x00007f21107ff000 0x00007f2110803000 0x0000000000004000 rw- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2\n0x00007ffcc951a000 0x00007ffcc953c000 0x0000000000022000 rw- [stack]\n0x00007ffcc95ab000 0x00007ffcc95ad000 0x0000000000002000 r-x [vdso]\n0xffffffffff600000 0xffffffffff601000 0x0000000000001000 --x [vsyscall]\n(remote) gef\u27a4  pi len(gef.memory.maps)\n14\n</code></pre>"},{"location":"commands/gef/","title":"gef","text":""},{"location":"commands/gef/#command-gef","title":"Command <code>gef</code>","text":""},{"location":"commands/gef/#gef-base-command","title":"GEF Base Command","text":"<p>Displays a list of GEF commands and their descriptions.</p> <pre><code>gef\u27a4  gef\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 GEF - GDB Enhanced Features \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n$                         -- SmartEval: Smart eval (vague approach to mimic WinDBG `?`).\naslr                      -- View/modify the ASLR setting of GDB. By default, GDB will disable ASLR when it starts the process. (i.e. not\n                             attached). This command allows to change that setting.\nassemble                  -- Inline code assemble. Architecture can be set in GEF runtime config (default x86-32).  (alias: asm)\nbincompare                -- BincompareCommand: compare an binary file with the memory position looking for badchars.\nbytearray                 -- BytearrayCommand: Generate a bytearray to be compared with possible badchars.\n\n[...snip...]\n\n</code></pre>"},{"location":"commands/gef/#gef-missing-command","title":"GEF Missing Command","text":"<p>GEF is fully battery-included. However in some rare cases, it is possible that not all commands be loaded. If that's the case the command <code>gef missing</code> will detail which command failed to load, along with a (likely) reason. Read the documentation for a solution, or reach out on the Discord.</p> <pre><code>gef\u27a4  gef missing\n[*] Command `XXXX` is missing, reason  \u2192  YYYYY.\n</code></pre>"},{"location":"commands/gef/#gef-config-command","title":"GEF Config Command","text":"<p>Allows the user to set/view settings for the current debugging session. For making the changes persistent see the <code>gef save</code> entry.</p> <p>Using <code>gef config</code> by itself just shows all of the available settings and their values.</p> <pre><code>gef\u27a4  gef config\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 GEF configuration settings \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ncontext.clear_screen (bool) = False\ncontext.enable (bool) = True\ncontext.grow_stack_down (bool) = False\ncontext.ignore_registers (str) = \"\"\ncontext.layout (str) = \"-code -stack\"\ncontext.libc_args (bool) = False\n\n[...snip...]\n\n</code></pre> <p>To filter the config settings you can use <code>gef config [setting]</code>.</p> <pre><code>gef\u27a4  gef config theme\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 GEF configuration settings matching 'theme' \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ntheme.context_title_line (str) = \"gray\"\ntheme.context_title_message (str) = \"cyan\"\ntheme.default_title_line (str) = \"gray\"\ntheme.default_title_message (str) = \"cyan\"\n\n[...snip...]\n\n</code></pre> <p>You can use <code>gef config [setting] [value]</code> to set a setting for the current session (see example below).</p> <pre><code>gef\u27a4  gef config theme.address_stack blue\n</code></pre>"},{"location":"commands/gef/#gef-save-command","title":"GEF Save Command","text":"<p>The <code>gef save</code> command saves the current settings (set with <code>gef config</code>) to the user's <code>~/.gef.rc</code> file (making the changes persistent).</p> <pre><code>gef\u27a4  gef save\n[+] Configuration saved to '/home/michael/.gef.rc'\n</code></pre>"},{"location":"commands/gef/#gef-restore-command","title":"GEF Restore Command","text":"<p>Using <code>gef restore</code> loads and applies settings from the <code>~/.gef.rc</code> file to the current session. This is useful if you are modifying your GEF configuration file and want to see the changes without completely reloading GEF.</p> <pre><code>gef\u27a4  gef restore\n[+] Configuration from '/home/michael/.gef.rc' restored\n</code></pre>"},{"location":"commands/gef/#gef-set-command","title":"GEF Set Command","text":"<p>The GEF set command allows the user to use GEF context within GDB set commands. This is useful when you want to make a convenient variable which can be set and referenced later.</p> <pre><code>gef\u27a4  gef set $a=1\n</code></pre>"},{"location":"commands/gef/#gef-run-command","title":"GEF Run Command","text":"<p>The GEF run command is a wrapper around GDB's run command, allowing the user to use GEF context within the command.</p> <pre><code>gef\u27a4  gef run ./binary\n</code></pre>"},{"location":"commands/gef/#gef-install-command","title":"GEF Install Command","text":"<p><code>gef install</code> allows to install one (or more) specific script(s) from <code>gef-extras</code>. The new scripts will be downloaded and sourced to be used immediately after by GEF. The syntax is straight forward:</p> <pre><code>gef\u27a4  gef install SCRIPTNAME1 [SCRIPTNAME2...]\n</code></pre> <p>Where <code>SCRIPTNAME1</code> ... are the names of script from the <code>gef-extras</code> repository.</p> <pre><code>gef\u27a4  gef install remote windbg stack\n[+] Searching for 'remote.py' in `gef-extras@main`...\n[+] Installed file '/tmp/gef/remote.py', new command(s) available: `rpyc-remote`\n[+] Searching for 'windbg.py' in `gef-extras@main`...\n[+] Installed file '/tmp/gef/windbg.py', new command(s) available: `pt`, `hh`, `tt`, `ptc`, `sxe`, `u`, `xs`, `tc`, `pc`, `g`, `r`\n[+] Searching for 'stack.py' in `gef-extras@main`...\n[+] Installed file '/tmp/gef/stack.py', new command(s) available: `current-stack-frame`\ngef\u27a4\n</code></pre> <p>This makes it easier to deploy new functionalities in limited environment. By default, the command looks up for script names in the <code>main</code> branch of <code>gef-extras</code>. However you can change specify a different branch through the <code>gef.default_branch</code> configuration setting:</p> <pre><code>gef\u27a4 gef config gef.default_branch my_other_branch\n</code></pre> <p>The files will be downloaded in the path configured in the <code>gef.extra_plugins_dir</code> setting, allowing to reload it easily without having to re-download.</p>"},{"location":"commands/got/","title":"got","text":""},{"location":"commands/got/#command-got","title":"Command <code>got</code>","text":"<p>Display the current state of GOT table of the running process.</p> <p>The <code>got</code> command optionally takes function names and filters the output displaying only the matching functions.</p> <pre><code>gef\u27a4 got [--all] [filters]\n</code></pre> <p><code>--all</code> Print the GOT for all shared objects in addition to the executable file</p> <p></p> <p>The applied filter partially matches the name of the functions, so you can do something like this.</p> <pre><code>gef\u27a4 got str\ngef\u27a4 got print\ngef\u27a4 got read\n</code></pre> <p></p> <p>Example of multiple partial filters:</p> <pre><code>gef\u27a4 got str get\n</code></pre> <p></p> <pre><code>gef\u27a4 got --all str get\n</code></pre> <p>Print relocatable symbols matching \"str\" or \"get\" in the executable and all shared object files.</p> <p>Note: Because gdbserver does not canonicalize paths, the --all option does not work correctly for remote debugging.  See gdb bug 23764</p>"},{"location":"commands/heap-analysis-helper/","title":"heap-analysis-helper","text":""},{"location":"commands/heap-analysis-helper/#command-heap-analysis-helper","title":"Command <code>heap-analysis-helper</code>","text":"<p>Please note: This feature is still under development, expect bugs and unstability.</p> <p><code>heap-analysis-helper</code> command aims to help the process of idenfitying Glibc heap inconsistencies by tracking and analyzing allocations and deallocations of chunks of memory.</p> <p>Currently, the following issues can be tracked:</p> <ul> <li>NULL free</li> <li>Use-after-Free</li> <li>Double Free</li> <li>Heap overlap</li> </ul> <p>The helper can simply be activated by running the command <code>heap-analysis-helper</code>.</p> <pre><code>gef\u27a4 heap-analysis\n[+] Tracking malloc()\n[+] Tracking free()\n[+] Disabling hardware watchpoints (this may increase the latency)\n[+] Dynamic breakpoints correctly setup, GEF will break execution if a possible vulnerability is found.\n[+] To disable, clear the malloc/free breakpoints (`delete breakpoints`) and restore hardware breakpoints (`set can-use-hw-watchpoints 1`)\n</code></pre> <p>The helper will create specifically crafted breakoints to keep tracks of allocation, which allows to discover potential vulnerabilities. Once activated, one can disable the heap analysis breakpoints simply by clearing the <code>__GI___libc_free()</code> et <code>__GI___libc_malloc()</code>. It is also possible to enable/disable manually punctual checks via the <code>gef config</code> command.</p> <p>The following settings are accepted:</p> <ul> <li><code>check_null_free</code>: to break execution when a free(NULL) is encountered (disabled by default);</li> <li><code>check_double_free</code>: to break execution when a double free is encountered;</li> </ul> <p></p> <ul> <li><code>check_weird_free</code>: to execution when <code>free()</code> is called against a non-tracked pointer;</li> <li><code>check_uaf</code>: to break execution when a possible Use-after-Free condition is found.</li> </ul> <p></p> <p>Just like the format string vulnerability helper, the <code>heap-analysis-helper</code> can fail to detect complex heap scenarios and/or provide some false positive alerts. Each finding must of course be ascertained manually.</p> <p>The <code>heap-analysis-helper</code> can also be used to simply track allocation and liberation of chunks of memory. One can simply enable the tracking by setting all the configurations stated above to False:</p> <pre><code>gef\u27a4  gef config heap-analysis-helper.check_double_free False\ngef\u27a4  gef config heap-analysis-helper.check_free_null False\ngef\u27a4  gef config heap-analysis-helper.check_weird_free False\ngef\u27a4  gef config heap-analysis-helper.check_uaf False\n</code></pre> <p>Then <code>gef</code> will not notify you of any inconsistency detected, but simply display a clear message when a chunk is allocated/freed.</p> <p></p> <p>To get information regarding the currently tracked chunks, use the <code>show</code> subcommand:</p> <pre><code>gef\u27a4  heap-analysis-helper show\n</code></pre> <p></p>"},{"location":"commands/heap/","title":"heap","text":""},{"location":"commands/heap/#command-heap","title":"Command <code>heap</code>","text":"<p>The <code>heap</code> command provides information on the heap chunk specified as argument. For the moment, it only supports GlibC heap format (see this link for <code>malloc</code> structure information). Syntax to the subcommands is straight forward:</p> <pre><code>gef\u27a4 heap &lt;sub_commands&gt;\n</code></pre>"},{"location":"commands/heap/#main_arena-symbol","title":"<code>main_arena</code> symbol","text":"<p>If the linked glibc of the target program does not have debugging symbols it might be tricky for GEF to find the address of the <code>main_arena</code> which is needed for most of the <code>heap</code> subcommands. If you know the offset of this symbol from the glibc base address you can use GEF's config to provide said value:</p> <pre><code>gef\u27a4 gef config gef.main_arena_offset &lt;offset&gt;\n</code></pre> <p>If you do not know this offset and you want GEF to try and find it via bruteforce when executing a <code>heap</code> command the next time, you can try this instead:</p> <pre><code>gef\u27a4 gef config gef.bruteforce_main_arena True\n</code></pre> <p>Note that this might take a few seconds to complete. If GEF does find the symbol you can then calculate the offset to the libc base address and save it in the config.</p> <p>Sometimes, the dump might not contain proper info to help GEF find the libc version, which results in failure to parse the arena information. In this case, you can try to provide GEF a specific libc version to use with the following command:</p> <pre><code>gef\u27a4 gef config gef.libc_version 2.31\n</code></pre>"},{"location":"commands/heap/#heap-chunks-command","title":"<code>heap chunks</code> command","text":"<p>Displays all the chunks from the <code>heap</code> section of the current arena.</p> <pre><code>gef\u27a4 heap chunks\n</code></pre> <p></p> <p>To select from which arena to display chunks either use the <code>heap set-arena</code> command or provide the base address of the other arena like this:</p> <pre><code>gef\u27a4 heap chunks [arena_address]\n</code></pre> <p></p> <p>In order to display the chunks of all the available arenas at once use</p> <pre><code>gef\u27a4 heap chunks -a\n</code></pre> <p></p> <p>Because usually the heap chunks are aligned to a certain number of bytes in memory GEF automatically re-aligns the chunks data start addresses to match Glibc's behavior. To be able to view unaligned chunks as well, you can disable this with the <code>--allow-unaligned</code> flag. Note that this might result in incorrect output.</p> <p>To get a higher level overview of the chunks you can use the <code>--summary</code> flag too.</p> <pre><code>gef\u27a4 heap chunks --summary\n</code></pre> <p></p> <p>Sometimes, multiple types of objects could have the same size, hence it might not be enough only knowing the chunk size when debugging issues like memory leaks. GEF supports using the vtable to determine the type of the object stored in the chunk. To enable this feature, use <code>--resolve</code> along with the <code>--summary</code> flag.</p> <pre><code>gef\u27a4 heap chunks --summary --resolve\n</code></pre> <p></p> <p>Heap chunk command also supports filtering chunks by their size. To do so, simply provide the <code>--min-size</code> or <code>--max-size</code> argument:</p> <pre><code>gef\u27a4 heap chunks --min-size 16 --max-size 32\n</code></pre> <p></p> <p>The range is inclusive, so the above command will display all chunks with size &gt;=16 and &lt;=32.</p> <p>If heap chunks command still gives too many chunks, we can use <code>--count</code> argument to limit the number of the chunks in the output:</p> <pre><code>gef\u27a4 heap chunks --count 1\n</code></pre> <p></p>"},{"location":"commands/heap/#heap-chunk-command","title":"<code>heap chunk</code> command","text":"<p>This command gives visual information of a Glibc malloc-ed chunked. Simply provide the address to the user memory pointer of the chunk to show the information related to a specific chunk:</p> <pre><code>gef\u27a4 heap chunk [address]\n</code></pre> <p></p> <p>Because usually the heap chunks are aligned to a certain number of bytes in memory GEF automatically re-aligns the chunks data start addresses to match Glibc's behavior. To be able to view unaligned chunks as well, you can disable this with the <code>--allow-unaligned</code> flag. Note that this might result in incorrect output.</p> <p>There is an optional <code>number</code> argument, to specify the number of chunks printed by this command. To do so, simply provide the <code>--number</code> argument:</p> <pre><code>gef\u27a4 heap chunk --number 6 0x4e5400\nChunk(addr=0x4e5400, size=0xd0, flags=PREV_INUSE)\nChunk(addr=0x4e54d0, size=0x1a0, flags=PREV_INUSE)\nChunk(addr=0x4e5670, size=0x200, flags=PREV_INUSE)\nChunk(addr=0x4e5870, size=0xbc0, flags=PREV_INUSE)\nChunk(addr=0x4e6430, size=0x330, flags=PREV_INUSE)\nChunk(addr=0x4e6760, size=0x4c0, flags=PREV_INUSE)\n\n</code></pre>"},{"location":"commands/heap/#heap-arenas-command","title":"<code>heap arenas</code> command","text":"<p>Multi-threaded programs have different arenas, and the knowledge of the <code>main_arena</code> is not enough. <code>gef</code> therefore provides the <code>arena</code> sub-commands to help you list all the arenas allocated in your program at the moment you call the command.</p> <p></p>"},{"location":"commands/heap/#heap-set-arena-command","title":"<code>heap set-arena</code> command","text":"<p>In cases where the debug symbol are not present (e.g. statically stripped binary), it is possible to instruct GEF to find the <code>main_arena</code> at a different location with the command:</p> <pre><code>gef\u27a4 heap set-arena [address]\n</code></pre> <p>If the arena address is correct, all <code>heap</code> commands will be functional, and use the specified address for <code>main_arena</code>.</p>"},{"location":"commands/heap/#heap-bins-command","title":"<code>heap bins</code> command","text":"<p>Glibc uses bins for keeping tracks of <code>free</code>d chunks. This is because making allocations through <code>sbrk</code> (requiring a syscall) is costly. Glibc uses those bins to remember formerly allocated chunks. Because bins are structured in single or doubly linked list, I found that quite painful to always interrogate <code>gdb</code> to get a pointer address, dereference it, get the value chunk, etc... So I decided to implement the <code>heap bins</code> sub-command, which allows to get info on:</p> <ul> <li><code>fastbins</code></li> <li><code>bins</code></li> <li><code>unsorted</code></li> <li><code>small bins</code></li> <li><code>large bins</code></li> <li><code>tcachebins</code></li> </ul>"},{"location":"commands/heap/#heap-bins-fast-command","title":"<code>heap bins fast</code> command","text":"<p>When exploiting heap corruption vulnerabilities, it is sometimes convenient to know the state of the <code>fastbinsY</code> array.</p> <p>The <code>fast</code> sub-command helps by displaying the list of fast chunks in this array. Without any other argument, it will display the info of the <code>main_arena</code> arena. It accepts an optional argument, the address of another arena (which you can easily find using <code>heap arenas</code>).</p> <pre><code>gef\u27a4 heap bins fast\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Fastbins for arena 0x7ffff7fb8b80 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nFastbins[idx=0, size=0x20]  \u2190  Chunk(addr=0x555555559380, size=0x20, flags=PREV_INUSE)\nFastbins[idx=1, size=0x30] 0x00\nFastbins[idx=2, size=0x40] 0x00\nFastbins[idx=3, size=0x50] 0x00\nFastbins[idx=4, size=0x60] 0x00\nFastbins[idx=5, size=0x70] 0x00\nFastbins[idx=6, size=0x80] 0x00\n</code></pre>"},{"location":"commands/heap/#other-heap-bins-x-command","title":"Other <code>heap bins X</code> command","text":"<p>All the other subcommands (with the exception of <code>tcache</code>) for the <code>heap bins</code> work the same way as <code>fast</code>. If no argument is provided, <code>gef</code> will fall back to <code>main_arena</code>. Otherwise, it will use the address pointed as the base of the <code>malloc_state</code> structure and print out information accordingly.</p>"},{"location":"commands/heap/#heap-bins-tcache-command","title":"<code>heap bins tcache</code> command","text":"<p>Modern versions of <code>glibc</code> use <code>tcache</code> bins to speed up multithreaded programs.  Unlike other bins, <code>tcache</code> bins are allocated on a per-thread basis, so there is one set of <code>tcache</code> bins for each thread.</p> <pre><code>gef\u27a4 heap bins tcache [all] [thread_ids...]\n</code></pre> <p>Without any arguments, <code>heap bins tcache</code> will display the <code>tcache</code> for the current thread. <code>heap bins tcache all</code> will show the <code>tcache</code>s for every thread, or you can specify any number of thread ids to see the <code>tcache</code> for each of them. For example, use the following command to show the <code>tcache</code> bins for threads 1 and 2.</p> <pre><code>gef\u27a4 heap bins tcache 1 2\n</code></pre>"},{"location":"commands/help/","title":"help","text":""},{"location":"commands/help/#command-gef-help","title":"Command <code>gef help</code>","text":"<p>Displays the help menu for the loaded GEF commands.</p> <pre><code>gef\u27a4 gef help\n</code></pre>"},{"location":"commands/hexdump/","title":"hexdump","text":""},{"location":"commands/hexdump/#command-hexdump","title":"Command <code>hexdump</code>","text":"<p>Imitation of the WinDBG command.</p> <p>This command takes 4 optional arguments:</p> <ul> <li>The format for representing the data (by default, byte)</li> <li>A value/address/symbol used as the location to print the hexdump from (by default, $sp)</li> <li>The number of qword/dword/word/bytes to display (by default, 64 if the format is byte, 16   otherwise)</li> <li>The direction of output lines (by default, from low to high addresses)</li> </ul> <p><code>hexdump byte</code> will also try to display the ASCII character values if the byte is printable (similarly to the <code>hexdump -C</code> command on Linux).</p> <p>The syntax is as following:</p> <pre><code>hexdump (qword|dword|word|byte) [-h] [--reverse] [--size SIZE] [address]\n</code></pre> <p>Examples:</p> <ul> <li>Display 4 QWORDs from <code>$pc</code>:</li> </ul> <pre><code>gef\u27a4  hexdump qword $pc --size 4\n0x7ffff7a5c1c0+0000 \u2502 0x4855544155415641\n0x7ffff7a5c1c0+0008 \u2502 0x0090ec814853cd89\n0x7ffff7a5c1c0+0010 \u2502 0x377d6f058b480000\n0x7ffff7a5c1c0+0018 \u2502 0x748918247c894800\n</code></pre> <ul> <li>Display 32 bytes from a location in the stack:</li> </ul> <pre><code>gef\u27a4  hexdump byte 0x00007fffffffe5e5 --size 32\n0x00007fffffffe5e5     2f 68 6f 6d 65 2f 68 75 67 73 79 2f 63 6f 64 65     /home/hugsy/code\n0x00007fffffffe5f5     2f 67 65 66 2f 74 65 73 74 73 2f 77 69 6e 00 41     /gef/tests/win.A\n</code></pre> <ul> <li>Display 8 WORDs from <code>$sp</code> in reverse order:</li> </ul> <pre><code>gef\u27a4  hexdump word 8 --reverse\n0x00007fffffffe0ee\u2502+0x000e   0x0000\n0x00007fffffffe0ec\u2502+0x000c   0x7fff\n0x00007fffffffe0ea\u2502+0x000a   0xffff\n0x00007fffffffe0e8\u2502+0x0008   0xe3f5\n0x00007fffffffe0e6\u2502+0x0006   0x0000\n0x00007fffffffe0e4\u2502+0x0004   0x0000\n0x00007fffffffe0e2\u2502+0x0002   0x0000\n0x00007fffffffe0e0\u2502+0x0000   0x0001\n</code></pre>"},{"location":"commands/highlight/","title":"highlight","text":""},{"location":"commands/highlight/#command-highlight","title":"Command <code>highlight</code>","text":"<p>This command sets up custom highlighting for user set strings.</p> <p>Syntax:</p> <pre><code>highlight (add|remove|list|clear)\n</code></pre> <p>Alias:</p> <ul> <li><code>hl</code></li> </ul>"},{"location":"commands/highlight/#adding-matches","title":"Adding matches","text":"<p>The following will add <code>41414141</code>/<code>'AAAA'</code> as yellow, and <code>42424242</code>/<code>'BBBB'</code> as blue:</p> <pre><code>gef\u27a4  hl add 41414141 yellow\ngef\u27a4  hl add 42424242 blue\ngef\u27a4  hl add AAAA yellow\ngef\u27a4  hl add BBBB blue\n</code></pre>"},{"location":"commands/highlight/#removing-matches","title":"Removing matches","text":"<p>To remove a match, target it by the original string used, ex.:</p> <pre><code>gef\u27a4  hl rm 41414141\n</code></pre>"},{"location":"commands/highlight/#listing-matches","title":"Listing matches","text":"<p>To list all matches with their colors:</p> <pre><code>gef\u27a4  hl list\n41414141 | yellow\n42424242 | blue\nAAAA     | yellow\nBBBB     | blue\n</code></pre>"},{"location":"commands/highlight/#clearing-all-matches","title":"Clearing all matches","text":"<p>To clear all matches currently setup:</p> <pre><code>gef\u27a4  hl clear\n</code></pre>"},{"location":"commands/highlight/#regex-support","title":"RegEx support","text":"<p>RegEx support is disabled by default, this is done for performance reasons.</p> <p>To enable regular expressions on text matches:</p> <pre><code>gef\u27a4  gef config highlight.regex True\n</code></pre> <p>To check the current status:</p> <pre><code>gef\u27a4  gef config highlight.regex\nhighlight.regex (bool) = True\n</code></pre>"},{"location":"commands/highlight/#performance","title":"Performance","text":"<p>NOTE: Adding many matches may slow down debugging while using GEF. This includes enabling RegEx support.</p>"},{"location":"commands/highlight/#colors","title":"Colors","text":"<p>To find a list of supported colors, check the theme documentation.</p>"},{"location":"commands/hijack-fd/","title":"hijack-fd","text":""},{"location":"commands/hijack-fd/#command-hijack-fd","title":"Command <code>hijack-fd</code>","text":"<p><code>gef</code> can be used to modify file descriptors of the debugged process. The new file descriptor can point to a file, a pipe, a socket, a device etc.</p> <p>To use it, simply run</p> <pre><code>gef\u27a4 hijack-fd FDNUM NEWFILE\n</code></pre> <p>For instance,</p> <pre><code>gef\u27a4 hijack-fd 1 /dev/null\n</code></pre> <p>Will modify the current process file descriptors to redirect STDOUT to <code>/dev/null</code>.</p> <p>This command also supports connecting to an ip:port if it is provided as an argument. For example</p> <pre><code>gef\u27a4 hijack-fd 0 localhost:8888\n</code></pre> <p>Will redirect STDIN to localhost:8888</p> <p>Check out the tutorial on GEF's YouTube channel:</p> <p></p>"},{"location":"commands/memory/","title":"memory","text":""},{"location":"commands/memory/#command-memory","title":"Command <code>memory</code>","text":"<p>As long as the 'memory' section is enabled in your context layout (which it is by default), you can register addresses, lengths, and grouping size.</p> <p></p> <p>Note: this command should NOT be mistaken with the GDB <code>watch</code> command meant to set breakpoints on memory access (read,write,exec).</p>"},{"location":"commands/memory/#adding-a-watch","title":"Adding a watch","text":"<p>Specify a location to watch and display with the context, along with their optional size and format:</p> <p>Syntax:</p> <pre><code>memory watch &lt;ADDRESS&gt; [SIZE] [(qword|dword|word|byte|pointers)]\n</code></pre> <p>If the format specified is <code>pointers</code>, then the output will be similar to executing the command <code>dereference $address</code>. For all other format, the output will be an hexdump of the designated location.</p> <p>Note that the address format is a GDB therefore a symbol can be passed to it. It also supports GEF functions format allowing to easily track commonly used addresses:</p> <p>For example, to watch the first 5 entries of the GOT as pointers:</p> <pre><code>gef \u27a4 memory watch $_got()+0x18 5\n[+] Adding memwatch to 0x555555773c50\n</code></pre> <p>Which, when the <code>context</code> is displayed, will show something like:</p> <p></p>"},{"location":"commands/memory/#removing-a-watch","title":"Removing a watch","text":"<p>Remove a watched address. To list all the addresses being watched, use <code>memory list</code>.</p> <p>Syntax:</p> <pre><code>memory unwatch &lt;ADDRESS&gt;\n</code></pre>"},{"location":"commands/memory/#listing-watches","title":"Listing watches","text":"<p>Enumerate all the addresses currently watched by the <code>memory</code> command.</p> <p>Syntax:</p> <pre><code>memory list\n</code></pre> <p>The command will output a list of all the addresses watched, along with the size and format to display them as.</p>"},{"location":"commands/memory/#resetting-watches","title":"Resetting watches","text":"<p>Empties the list of addresses to watch.</p> <p>Syntax:</p> <pre><code>memory reset\n</code></pre>"},{"location":"commands/name-break/","title":"name-break","text":""},{"location":"commands/name-break/#command-name-break","title":"Command <code>name-break</code>","text":"<p>The command <code>name-break</code> (alias <code>nb</code>) can be used to set a breakpoint on a location with a name assigned to it.</p> <p>Every time this breakpoint is hit, the specified name will also be shown in the <code>extra</code> section to make it easier to keep an overview when using multiple breakpoints in a stripped binary.</p> <p><code>name-break name [address]</code></p> <p><code>address</code> may be a linespec, address, or explicit location, same as specified for <code>break</code>. If <code>address</code> isn't specified, it will create the breakpoint at the current instruction pointer address.</p> <p>Examples:</p> <ul> <li><code>nb first *0x400ec0</code></li> <li><code>nb \"main func\" main</code></li> <li><code>nb read_secret *main+149</code></li> <li><code>nb check_heap</code></li> </ul> <p>Example output:</p> <pre><code>\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code:x86:64 \u2500\u2500\u2500\u2500\n     0x400e04                  add    eax, 0xfffbe6e8\n     0x400e09                  dec    ecx\n     0x400e0b                  ret\n \u2192   0x400e0c                  push   rbp\n     0x400e0d                  mov    rbp, rsp\n     0x400e10                  sub    rsp, 0x50\n     0x400e14                  mov    QWORD PTR [rbp-0x48], rdi\n     0x400e18                  mov    QWORD PTR [rbp-0x50], rsi\n     0x400e1c                  mov    rax, QWORD PTR fs:0x28\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stack \u2500\u2500\u2500\u2500\n0x00007fffffffe288\u2502+0x0000: 0x0000000000401117  \u2192   movzx ecx, al     \u2190 $rsp\n0x00007fffffffe290\u2502+0x0008: 0x00007fffffffe4b8  \u2192  0x00007fffffffe71d  \u2192  \"/ctf/t19/srv_copy\"\n0x00007fffffffe298\u2502+0x0010: 0x0000000100000000\n0x00007fffffffe2a0\u2502+0x0018: 0x0000000000000000\n0x00007fffffffe2a8\u2502+0x0020: 0x0000000000000004\n0x00007fffffffe2b0\u2502+0x0028: 0x0000000000000000\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 extra \u2500\u2500\u2500\u2500\n[+] Hit breakpoint *0x400e0c (check_entry)\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4\n</code></pre>"},{"location":"commands/nop/","title":"nop","text":""},{"location":"commands/nop/#command-nop","title":"Command <code>nop</code>","text":"<p>The <code>nop</code> command allows you to easily patch instructions with nops.</p> <pre><code>nop [LOCATION] [--i ITEMS] [--f] [--n] [--b]\n</code></pre> <p><code>LOCATION</code> address/symbol to patch (by default this command replaces whole instructions)</p> <p><code>--i ITEMS</code> number of items to insert (default 1)</p> <p><code>--f</code> Force patch even when the selected settings could overwrite partial instructions</p> <p><code>--n</code> Instead of replacing whole instructions, insert ITEMS nop instructions, no matter how many instructions it overwrites</p> <p><code>--b</code> Instead of replacing whole instructions, fill ITEMS bytes with nops</p> <p>nop the current instruction ($pc):</p> <pre><code>gef\u27a4 nop\n</code></pre> <p>nop an instruction at $pc+3 address:</p> <pre><code>gef\u27a4 nop $pc+3\n</code></pre> <p>nop two instructions at address $pc+3:</p> <pre><code>gef\u27a4 nop --i 2 $pc+3\n</code></pre> <p>Replace 1 byte with nop at current instruction ($pc):</p> <pre><code>gef\u27a4 nop --b\n</code></pre> <p>Replace 1 byte with nop at address $pc+3:</p> <pre><code>gef\u27a4 nop --b $pc+3\n</code></pre> <p>Replace 2 bytes with nop(s) (breaking the last instruction) at address $pc+3:</p> <pre><code>gef\u27a4 nop --f --b --i 2 $pc+3\n</code></pre> <p>Patch 2 nops at address $pc+3:</p> <pre><code>gef\u27a4 nop --n --i 2 $pc+3\n</code></pre>"},{"location":"commands/patch/","title":"patch","text":""},{"location":"commands/patch/#command-patch","title":"Command <code>patch</code>","text":"<p><code>patch</code> lets you easily patch the specified values to the specified address.</p> <pre><code>gef\u27a4 patch byte $eip 0x90\ngef\u27a4 patch string $eip \"cool!\"\n</code></pre> <p>These commands copy the first 10 bytes of $rsp+8 to $rip:</p> <pre><code>gef\u27a4  print-format --lang bytearray -l 10 $rsp+8\nSaved data b'\\xcb\\xe3\\xff\\xff\\xff\\x7f\\x00\\x00\\x00\\x00'... in '$_gef0'\ngef\u27a4  patch byte $rip $_gef0\n</code></pre> <p>Very handy to copy-paste-execute shellcodes/data from different memory regions.</p>"},{"location":"commands/pattern/","title":"pattern","text":""},{"location":"commands/pattern/#command-pattern","title":"Command <code>pattern</code>","text":"<p>This command will create or search a De Bruijn cyclic pattern to facilitate determining offsets in memory. The sequence consists of a number of unique substrings of a chosen length.</p> <p>It should be noted that for better compatibility, the algorithm implemented in <code>GEF</code> is the same as the one in <code>pwntools</code>, and can therefore be used in conjunction.</p>"},{"location":"commands/pattern/#pattern-create","title":"<code>pattern create</code>","text":"<pre><code>pattern create [-h] [-n N] [length]\n</code></pre> <p>The sub-command <code>create</code> allows one create a new De Bruijn sequence. The optional argument <code>n</code> determines the length of unique subsequences. Its default value matches the currently loaded architecture. The <code>length</code> argument sets the total length of the whole sequence.</p> <pre><code>gef\u27a4  pattern create -n 4 128\n[+] Generating a pattern of 128 bytes (n=4)\naaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaab\n[+] Saved as '$_gef0'\n</code></pre> <p>The equivalent command with <code>pwntools</code> is</p> <pre><code>from pwn import *\np = cyclic(128, n=8)\n</code></pre>"},{"location":"commands/pattern/#pattern-search","title":"<code>pattern search</code>","text":"<pre><code>pattern search [-h] [-n N] [--max-length MAX_LENGTH] [pattern]\n</code></pre> <p>The <code>search</code> sub-command seeks the <code>pattern</code> given as argument, trying to find its offset in the De Bruijn sequence. The optional argument <code>n</code> determines the length of unique subsequences, and it should usually match the length of <code>pattern</code>. Using <code>MAX_LENGTH</code> the maximum length of the sequence to search in can be adjusted.</p> <p>Note that the <code>pattern</code> can be passed as a GDB symbol (such as a register name), a string or a hexadecimal value</p> <pre><code>gef\u27a4  pattern search 0x6161616161616167\n[+] Searching '0x6161616161616167'\n[+] Found at offset 48 (little-endian search) likely\n[+] Found at offset 41 (big-endian search)\ngef\u27a4  pattern search $rbp\n[+] Searching '$rbp'\n[+] Found at offset 32 (little-endian search) likely\n[+] Found at offset 25 (big-endian search)\ngef\u27a4  pattern search aaaaaaac\n[+] Searching for 'aaaaaaac'\n[+] Found at offset 16 (little-endian search) likely\n[+] Found at offset 9 (big-endian search)\n</code></pre>"},{"location":"commands/pcustom/","title":"pcustom","text":""},{"location":"commands/pcustom/#command-pcustom","title":"Command <code>pcustom</code>","text":"<p><code>gef</code> provides a way to create and apply to the currently debugged environment, any new structure (in the C-struct way). On top of simply displaying known and user-defined structures, it also allows to apply those structures to the current context. It intends to mimic the very useful WinDBG <code>dt</code> command.</p> <p>This is achieved via the command <code>pcustom</code> (for <code>print custom</code>), or you can use its alias, <code>dt</code> (in reference to the WinDBG command) as provided by the <code>WinDbg compatibility extension</code></p>"},{"location":"commands/pcustom/#configuration","title":"Configuration","text":"<p>New structures can be stored in the location given by the configuration setting:</p> <pre><code>gef\u27a4 gef config pcustom.struct_path\n</code></pre> <p>By default, this location is in <code>$TEMP/gef/structs</code> (e.g. <code>/tmp/user/1000/gef/structs</code>). The structure can be created as a simple <code>ctypes</code> structure, in a file called <code>&lt;struct_name&gt;.py</code>.</p> <p>You can naturally set this path to a new location</p> <pre><code>gef\u27a4 gef config pcustom.struct_path /my/new/location\n</code></pre> <p>And save this change so you can re-use it directly next time you use <code>gdb</code></p> <pre><code>gef\u27a4 gef save\n[+] Configuration saved to '~/.gef.rc'\n</code></pre>"},{"location":"commands/pcustom/#using-user-defined-structures","title":"Using user-defined structures","text":"<p>You can list existing custom structures via</p> <pre><code>gef\u27a4  pcustom list\n[+] Listing custom structures from '/tmp/structs'\n \u2192  /tmp/structs/A.py (A, B)\n \u2192  /tmp/structs/elf32_t.py (elf32_t)\n \u2192  /tmp/structs/elf64_t.py (elf64_t)\n[...]\n</code></pre> <p>To create or edit a structure, use <code>pcustom edit &lt;struct_name&gt;</code> to spawn your EDITOR with the targeted structure. If the file does not exist, <code>gef</code> will nicely create the tree and file, and fill it with a <code>ctypes</code> template that you can use straight away!</p> <pre><code>gef\u27a4  pcustom new mystruct_t\n[+] Creating '/tmp/gef/structs/mystruct_t.py' from template\n</code></pre> <p>If the structure already exists, GEF will open the text editor to edit the known structure. This is equivalent to:</p> <pre><code>gef\u27a4  pcustom edit elf32_t\n[+] Editing '/home/hugsy/code/gef-extras/structs/elf32_t.py'\n</code></pre>"},{"location":"commands/pcustom/#static-ctypesstructure-like-classes","title":"Static <code>ctypes.Structure</code>-like classes","text":"<p>The code can be defined just as any Python (using <code>ctypes</code>) code.</p> <pre><code>from ctypes import *\n\n'''\ntypedef struct {\n  int age;\n  char name[256];\n  int id;\n} person_t;\n'''\n\nclass person_t(Structure):\n    _fields_ = [\n        (\"age\",  c_int),\n        (\"name\", c_char * 256),\n        (\"id\", c_int),\n    ]\n\n    _values_ = [\n        # You can define a function to substitute the value\n        (\"age\", lambda age: \"Old\" if age &gt; 40 else \"Young\"),\n        # Or alternatively a list of 2-tuples\n        (\"id\", [\n            (0, \"root\"),\n            (1, \"normal user\"),\n            (None, \"Invalid person\")\n        ])\n    ]\n</code></pre> <p><code>pcustom</code> requires at least one argument, which is the name of the structure. With only one argument, <code>pcustom</code> will dump all the fields of this structure.</p> <pre><code>gef\u27a4  dt person_t\n+0000   age          c_int   /* size=0x4 */\n+0004   name         c_char_Array_256   /* size=0x100 */\n+0104   id           c_int   /* size=0x4 */\n</code></pre> <p>By providing an address or a GDB symbol, <code>gef</code> will apply this user-defined structure to the specified address:</p> <p></p> <p>This means that we can now create very easily new user-defined structures</p> <p>For a full demo, watch the following tutorial:</p> <p></p> <p>Additionally, if you have successfully configured your IDA settings, you can also directly import the structure(s) that was(were) reverse-engineered in IDA directly in your GDB session:  - (see <code>gef-extras/ida-rpyc</code>, which is the new improved version of <code>ida-interact</code>)</p>"},{"location":"commands/pcustom/#dynamic-ctypesstructure-like-classes","title":"Dynamic <code>ctypes.Structure</code>-like classes","text":"<p><code>pcustom</code> also supports the use of class factories to create a <code>ctypes.Structure</code> class whose structure will be adjusted based on the runtime information we provide (information about the currently debugged binary, the architecture, the size of a pointer and more).</p> <p>The syntax is relatively close to the way we use to create static classes (see above), but instead we define a function that will generate the class. The requirements for this class factory are:</p> <ul> <li>Take a single <code>Gef</code>   positional argument</li> <li>End the function name with <code>_t</code></li> </ul> <p>To continue the <code>person_t</code> function we defined in the example above, we could modify the static class as a dynamic one very easily:</p> <pre><code>import ctypes\nfrom typing import Optional\n\ndef person_t(gef: Optional[\"Gef\"]=None):\n    fields = [\n        (\"age\",  ctypes.c_int),\n        (\"name\", ctypes.c_char * 256),\n        (\"id\", ctypes.c_int),\n    ]\n\n    class person_cls(ctypes.Structure):\n      _fields_ = fields\n\n    return person_cls\n</code></pre> <p>Thanks to the <code>gef</code> parameter, the structure can be transparently adjusted so that GEF will parse it differently with its runtime information. For example, we can add constraints to the example above:</p> <pre><code>import ctypes\nfrom typing import Optional\n\ndef person_t(gef: Optional[\"Gef\"]==None):\n    fields = [\n        (\"age\",  ctypes.c_uint8),\n        (\"name\", ctypes.c_char * 256),\n        (\"id\", ctypes.c_uint8),\n    ]\n\n    # constraint on the libc version\n    if gef.libc.version &gt; (2, 27):\n      # or on the pointer size\n      pointer_type = ctypes.c_uint64 if gef.arch.ptrsize == 8 else ctypes.c_uint32\n      fields += [\n        (\"new_field\", pointer_size)\n      ]\n\n    class person_cls(ctypes.Structure):\n      _fields_ = fields\n\n    return person_cls\n</code></pre>"},{"location":"commands/pcustom/#public-repository-of-structures","title":"Public repository of structures","text":"<p>A community contributed repository of structures can be found in <code>gef-extras</code>. To deploy it:</p> <p>In bash:</p> <pre><code>git clone https://github.com/hugsy/gef-extras\n</code></pre> <p>In GEF:</p> <pre><code>gef\u27a4 gef config pcustom.struct_path /path/to/gef-extras/structs\ngef\u27a4 gef save\n</code></pre> <p>Then either close GDB or <code>gef reload</code>. You can confirm the structures were correctly loaded in GEF's prompt:</p> <pre><code>gef\u27a4 pcustom list\n</code></pre> <p>Should return several entries.</p> <p>And remember this is collaborative repository, so feel free to contribute too!</p>"},{"location":"commands/pie/","title":"pie","text":""},{"location":"commands/pie/#command-pie","title":"Command <code>pie</code>","text":"<p>The <code>pie</code> command is handy when working with position-independent executables. At runtime, it can automatically resolve addresses for breakpoints that are not static.</p> <p>Note that you need to use the entire <code>pie</code> command series to support PIE breakpoints, especially the \"<code>pie</code> run commands\", like <code>pie attach</code>, <code>pie run</code>, etc.</p>"},{"location":"commands/pie/#pie-breakpoint-command","title":"<code>pie breakpoint</code> command","text":"<p>This command sets a new PIE breakpoint. It can be used like the normal <code>breakpoint</code> command in gdb. The argument for the command is the offset from the base address or a symbol. The breakpoints will not be set immediately after this command. Instead, it will be set when you use <code>pie attach</code>, <code>pie run</code> or <code>pie remote</code> to actually attach to a process, so it can resolve the right base address.</p> <p>Usage:</p> <pre><code>gef\u27a4 pie breakpoint OFFSET\n</code></pre>"},{"location":"commands/pie/#pie-info-command","title":"<code>pie info</code> command","text":"<p>Since a PIE breakpoint is not a real breakpoint, this command provides a way to observe the state of all PIE breakpoints.</p> <p>This works just like <code>info breakpoint</code> in gdb.</p> <pre><code>gef\u27a4  pie info\nVNum    Num     Addr\n1       N/A     0xdeadbeef\n</code></pre> <p>VNum stands for virtual number and is used to enumerate the PIE breakpoints. Num is the number of the associated real breakpoints at runtime in GDB.</p> <p>You can omit the VNum argument to get info on all PIE breakpoints.</p> <p>Usage:</p> <pre><code>gef\u27a4  pie info [VNum]\n\n</code></pre>"},{"location":"commands/pie/#pie-delete-command","title":"<code>pie delete</code> command","text":"<p>This command deletes a PIE breakpoint given its VNum.</p> <p>Usage:</p> <pre><code>gef\u27a4  pie delete [VNum]\n</code></pre>"},{"location":"commands/pie/#pie-attach-command","title":"<code>pie attach</code> command","text":"<p>This command behaves like GDB's <code>attach</code> command. Always use this command instead of <code>attach</code> if you have PIE breakpoints. This will convert the PIE breakpoints to real breakpoints at runtime.</p> <p>The usage is just the same as <code>attach</code>.</p>"},{"location":"commands/pie/#pie-remote-command","title":"<code>pie remote</code> command","text":"<p>This command behaves like GDB's <code>remote</code> command. Always use this command instead of <code>remote</code> if you have PIE breakpoints. Behind the scenes this will connect to the remote target using <code>gef remote</code> and then convert the PIE breakpoints to real breakpoints at runtime.</p> <p>The usage is just the same as <code>remote</code>.</p>"},{"location":"commands/pie/#pie-run-command","title":"<code>pie run</code> command","text":"<p>This command behaves like GDB's <code>run</code> command. Always use this command instead of <code>run</code> if you have PIE breakpoints. This will convert the PIE breakpoints to real breakpoints at runtime.</p> <p>The usage is just the same as <code>run</code>.</p>"},{"location":"commands/print-format/","title":"print-format","text":""},{"location":"commands/print-format/#command-print-format","title":"Command <code>print-format</code>","text":"<p>The command <code>print-format</code> (alias <code>pf</code>) will dump an arbitrary location as an array of bytes following the format specified. Currently, the output formats supported are</p> <ul> <li>Python (<code>py</code> - default)</li> <li>C (<code>c</code>)</li> <li>Assembly (<code>asm</code>)</li> <li>Javascript (<code>js</code>)</li> <li>Hex string (<code>hex</code>)</li> <li>For patch byte command or GDB $_gef[N] byte access (<code>bytearray</code>)</li> </ul> <pre><code>gef\u27a4  print-format -h\n[+] print-format [--lang LANG] [--bitlen SIZE] [(--length,-l) LENGTH] [--clip] LOCATION\n    --lang LANG specifies the output format for programming language (available: ['py', 'c', 'js', 'asm', 'hex'], default 'py').\n    --bitlen SIZE specifies size of bit (possible values: [8, 16, 32, 64], default is 8).\n    --length LENGTH specifies length of array (default is 256).\n    --clip The output data will be copied to clipboard\n    LOCATION specifies where the address of bytes is stored.\n</code></pre> <p>For example this command will dump 10 bytes from <code>$rsp</code> and copy the result to the clipboard.</p> <pre><code>gef\u27a4  print-format --lang py --bitlen 8 -l 10 --clip $rsp\n[+] Copied to clipboard\nbuf = [0x87, 0xfa, 0xa3, 0xf7, 0xff, 0x7f, 0x0, 0x0, 0x30, 0xe6]\n</code></pre> <p>These commands copy the first 10 bytes of $rsp+8 to $rip:</p> <pre><code>gef\u27a4  print-format --lang bytearray -l 10 $rsp+8\nSaved data b'\\xcb\\xe3\\xff\\xff\\xff\\x7f\\x00\\x00\\x00\\x00'... in '$_gef0'\ngef\u27a4  display/x $_gef0[5]\n4: /x $_gef0[5] = 0x7f\ngef\u27a4  patch byte $rip $_gef0\n</code></pre> <p>Very handy to copy-paste-execute shellcodes/data from different memory regions.</p>"},{"location":"commands/process-search/","title":"process-search","text":""},{"location":"commands/process-search/#command-process-search","title":"Command <code>process-search</code>","text":"<p><code>process-search</code> (aka <code>ps</code>) is a convenience command to list and filter process on the host. It is aimed at making the debugging process a little easier when targeting forking process (such as tcp/listening daemon that would fork upon <code>accept()</code>).</p> <p>Without argument, it will return all processes reachable by user:</p> <pre><code>gef\u27a4  ps\n1               root            0.0             0.4             ?           /sbin/init\n2               root            0.0             0.0             ?           [kthreadd]\n3               root            0.0             0.0             ?           [ksoftirqd/0]\n4               root            0.0             0.0             ?           [kworker/0:0]\n5               root            0.0             0.0             ?           [kworker/0:0H]\n6               root            0.0             0.0             ?           [kworker/u2:0]\n7               root            0.0             0.0             ?           [rcu_sched]\n8               root            0.0             0.0             ?           [rcuos/0]\n9               root            0.0             0.0             ?           [rcu_bh]\n10              root            0.0             0.0             ?           [rcuob/0]\n11              root            0.0             0.0             ?           [migration/0]\n[...]\n</code></pre> <p>Or to filter with pattern:</p> <pre><code>gef\u27a4  ps bash\n22590           vagrant         0.0             0.8             pts/0       -bash\n</code></pre> <p>Note: Use \"\\\" for escaping and \"\\\\\" for a literal backslash\" in the pattern.</p> <p><code>ps</code> also accepts options:</p> <ul> <li><code>--smart-scan</code> will filter out probably less relevant processes (belonging to different users,   pattern matched to arguments instead of the commands themselves, etc.)</li> <li><code>--attach</code> will automatically attach to the first process found</li> </ul> <p>So, for example, if your targeted process is called <code>/home/foobar/plop</code>, but the existing instance is used through <code>socat</code>, like</p> <pre><code>socat tcp-l:1234,fork,reuseaddr exec:/home/foobar/plop\n</code></pre> <p>Then every time a new connection is opened to tcp/1234, <code>plop</code> will be forked, and GEF can easily attach to it with the command</p> <pre><code>gef\u27a4  ps --attach --smart-scan plop\n</code></pre>"},{"location":"commands/process-status/","title":"process-status","text":""},{"location":"commands/process-status/#command-process-status","title":"Command <code>process-status</code>","text":"<p>This command replaces the old commands <code>pid</code> and <code>fd</code>.</p> <p><code>process-status</code> provides an exhaustive description of the current running process, by extending the information provided by GDB <code>info proc</code> command, with all the information from the <code>procfs</code> structure.</p> <pre><code>gef\u27a4 ps --smart-scan zsh\n22879\ngef\u27a4 attach 22879\n[...]\ngef\u27a4 status\n[+] Process Information\n        PID  \u2192  22879\n        Executable  \u2192  /bin/zsh\n        Command line  \u2192  '-zsh'\n[+] Parent Process Information\n        Parent PID  \u2192  4475\n        Command line  \u2192  'tmux new -s cool vibe\n[+] Children Process Information\n        PID  \u2192  26190 (Name: '/bin/sleep', CmdLine: 'sleep 100000')\n[+] File Descriptors:\n        /proc/22879/fd/0  \u2192  /dev/pts/4\n        /proc/22879/fd/1  \u2192  /dev/pts/4\n        /proc/22879/fd/2  \u2192  /dev/pts/4\n        /proc/22879/fd/10  \u2192  /dev/pts/4\n[+] File Descriptors:\n        No TCP connections\n</code></pre>"},{"location":"commands/registers/","title":"registers","text":""},{"location":"commands/registers/#command-registers","title":"Command <code>registers</code>","text":"<p>The <code>registers</code> command will print all the registers and dereference any pointers.</p> <p>Example on a MIPS host:</p> <pre><code>gef\u27a4 reg\n$zero     : 0x00000000\n$at       : 0x00000001\n$v0       : 0x7fff6cd8 -&gt; 0x77e5e7f8 -&gt; &lt;__libc_start_main+200&gt;: bnez v0,0x77e5e8a8\n$v1       : 0x77ff4490\n$a0       : 0x00000001\n$a1       : 0x7fff6d94 -&gt; 0x7fff6e85 -&gt; \"/root/demo-mips\"\n$a2       : 0x7fff6d9c -&gt; 0x7fff6e91 -&gt; \"SHELL=/bin/bash\"\n$a3       : 0x00000000\n$t0       : 0x77fc26a0 -&gt; 0x0\n$t1       : 0x77fc26a0 -&gt; 0x0\n$t2       : 0x77fe5000 -&gt; \"_dl_fini\"\n$t3       : 0x77fe5000 -&gt; \"_dl_fini\"\n$t4       : 0xf0000000\n$t5       : 0x00000070\n$t6       : 0x00000020\n$t7       : 0x7fff6bc8 -&gt; 0x0\n$s0       : 0x00000000\n$s1       : 0x00000000\n$s2       : 0x00000000\n$s3       : 0x00500000\n$s4       : 0x00522f48\n$s5       : 0x00522608\n$s6       : 0x00000000\n$s7       : 0x00000000\n$t8       : 0x0000000b\n$t9       : 0x004008b0 -&gt; &lt;main&gt;: addiu sp,sp,-32\n$k0       : 0x00000000\n$k1       : 0x00000000\n$s8       : 0x00000000\n$status   : 0x0000a413\n$badvaddr : 0x77e7a874 -&gt; &lt;__cxa_atexit&gt;: lui gp,0x15\n$cause    : 0x10800024\n$pc       : 0x004008c4 -&gt; &lt;main+20&gt;: li v0,2\n$sp       : 0x7fff6ca0 -&gt; 0x77e4a834 -&gt; 0x29bd\n$hi       : 0x000001a5\n$lo       : 0x00005e17\n$fir      : 0x00739300\n$fcsr     : 0x00000000\n$ra       : 0x77e5e834 -&gt; &lt;__libc_start_main+260&gt;: lw gp,16(sp)\n$gp       : 0x00418b20\n</code></pre>"},{"location":"commands/registers/#filtering-registers","title":"Filtering registers","text":"<p>If one or more register names are passed to the <code>registers</code> command as optional arguments, then only those will be shown:</p> <pre><code>gef\u27a4 reg $rax $rip $rsp\n$rax   : 0x0000555555555169  \u2192  &lt;main+0&gt; endbr64\n$rsp   : 0x00007fffffffe3e8  \u2192  0x00007ffff7df40b3  \u2192  &lt;__libc_start_main+243&gt; mov edi, eax\n$rip   : 0x0000555555555169  \u2192  &lt;main+0&gt; endbr64\n</code></pre>"},{"location":"commands/reset-cache/","title":"reset-cache","text":""},{"location":"commands/reset-cache/#command-reset-cache","title":"Command <code>reset-cache</code>","text":"<p>This command is only useful for debugging <code>GEF</code> itself.</p>"},{"location":"commands/scan/","title":"scan","text":""},{"location":"commands/scan/#command-scan","title":"Command <code>scan</code>","text":"<p><code>scan</code> searches for addresses of one memory region (needle) inside another region (haystack) and lists all results.</p> <p>Usage:</p> <pre><code>gef\u27a4  scan NEEDLE HAYSTACK\n</code></pre> <p><code>scan</code> requires two arguments, the first is the memory section that will be searched and the second is what will be searched for. The arguments are grepped against the process's memory mappings (just like vmmap) to determine the memory ranges to search.</p> <pre><code>gef\u27a4  scan stack libc\n[+] Searching for addresses in 'stack' that point to 'libc'\n[stack]: 0x00007fffffffd6a8\u2502+0x1f6a8: 0x00007ffff77cf482  \u2192  \"__tunable_get_val\"\n[stack]: 0x00007fffffffd6b0\u2502+0x1f6b0: 0x00007ffff77bff78  \u2192  0x0000001200001ab2\n[stack]: 0x00007fffffffd758\u2502+0x1f758: 0x00007ffff77cd9d0  \u2192  0x6c5f755f72647800\n[stack]: 0x00007fffffffd778\u2502+0x1f778: 0x00007ffff77bda6c  \u2192  0x0000090900000907\n[stack]: 0x00007fffffffd7d8\u2502+0x1f7d8: 0x00007ffff77cd9d0  \u2192  0x6c5f755f72647800\n[...]\n</code></pre>"},{"location":"commands/scan/#advanced-needlehaystack-syntax","title":"Advanced Needle/Haystack syntax","text":"<p>To check mappings without a path associated, an address range (start-end) can be used. Note that ranges don't include whitespaces.</p> <p></p>"},{"location":"commands/search-pattern/","title":"search-pattern","text":""},{"location":"commands/search-pattern/#command-search-pattern","title":"Command <code>search-pattern</code>","text":"<p><code>gef</code> allows you to search for a specific pattern at runtime in all the segments of your process memory layout. The command <code>search-pattern</code>, alias <code>grep</code>, aims to be straight-forward to use:</p> <pre><code>gef\u27a4  search-pattern MyPattern\n</code></pre> <p></p> <p>It will provide an easily understandable to spot occurrences of the specified pattern, including the section it/they was/were found, and the permission associated to that section.</p> <p><code>search-pattern</code> can also be used to search for addresses. To do so, simply ensure that your pattern starts with <code>0x</code> and is a valid hex address. For example:</p> <pre><code>gef\u27a4  search-pattern 0x4005f6\n</code></pre> <p></p> <p>The <code>search-pattern</code> command can also be used as a way to search for cross-references to an address. For this reason, the alias <code>xref</code> also points to the command <code>search-pattern</code>.  Therefore the command above is equivalent to <code>xref 0x4005f6</code> which makes it more intuitive to use.</p>"},{"location":"commands/search-pattern/#searching-in-a-specific-range","title":"Searching in a specific range","text":"<p>Sometimes, you may need to search for a very common pattern. To limit the search space, you can also specify an address range or the section to be checked.</p> <pre><code>gef\u27a4  search-pattern 0x4005f6 little libc\ngef\u27a4  search-pattern 0x4005f6 little 0x603100-0x603200\n</code></pre>"},{"location":"commands/search-pattern/#searching-in-a-specific-range-using-regex","title":"Searching in a specific range using regex","text":"<p>Sometimes, you may need an advanced search using regex. Just use --regex arg.</p> <p>Example: how to find null-end-printable(from x20-x7e) C strings (min size &gt;=2 bytes) with a regex:</p> <pre><code>gef\u27a4  search-pattern --regex 0x401000 0x401500 ([\\\\x20-\\\\x7E]{2,})(?=\\\\x00)\n\n</code></pre>"},{"location":"commands/shellcode/","title":"shellcode","text":""},{"location":"commands/shellcode/#command-shellcode","title":"Command <code>shellcode</code>","text":"<p><code>shellcode</code> is a command line client for @JonathanSalwan shellcodes database. It can be used to search and download directly via <code>GEF</code> the shellcode you're looking for. Two primitive subcommands are available, <code>search</code> and <code>get</code></p> <pre><code>gef\u27a4 shellcode search arm\n[+] Showing matching shellcodes\n901     Linux/ARM       Add map in /etc/hosts file - 79 bytes\n853     Linux/ARM       chmod(\"/etc/passwd\", 0777) - 39 bytes\n854     Linux/ARM       creat(\"/root/pwned\", 0777) - 39 bytes\n855     Linux/ARM       execve(\"/bin/sh\", [], [0 vars]) - 35 bytes\n729     Linux/ARM       Bind Connect UDP Port 68\n730     Linux/ARM       Bindshell port 0x1337\n[...]\ngef\u27a4 shellcode get 698\n[+] Downloading shellcode id=698\n[+] Shellcode written as '/tmp/sc-EfcWtM.txt'\ngef\u27a4 system cat /tmp/sc-EfcWtM.txt\n/*\nTitle:     Linux/ARM - execve(\"/bin/sh\", [0], [0 vars]) - 27 bytes\nDate:      2010-09-05\nTested on: ARM926EJ-S rev 5 (v5l)\nAuthor:    Jonathan Salwan - twitter: @jonathansalwan\n\nshell-storm.org\n\nShellcode ARM without 0x20, 0x0a and 0x00\n[...]\n</code></pre>"},{"location":"commands/skipi/","title":"skipi","text":""},{"location":"commands/skipi/#command-skipi","title":"Command <code>skipi</code>","text":"<p>The <code>skipi</code> command allows you to easily skip instructions execution.</p> <pre><code>skipi [LOCATION] [--n NUM_INSTRUCTIONS]\n</code></pre> <p><code>LOCATION</code> address/symbol from where to skip (default is <code>$pc</code>)</p> <p><code>--n NUM_INSTRUCTIONS</code> Skip the specified number of instructions instead of the default 1.</p> <pre><code>gef\u27a4  skipi\ngef\u27a4  skipi --n 3\ngef\u27a4  skipi 0x69696969\ngef\u27a4  skipi 0x69696969 --n 6\n</code></pre>"},{"location":"commands/stepover/","title":"stepover","text":""},{"location":"commands/stepover/#command-stepover","title":"Command <code>stepover</code>","text":"<p>The stepover command simplifies the process of stepping over instructions by continuing to a temporary breakpoint at the next instruction.</p> <p>This feature is particularly useful for stepping over call/rep instructions.</p> <p>Ex: Step over call instruction</p> <pre><code>stepover\n</code></pre> <pre><code>gef\u27a4  stepover\n</code></pre>"},{"location":"commands/stub/","title":"stub","text":""},{"location":"commands/stub/#command-stub","title":"Command <code>stub</code>","text":"<p>The <code>stub</code> command allows you stub out functions, optionally specifying the return value.</p> <pre><code>gef\u27a4  stub [-h] [--retval RETVAL] [address]\n</code></pre> <p><code>address</code> indicates the address of the function to bypass. If not specified, <code>GEF</code> will consider the instruction at the program counter to be the start of the function.</p> <p>If <code>--retval RETVAL</code> is provided, <code>GEF</code> will set the return value to the provided value. Otherwise, it will set the return value to 0.</p> <p>For example, it is trivial to bypass <code>fork()</code> calls. Since the return value is set to 0, it will in fact drop us into the \"child\" process. It must be noted that this is a different behaviour from the classic <code>set follow-fork-mode child</code> since here we do not spawn a new process, we only trick the parent process into thinking it has become the child.</p>"},{"location":"commands/stub/#example","title":"Example","text":"<p>Patching <code>fork()</code> calls:</p> <ul> <li>Without stub:</li> </ul> <p></p> <ul> <li>With stub:</li> </ul> <p></p>"},{"location":"commands/theme/","title":"theme","text":""},{"location":"commands/theme/#command-theme","title":"Command <code>theme</code>","text":"<p>Customize <code>GEF</code> by changing its color scheme.</p> <pre><code>gef\u27a4  theme\ncontext_title_message                   : red bold\ndefault_title_message                   : red bold\ndefault_title_line                      : green bold\ncontext_title_line                      : green bold\ndisable_color                           : 0\nxinfo_title_message                     : blue bold\n</code></pre>"},{"location":"commands/theme/#changing-colors","title":"Changing colors","text":"<p>You have the possibility to change the coloring properties of <code>GEF</code> display with the <code>theme</code> command. The command accepts 2 arguments, the name of the property to update, and its new coloring value.</p> <p>Colors can be one of the following:</p> <ul> <li>red</li> <li>green</li> <li>blue</li> <li>yellow</li> <li>gray</li> <li>pink</li> </ul> <p>Color also accepts the following attributes:</p> <ul> <li>bold</li> <li>underline</li> <li>highlight</li> <li>blink</li> </ul> <p>Any other will value simply be ignored.</p> <pre><code>gef\u27a4  theme context_title_message blue bold foobar\ngef\u27a4  theme\ncontext_title_message                   : blue bold\ndefault_title_message                   : red bold\ndefault_title_line                      : green bold\ncontext_title_line                      : green bold\ndisable_color                           : 0\nxinfo_title_message                     : blue bold\n</code></pre>"},{"location":"commands/tmux-setup/","title":"tmux-setup","text":""},{"location":"commands/tmux-setup/#command-tmux-setup","title":"Command <code>tmux-setup</code>","text":"<p>In the purpose of always making debugging sessions easier while being more effective, <code>GEF</code> integrates two commands:</p> <ul> <li><code>tmux-setup</code></li> <li><code>screen-setup</code></li> </ul> <p>Those commands will check whether GDB is being spawn from inside a <code>tmux</code> (resp. <code>screen</code>) session, and if so, will split the pane vertically, and configure the context to be redirected to the new pane, looking something like:</p> <p></p> <p>To set it up, simply enter</p> <pre><code>gef\u27a4 tmux-setup\n</code></pre> <p>Note: Although <code>screen-setup</code> provides a similar setup, the structure of <code>screen</code> does not allow a very clean way to do this. Therefore, if possible, it would be recommended to use the <code>tmux-setup</code> command instead.</p>"},{"location":"commands/tmux-setup/#possible-color-issues-with-tmux","title":"Possible color issues with tmux","text":"<p>On Linux tmux only supports 8 colors with some terminal capabilities (<code>$TERM</code> environment variable). This can mess up your color themes when using GEF with tmux. To remedy this if your terminal supports more colors you can either set the variable to something like <code>TERM=screen-256color</code> or if you don't want or can't change that variable you can start <code>tmux</code> with the <code>-2</code> flag to force tmux to use 256 colors.</p>"},{"location":"commands/trace-run/","title":"trace-run","text":""},{"location":"commands/trace-run/#command-trace-run","title":"Command <code>trace-run</code>","text":"<p>The <code>trace-run</code> command is meant to be provide a visual appreciation directly in IDA disassembler of the path taken by a specific execution. It should be used with the IDA script <code>ida_color_gdb_trace.py</code></p> <p>It will trace and store all values taken by <code>$pc</code> during the execution flow, from its current value, until the value provided as argument.</p> <pre><code>gef&gt; trace-run &lt;address_of_last_instruction_to_trace&gt;\n</code></pre> <p></p> <p>By using the script <code>ida_color_gdb_trace.py</code> on the text file generated, it will color the path taken:</p> <p></p>"},{"location":"commands/version/","title":"version","text":""},{"location":"commands/version/#command-version","title":"Command <code>version</code>","text":"<p>Print out version information about your current gdb environment.</p>"},{"location":"commands/version/#usage-examples","title":"Usage Examples","text":"<p>When GEF is located in a directory tracked with git:</p> <pre><code>gef\u27a4  version\nGEF: rev:48a9fd74dd39db524fb395e7db528f85cc49d081 (Git - clean)\nSHA1(/gef/rules/gef.py): 848cdc87ba7c3e99e8129ad820c9fcc0973b1e99\nGDB: 9.2\nGDB-Python: 3.8\n</code></pre> <p>Otherwise the command shows the <code>standalone</code> information:</p> <pre><code>gef\u27a4  version\nGEF: (Standalone)\nBlob Hash(/gef/rules/gef.py): f0aef0f481e8157006b26690bd121585d3befee0\nSHA1(/gef/rules/gef.py): 4b26a1175abcd8314d4816f97fdf908b3837c779\nGDB: 9.2\nGDB-Python: 3.8\n</code></pre> <p>The <code>Blob Hash</code> can be used to easily find the git commit(s) matching this file revision.</p> <pre><code>git log --oneline --find-object &lt;BLOB_HASH&gt;\n</code></pre> <p>If this command does not return anything then the file was most likely modified and cannot be matched to a specific git commit.</p>"},{"location":"commands/vmmap/","title":"vmmap","text":""},{"location":"commands/vmmap/#command-vmmap","title":"Command <code>vmmap</code>","text":"<p><code>vmmap</code> displays the target process's entire memory space mapping.</p> <p></p> <p>Interestingly, it helps finding secret gems: as an aware reader might have seen, memory mapping differs from one architecture to another (this is one of the main reasons I started <code>GEF</code> in a first place). For example, you can learn that ELF running on SPARC architectures always have their <code>.data</code> and <code>heap</code> sections set as Read/Write/Execute.</p> <p><code>vmmap</code> can accept multiple arguments, either patterns to match again mapping names, or addresses to determine which section it belongs to:</p> <ol> <li><code>-a</code> / <code>--addr</code>:<ul> <li>filter by address -&gt; parses the next argument as an integer or asks gdb to interpret the value</li> </ul> </li> <li><code>-n</code> / <code>--name</code>:<ul> <li>filter based on section name</li> </ul> </li> <li>If nothing is specified, it prints a warning and guesses the type</li> </ol> <p></p> <p></p> <p>The address can be also be given in the form of a register or variable.</p> <p></p> <p>And you can do all of them in one command \ud83d\ude42</p> <p></p>"},{"location":"commands/xfiles/","title":"xfiles","text":""},{"location":"commands/xfiles/#command-xfiles","title":"Command <code>xfiles</code>","text":"<p><code>xfiles</code> is a more convenient representation of the GDB native command, <code>info files</code> allowing you to filter by pattern given in argument. For example, if you only want to show the code sections (i.e. <code>.text</code>):</p> <p></p>"},{"location":"commands/xinfo/","title":"xinfo","text":""},{"location":"commands/xinfo/#command-xinfo","title":"Command <code>xinfo</code>","text":"<p><code>xinfo</code> displays all the information known to <code>gef</code> about the specific address given as argument:</p> <p></p> <p>Important note : For performance reasons, <code>gef</code> caches certain results. <code>gef</code> will try to automatically refresh its own cache to avoid relying on obsolete information of the debugged process. However, in some dodgy scenario, <code>gef</code> might fail detecting some new events making its cache partially obsolete. If you notice an inconsistency on your memory mapping, you might want to force <code>gef</code> flushing its cache and fetching brand new data, by running the command <code>reset-cache</code>.</p>"},{"location":"commands/xor-memory/","title":"xor-memory","text":""},{"location":"commands/xor-memory/#command-xor-memory","title":"Command <code>xor-memory</code>","text":"<p>This command is used to XOR a block of memory.</p> <p>Its syntax is:</p> <pre><code>xor-memory &lt;display|patch&gt; &lt;address&gt; &lt;size_to_read&gt; &lt;xor_key&gt;\n</code></pre> <p>The first argument (<code>display</code> or <code>patch</code>) is the action to perform:</p> <ul> <li><code>display</code> will only show an hexdump of the result of the XOR-ed memory block, without writing the    debuggee's memory.</li> </ul> <pre><code>gef\u27a4  xor display $rsp 16 1337\n[+] Displaying XOR-ing 0x7fff589b67f8-0x7fff589b6808 with '1337'\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ Original block ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n0x00007fff589b67f8     46 4e 40 00 00 00 00 00 00 00 00 00 00 00 00 00     FN@.............\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ XOR-ed block ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n0x00007fff589b67f8     55 79 53 37 13 37 13 37 13 37 13 37 13 37 13 37     UyS7.7.7.7.7.7.7\n</code></pre> <ul> <li><code>patch</code> will overwrite the memory with the xor-ed content.</li> </ul> <pre><code>gef\u27a4  xor patch $rsp 16 1337\n[+] Patching XOR-ing 0x7fff589b67f8-0x7fff589b6808 with '1337'\ngef\u27a4  hexdump byte $rsp 16\n0x00007fff589b67f8     55 79 53 37 13 37 13 37 13 37     UyS7.7.7.7\n</code></pre>"},{"location":"functions/base/","title":"base","text":""},{"location":"functions/base/#function-_base","title":"Function <code>$_base()</code>","text":"<p>Return the matching file's base address plus an optional offset. Defaults to current file. Note that quotes need to be escaped.</p> <p>Note: a debugging session must be active</p> <pre><code>$_base([filepath])\n</code></pre> <p>Example:</p> <pre><code>gef\u27a4 p $_base(\\\"/usr/lib/ld-2.33.so\\\")\n</code></pre>"},{"location":"functions/bss/","title":"bss","text":""},{"location":"functions/bss/#function-_bss","title":"Function <code>$_bss()</code>","text":"<p>Return the current BSS base address plus the given offset.</p> <p>Note: a debugging session must be active</p> <pre><code>$_bss([offset])\n</code></pre> <p>Example:</p> <pre><code>gef\u27a4 p $_bss(0x20)\n</code></pre>"},{"location":"functions/got/","title":"got","text":""},{"location":"functions/got/#function-_got","title":"Function <code>$_got()</code>","text":"<p>Return the current GOT base address plus the given offset.</p> <p>Note: a debugging session must be active</p> <pre><code>$_got([offset])\n</code></pre> <p>Example:</p> <pre><code>gef\u27a4 p $_got(0x20)\n</code></pre>"},{"location":"functions/heap/","title":"heap","text":""},{"location":"functions/heap/#function-_heap","title":"Function <code>$_heap()</code>","text":"<p>Return the current heap base address plus the given offset.</p> <p>Note: a debugging session must be active</p> <pre><code>$_heap([offset])\n</code></pre> <p>Example:</p> <pre><code>gef\u27a4 p $_heap(0x20)\n</code></pre>"},{"location":"functions/stack/","title":"stack","text":""},{"location":"functions/stack/#function-_stack","title":"Function <code>$_stack()</code>","text":"<p>Return the current stack base address plus the given offset.</p> <p>Note: a debugging session must be active</p> <pre><code>$_stack([offset])\n</code></pre> <p>Example:</p> <pre><code>gef\u27a4 p $_stack(0x20)\n</code></pre>"},{"location":"obsolete/docs/","title":"Index","text":""},{"location":"obsolete/docs/#the-latest-version-of-the-documentation-is-hosted-on-hugsygithubiogef","title":"The latest version of the documentation is hosted on hugsy.github.io/gef","text":""},{"location":"settings/context/","title":"Settings for command <code>context</code>","text":""},{"location":"settings/context/#enable","title":"<code>enable</code>","text":"<p>Name <code>context.enable</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>True</code></p> <p>Description Enable/disable printing the context when breaking</p>"},{"location":"settings/context/#show_source_code_variable_values","title":"<code>show_source_code_variable_values</code>","text":"<p>Name <code>context.show_source_code_variable_values</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>True</code></p> <p>Description Show extra PC context info in the source code</p>"},{"location":"settings/context/#show_full_source_file_name_max_len","title":"<code>show_full_source_file_name_max_len</code>","text":"<p>Name <code>context.show_full_source_file_name_max_len</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>30</code></p> <p>Description Show full source path name, if less than this value</p>"},{"location":"settings/context/#show_basename_source_file_name_max_len","title":"<code>show_basename_source_file_name_max_len</code>","text":"<p>Name <code>context.show_basename_source_file_name_max_len</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>20</code></p> <p>Description Show the source basename in full, if less than this value</p>"},{"location":"settings/context/#show_prefix_source_path_name_len","title":"<code>show_prefix_source_path_name_len</code>","text":"<p>Name <code>context.show_prefix_source_path_name_len</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>10</code></p> <p>Description When truncating source path, show this many path prefix characters</p>"},{"location":"settings/context/#show_stack_raw","title":"<code>show_stack_raw</code>","text":"<p>Name <code>context.show_stack_raw</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>False</code></p> <p>Description Show the stack pane as raw hexdump (no dereference)</p>"},{"location":"settings/context/#show_registers_raw","title":"<code>show_registers_raw</code>","text":"<p>Name <code>context.show_registers_raw</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>False</code></p> <p>Description Show the registers pane with raw values (no dereference)</p>"},{"location":"settings/context/#show_opcodes_size","title":"<code>show_opcodes_size</code>","text":"<p>Name <code>context.show_opcodes_size</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>0</code></p> <p>Description Number of bytes of opcodes to display next to the disassembly</p>"},{"location":"settings/context/#peek_calls","title":"<code>peek_calls</code>","text":"<p>Name <code>context.peek_calls</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>True</code></p> <p>Description Peek into calls</p>"},{"location":"settings/context/#peek_ret","title":"<code>peek_ret</code>","text":"<p>Name <code>context.peek_ret</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>True</code></p> <p>Description Peek at return address</p>"},{"location":"settings/context/#nb_lines_stack","title":"<code>nb_lines_stack</code>","text":"<p>Name <code>context.nb_lines_stack</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>8</code></p> <p>Description Number of line in the stack pane</p>"},{"location":"settings/context/#grow_stack_down","title":"<code>grow_stack_down</code>","text":"<p>Name <code>context.grow_stack_down</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>False</code></p> <p>Description Order of stack downward starts at largest down to stack pointer</p>"},{"location":"settings/context/#nb_lines_backtrace","title":"<code>nb_lines_backtrace</code>","text":"<p>Name <code>context.nb_lines_backtrace</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>10</code></p> <p>Description Number of line in the backtrace pane</p>"},{"location":"settings/context/#nb_lines_backtrace_before","title":"<code>nb_lines_backtrace_before</code>","text":"<p>Name <code>context.nb_lines_backtrace_before</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>2</code></p> <p>Description Number of line in the backtrace pane before selected frame</p>"},{"location":"settings/context/#nb_lines_threads","title":"<code>nb_lines_threads</code>","text":"<p>Name <code>context.nb_lines_threads</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>-1</code></p> <p>Description Number of line in the threads pane</p>"},{"location":"settings/context/#nb_lines_code","title":"<code>nb_lines_code</code>","text":"<p>Name <code>context.nb_lines_code</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>6</code></p> <p>Description Number of instruction after $pc</p>"},{"location":"settings/context/#nb_lines_code_prev","title":"<code>nb_lines_code_prev</code>","text":"<p>Name <code>context.nb_lines_code_prev</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>3</code></p> <p>Description Number of instruction before $pc</p>"},{"location":"settings/context/#ignore_registers","title":"<code>ignore_registers</code>","text":"<p>Name <code>context.ignore_registers</code></p> <p>Type <code>str</code></p> <p>DefaultValue: ``</p> <p>Description Space-separated list of registers not to display (e.g. '$cs $ds $gs')</p>"},{"location":"settings/context/#clear_screen","title":"<code>clear_screen</code>","text":"<p>Name <code>context.clear_screen</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>True</code></p> <p>Description Clear the screen before printing the context</p>"},{"location":"settings/context/#layout","title":"<code>layout</code>","text":"<p>Name <code>context.layout</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>legend regs stack code args source memory threads trace extra</code></p> <p>Description Change the order/presence of the context sections</p>"},{"location":"settings/context/#redirect","title":"<code>redirect</code>","text":"<p>Name <code>context.redirect</code></p> <p>Type <code>str</code></p> <p>DefaultValue: ``</p> <p>Description Redirect the context information to another TTY</p>"},{"location":"settings/context/#libc_args","title":"<code>libc_args</code>","text":"<p>Name <code>context.libc_args</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>False</code></p> <p>Description [DEPRECATED - Unused] Show libc function call args description</p>"},{"location":"settings/context/#libc_args_path","title":"<code>libc_args_path</code>","text":"<p>Name <code>context.libc_args_path</code></p> <p>Type <code>str</code></p> <p>DefaultValue: ``</p> <p>Description [DEPRECATED - Unused] Path to libc function call args json files, provided via gef-extras</p>"},{"location":"settings/dereference/","title":"Settings for command <code>dereference</code>","text":""},{"location":"settings/dereference/#max_recursion","title":"<code>max_recursion</code>","text":"<p>Name <code>dereference.max_recursion</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>7</code></p> <p>Description Maximum level of pointer recursion</p>"},{"location":"settings/entry-break/","title":"Settings for command <code>entry-break</code>","text":""},{"location":"settings/entry-break/#entrypoint_symbols","title":"<code>entrypoint_symbols</code>","text":"<p>Name <code>entry-break.entrypoint_symbols</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>main _main __libc_start_main __uClibc_main start _start</code></p> <p>Description Possible symbols for entry points</p>"},{"location":"settings/gef/","title":"Settings for command <code>gef</code>","text":""},{"location":"settings/gef/#follow_child","title":"<code>follow_child</code>","text":"<p>Name <code>gef.follow_child</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>True</code></p> <p>Description Automatically set GDB to follow child when forking</p>"},{"location":"settings/gef/#readline_compat","title":"<code>readline_compat</code>","text":"<p>Name <code>gef.readline_compat</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>False</code></p> <p>Description Workaround for readline SOH/ETX issue (SEGV)</p>"},{"location":"settings/gef/#debug","title":"<code>debug</code>","text":"<p>Name <code>gef.debug</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>False</code></p> <p>Description Enable debug mode for gef</p>"},{"location":"settings/gef/#autosave_breakpoints_file","title":"<code>autosave_breakpoints_file</code>","text":"<p>Name <code>gef.autosave_breakpoints_file</code></p> <p>Type <code>str</code></p> <p>DefaultValue: ``</p> <p>Description Automatically save and restore breakpoints</p>"},{"location":"settings/gef/#disable_target_remote_overwrite","title":"<code>disable_target_remote_overwrite</code>","text":"<p>Name <code>gef.disable_target_remote_overwrite</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>False</code></p> <p>Description Disable the overwrite of <code>target remote</code></p>"},{"location":"settings/gef/#extra_plugins_dir","title":"<code>extra_plugins_dir</code>","text":"<p>Name <code>gef.extra_plugins_dir</code></p> <p>Type <code>str</code></p> <p>DefaultValue: ``</p> <p>Description Autoload additional GEF commands from external directory</p>"},{"location":"settings/gef/#disable_color","title":"<code>disable_color</code>","text":"<p>Name <code>gef.disable_color</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>True</code></p> <p>Description Disable all colors in GEF</p>"},{"location":"settings/gef/#tempdir","title":"<code>tempdir</code>","text":"<p>Name <code>gef.tempdir</code></p> <p>Type <code>Path</code></p> <p>DefaultValue: <code>/tmp/gef</code></p> <p>Description Directory to use for temporary/cache content</p>"},{"location":"settings/gef/#show_deprecation_warnings","title":"<code>show_deprecation_warnings</code>","text":"<p>Name <code>gef.show_deprecation_warnings</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>True</code></p> <p>Description Toggle the display of the <code>deprecated</code> warnings</p>"},{"location":"settings/gef/#buffer","title":"<code>buffer</code>","text":"<p>Name <code>gef.buffer</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>True</code></p> <p>Description Internally buffer command output until completion</p>"},{"location":"settings/gef/#bruteforce_main_arena","title":"<code>bruteforce_main_arena</code>","text":"<p>Name <code>gef.bruteforce_main_arena</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>False</code></p> <p>Description Allow bruteforcing main_arena symbol if everything else fails</p>"},{"location":"settings/gef/#libc_version","title":"<code>libc_version</code>","text":"<p>Name <code>gef.libc_version</code></p> <p>Type <code>str</code></p> <p>DefaultValue: ``</p> <p>Description Specify libc version when auto-detection fails</p>"},{"location":"settings/gef/#main_arena_offset","title":"<code>main_arena_offset</code>","text":"<p>Name <code>gef.main_arena_offset</code></p> <p>Type <code>str</code></p> <p>DefaultValue: ``</p> <p>Description Offset from libc base address to main_arena symbol (int or hex). Set to empty string to disable.</p>"},{"location":"settings/gef/#propagate_debug_exception","title":"<code>propagate_debug_exception</code>","text":"<p>Name <code>gef.propagate_debug_exception</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>False</code></p> <p>Description If true, when debug mode is enabled, Python exceptions will be propagated all the way.</p>"},{"location":"settings/got/","title":"Settings for command <code>got</code>","text":""},{"location":"settings/got/#function_resolved","title":"<code>function_resolved</code>","text":"<p>Name <code>got.function_resolved</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>green</code></p> <p>Description Line color of the got command output for resolved function</p>"},{"location":"settings/got/#function_not_resolved","title":"<code>function_not_resolved</code>","text":"<p>Name <code>got.function_not_resolved</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>yellow</code></p> <p>Description Line color of the got command output for unresolved function</p>"},{"location":"settings/heap-analysis-helper/","title":"Settings for command <code>heap-analysis-helper</code>","text":""},{"location":"settings/heap-analysis-helper/#check_free_null","title":"<code>check_free_null</code>","text":"<p>Name <code>heap-analysis-helper.check_free_null</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>False</code></p> <p>Description Break execution when a free(NULL) is encountered</p>"},{"location":"settings/heap-analysis-helper/#check_double_free","title":"<code>check_double_free</code>","text":"<p>Name <code>heap-analysis-helper.check_double_free</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>True</code></p> <p>Description Break execution when a double free is encountered</p>"},{"location":"settings/heap-analysis-helper/#check_weird_free","title":"<code>check_weird_free</code>","text":"<p>Name <code>heap-analysis-helper.check_weird_free</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>True</code></p> <p>Description Break execution when free() is called against a non-tracked pointer</p>"},{"location":"settings/heap-analysis-helper/#check_uaf","title":"<code>check_uaf</code>","text":"<p>Name <code>heap-analysis-helper.check_uaf</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>True</code></p> <p>Description Break execution when a possible Use-after-Free condition is found</p>"},{"location":"settings/heap-analysis-helper/#check_heap_overlap","title":"<code>check_heap_overlap</code>","text":"<p>Name <code>heap-analysis-helper.check_heap_overlap</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>True</code></p> <p>Description Break execution when a possible overlap in allocation is found</p>"},{"location":"settings/heap-chunks/","title":"Settings for command <code>heap-chunks</code>","text":""},{"location":"settings/heap-chunks/#peek_nb_byte","title":"<code>peek_nb_byte</code>","text":"<p>Name <code>heap-chunks.peek_nb_byte</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>16</code></p> <p>Description Hexdump N first byte(s) inside the chunk data (0 to disable)</p>"},{"location":"settings/hexdump/","title":"Settings for command <code>hexdump</code>","text":""},{"location":"settings/hexdump/#always_show_ascii","title":"<code>always_show_ascii</code>","text":"<p>Name <code>hexdump.always_show_ascii</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>False</code></p> <p>Description If true, hexdump will always display the ASCII dump</p>"},{"location":"settings/highlight/","title":"Settings for command <code>highlight</code>","text":""},{"location":"settings/highlight/#regex","title":"<code>regex</code>","text":"<p>Name <code>highlight.regex</code></p> <p>Type <code>bool</code></p> <p>DefaultValue: <code>False</code></p> <p>Description Enable regex highlighting</p>"},{"location":"settings/pattern/","title":"Settings for command <code>pattern</code>","text":""},{"location":"settings/pattern/#length","title":"<code>length</code>","text":"<p>Name <code>pattern.length</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>1024</code></p> <p>Description Default length of a cyclic buffer to generate</p>"},{"location":"settings/pcustom%20edit/","title":"Pcustom edit","text":""},{"location":"settings/pcustom%20edit/#struct_path","title":"<code>struct_path</code>","text":"<p>Name <code>pcustom edit.struct_path</code></p> <p>Type <code>Path</code></p> <p>DefaultValue: <code>/tmp/gef/structs</code></p> <p>Description Path to store/load the structure ctypes files</p>"},{"location":"settings/pcustom%20list/","title":"Pcustom list","text":""},{"location":"settings/pcustom%20list/#struct_path","title":"<code>struct_path</code>","text":"<p>Name <code>pcustom list.struct_path</code></p> <p>Type <code>Path</code></p> <p>DefaultValue: <code>/tmp/gef/structs</code></p> <p>Description Path to store/load the structure ctypes files</p>"},{"location":"settings/pcustom%20show/","title":"Pcustom show","text":""},{"location":"settings/pcustom%20show/#struct_path","title":"<code>struct_path</code>","text":"<p>Name <code>pcustom show.struct_path</code></p> <p>Type <code>Path</code></p> <p>DefaultValue: <code>/tmp/gef/structs</code></p> <p>Description Path to store/load the structure ctypes files</p>"},{"location":"settings/pcustom/","title":"Settings for command <code>pcustom</code>","text":""},{"location":"settings/pcustom/#max_depth","title":"<code>max_depth</code>","text":"<p>Name <code>pcustom.max_depth</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>4</code></p> <p>Description Maximum level of recursion supported</p>"},{"location":"settings/pcustom/#structure_name","title":"<code>structure_name</code>","text":"<p>Name <code>pcustom.structure_name</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>bold blue</code></p> <p>Description Color of the structure name</p>"},{"location":"settings/pcustom/#structure_type","title":"<code>structure_type</code>","text":"<p>Name <code>pcustom.structure_type</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>bold red</code></p> <p>Description Color of the attribute type</p>"},{"location":"settings/pcustom/#structure_size","title":"<code>structure_size</code>","text":"<p>Name <code>pcustom.structure_size</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>green</code></p> <p>Description Color of the attribute size</p>"},{"location":"settings/pcustom/#struct_path","title":"<code>struct_path</code>","text":"<p>Name <code>pcustom.struct_path</code></p> <p>Type <code>Path</code></p> <p>DefaultValue: <code>/tmp/gef/structs</code></p> <p>Description Path to store/load the structure ctypes files</p>"},{"location":"settings/print-format/","title":"Settings for command <code>print-format</code>","text":""},{"location":"settings/print-format/#max_size_preview","title":"<code>max_size_preview</code>","text":"<p>Name <code>print-format.max_size_preview</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>10</code></p> <p>Description max size preview of bytes</p>"},{"location":"settings/process-search/","title":"Settings for command <code>process-search</code>","text":""},{"location":"settings/process-search/#ps_command","title":"<code>ps_command</code>","text":"<p>Name <code>process-search.ps_command</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>/usr/bin/ps auxww</code></p> <p>Description <code>ps</code> command to get process information</p>"},{"location":"settings/search-pattern/","title":"Settings for command <code>search-pattern</code>","text":""},{"location":"settings/search-pattern/#max_size_preview","title":"<code>max_size_preview</code>","text":"<p>Name <code>search-pattern.max_size_preview</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>10</code></p> <p>Description max size preview of bytes</p>"},{"location":"settings/search-pattern/#nr_pages_chunk","title":"<code>nr_pages_chunk</code>","text":"<p>Name <code>search-pattern.nr_pages_chunk</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>1024</code></p> <p>Description number of pages readed for each memory read chunk</p>"},{"location":"settings/theme/","title":"Settings for command <code>theme</code>","text":""},{"location":"settings/theme/#context_title_line","title":"<code>context_title_line</code>","text":"<p>Name <code>theme.context_title_line</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>gray</code></p> <p>Description Color of the borders in context window</p>"},{"location":"settings/theme/#context_title_message","title":"<code>context_title_message</code>","text":"<p>Name <code>theme.context_title_message</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>cyan</code></p> <p>Description Color of the title in context window</p>"},{"location":"settings/theme/#default_title_line","title":"<code>default_title_line</code>","text":"<p>Name <code>theme.default_title_line</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>gray</code></p> <p>Description Default color of borders</p>"},{"location":"settings/theme/#default_title_message","title":"<code>default_title_message</code>","text":"<p>Name <code>theme.default_title_message</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>cyan</code></p> <p>Description Default color of title</p>"},{"location":"settings/theme/#table_heading","title":"<code>table_heading</code>","text":"<p>Name <code>theme.table_heading</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>blue</code></p> <p>Description Color of the column headings to tables (e.g. vmmap)</p>"},{"location":"settings/theme/#old_context","title":"<code>old_context</code>","text":"<p>Name <code>theme.old_context</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>gray</code></p> <p>Description Color to use to show things such as code that is not immediately relevant</p>"},{"location":"settings/theme/#disassemble_current_instruction","title":"<code>disassemble_current_instruction</code>","text":"<p>Name <code>theme.disassemble_current_instruction</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>green</code></p> <p>Description Color to use to highlight the current $pc when disassembling</p>"},{"location":"settings/theme/#dereference_string","title":"<code>dereference_string</code>","text":"<p>Name <code>theme.dereference_string</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>yellow</code></p> <p>Description Color of dereferenced string</p>"},{"location":"settings/theme/#dereference_code","title":"<code>dereference_code</code>","text":"<p>Name <code>theme.dereference_code</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>gray</code></p> <p>Description Color of dereferenced code</p>"},{"location":"settings/theme/#dereference_base_address","title":"<code>dereference_base_address</code>","text":"<p>Name <code>theme.dereference_base_address</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>cyan</code></p> <p>Description Color of dereferenced address</p>"},{"location":"settings/theme/#dereference_register_value","title":"<code>dereference_register_value</code>","text":"<p>Name <code>theme.dereference_register_value</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>bold blue</code></p> <p>Description Color of dereferenced register</p>"},{"location":"settings/theme/#registers_register_name","title":"<code>registers_register_name</code>","text":"<p>Name <code>theme.registers_register_name</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>blue</code></p> <p>Description Color of the register name in the register window</p>"},{"location":"settings/theme/#registers_value_changed","title":"<code>registers_value_changed</code>","text":"<p>Name <code>theme.registers_value_changed</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>bold red</code></p> <p>Description Color of the changed register in the register window</p>"},{"location":"settings/theme/#address_stack","title":"<code>address_stack</code>","text":"<p>Name <code>theme.address_stack</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>pink</code></p> <p>Description Color to use when a stack address is found</p>"},{"location":"settings/theme/#address_heap","title":"<code>address_heap</code>","text":"<p>Name <code>theme.address_heap</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>green</code></p> <p>Description Color to use when a heap address is found</p>"},{"location":"settings/theme/#address_code","title":"<code>address_code</code>","text":"<p>Name <code>theme.address_code</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>red</code></p> <p>Description Color to use when a code address is found</p>"},{"location":"settings/theme/#source_current_line","title":"<code>source_current_line</code>","text":"<p>Name <code>theme.source_current_line</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>green</code></p> <p>Description Color to use for the current code line in the source window</p>"},{"location":"settings/trace-run/","title":"Settings for command <code>trace-run</code>","text":""},{"location":"settings/trace-run/#max_tracing_recursion","title":"<code>max_tracing_recursion</code>","text":"<p>Name <code>trace-run.max_tracing_recursion</code></p> <p>Type <code>int</code></p> <p>DefaultValue: <code>1</code></p> <p>Description Maximum depth of tracing</p>"},{"location":"settings/trace-run/#tracefile_prefix","title":"<code>tracefile_prefix</code>","text":"<p>Name <code>trace-run.tracefile_prefix</code></p> <p>Type <code>str</code></p> <p>DefaultValue: <code>./gef-trace-</code></p> <p>Description Specify the tracing output file prefix</p>"}]}