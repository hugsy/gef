name: CI Test for GEF

on:
  push:
    branches:
      - master
      - dev

  pull_request:
    branches:
      - master
      - dev

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-18.04
          # - [self-hosted, linux, ARM64]
          # - [self-hosted, linux, ARM]
    name: "Run Unit tests on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v2

    - name: Install python and toolchain
      run: |
        sudo apt-get update
        sudo apt-get install -y gdb-multiarch python3-dev python3-pip python3-wheel python3-setuptools git cmake gcc g++ pkg-config libglib2.0-dev gdbserver
        sudo python3 -m pip install --upgrade pip

    - name: Set architecture specific properties
      id: set-arch-properties
      run: |
        echo "::set-output name=arch::$(uname --processor)"

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(python3 -m pip cache dir)"

    - name: Cache dependencies
      uses: actions/cache@v2
      id: cache-deps
      env:
        cache-name: cache-deps
      with:
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        path: |
          ${{ steps.pip-cache.outputs.dir }}
        restore-keys:
          ${{ runner.os }}-pip-${{ env.cache-name }}-
          ${{ runner.os }}-pip-
          ${{ runner.os }}-${{ env.cache-name }}-
          ${{ runner.os }}-

    - name: Install Python modules (Capstone, Keystone, Unicorn, Ropper)
      run: |
        mkdir -p ${{ steps.pip-cache.outputs.dir }}
        python3 -m pip install --user --upgrade -r ./requirements.txt

    - name: Setup GEF
      run: |
        echo "source $(pwd)/gef.py" > ~/.gdbinit
        gdb -q -ex 'gef missing' -ex 'gef help' -ex 'gef config' -ex start -ex continue -ex quit /bin/pwd

    - name: Run Tests
      env:
        GEF_CI_ARCH: ${{ steps.set-arch-properties.outputs.arch }}
      run: |
        make test

    - name: Run linter
      run: |
        make lint

